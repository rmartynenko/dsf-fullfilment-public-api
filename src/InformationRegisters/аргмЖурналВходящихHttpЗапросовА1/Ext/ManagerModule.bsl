#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция НовоеОписаниеЗаписиЖурнала() Экспорт 
	
	ИмяРегистра		   = "аргмЖурналВходящихHttpЗапросовА1";
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	МенеджерЗаписи	   = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
	
	Возврат ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(МенеджерЗаписи, МетаданныеРегистра);
	
КонецФункции

Функция НоваяЗаписьЖурнала() Экспорт 
	
	НоваяЗапись = Новый Структура;
	
	НоваяЗапись.Вставить("ИдентификаторЗапроса", Неопределено);
	НоваяЗапись.Вставить("Ресурс", "");
	НоваяЗапись.Вставить("Метод", ""); 
	НоваяЗапись.Вставить("КлючИдемпотентности", "");
	НоваяЗапись.Вставить("Клиент", Неопределено);
	НоваяЗапись.Вставить("Запрос", Неопределено);
	НоваяЗапись.Вставить("Асинхронный", Ложь);
	НоваяЗапись.Вставить("БазовыйURL", ""); 
	НоваяЗапись.Вставить("ТипЗапроса", "");

	Возврат НоваяЗапись;
	
КонецФункции

// Добавляет новую запись в журнал
//
// Параметры:
//  ДанныеНовойЗаписи	 - Структура - см. ЖурналВходящихHttpЗапросовА1, НоваяЗаписьЖурнала()
//
Процедура ДобавитьЗаписьВЖурнал(ДанныеНовойЗаписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Менеджер = РегистрыСведений.аргмЖурналВходящихHttpЗапросовА1.СоздатьМенеджерЗаписи();
	
	ЗаполнитьЗначенияСвойств(Менеджер, ДанныеНовойЗаписи,, "Запрос");
	
	// новые записи в журнале регистрируются в состоянии "Принят"
	Менеджер.Состояние = Перечисления.аргмСостоянияВходящихЗапросовА1.Принят;
	
	ОписаниеЗапроса = ДанныеНовойЗаписи["Запрос"];
	
	Менеджер.Запрос = Новый ХранилищеЗначения(ОписаниеЗапроса, Новый СжатиеДанных()); 
	
	ТелоЗапроса = ОписаниеЗапроса.Тело;
	
	Менеджер.ХешТелаЗапроса = аргмВходящиеЗапросыА1.ХешированиеДанныхSHA256(ТелоЗапроса);
	
	Менеджер.МоментВремени = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Менеджер.ДатаСоздания = ТекущаяДатаСеанса();
	
	Менеджер.Записать(Истина);
		
КонецПроцедуры

Процедура ЗаписатьРезультатОбработки(Измерения,
									ОписаниеОтвета,
									СостояниеОбработки,
									ДлительностьОбработки = 0,
									ДатаОбработки = Неопределено,
									ДатаУстаревания = Неопределено) Экспорт
	
	Менеджер = РегистрыСведений.аргмЖурналВходящихHttpЗапросовА1.СоздатьМенеджерЗаписи();
	
	Менеджер.ИдентификаторЗапроса = Измерения.ИдентификаторЗапроса;
	Менеджер.Ресурс				  = Измерения.Ресурс;
	Менеджер.Метод 				  = Измерения.Метод;
	Менеджер.Клиент 			  = Измерения.Клиент;
	Менеджер.КлючИдемпотентности  = Измерения.КлючИдемпотентности;
	
	Менеджер.Прочитать();

	Если Менеджер.Выбран() Тогда
		Менеджер.Состояние = СостояниеОбработки;
					
		Менеджер.Ответ = Новый ХранилищеЗначения(ОписаниеОтвета, Новый СжатиеДанных());
		Менеджер.Длительность = ДлительностьОбработки;
		
		Если ЗначениеЗаполнено(ДатаОбработки) Тогда
			Менеджер.ДатаОбработки = ДатаОбработки;
			
		Иначе
			Менеджер.ДатаОбработки = ТекущаяДатаСеанса();

		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДатаУстаревания) > 0 Тогда
			Менеджер.ДатаУстаревания = ДатаУстаревания;

		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);

		Менеджер.Записать(Ложь);
		
	Иначе
		ВызватьИсключение "Попытка зарегистрировать результат выполнения для несуществующего запроса";
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьОшибкуОбработки(Измерения,
									Ошибки,
									ДлительностьОбработки = 0,
									ДатаОбработки = Неопределено) Экспорт
										
	Менеджер = РегистрыСведений.аргмЖурналВходящихHttpЗапросовА1.СоздатьМенеджерЗаписи();
	
	Менеджер.ИдентификаторЗапроса = Измерения.ИдентификаторЗапроса;
	Менеджер.Ресурс				  = Измерения.Ресурс;
	Менеджер.Метод 				  = Измерения.Метод;
	Менеджер.Клиент 			  = Измерения.Клиент;
	Менеджер.КлючИдемпотентности  = Измерения.КлючИдемпотентности;

	Менеджер.Прочитать();

	Если Менеджер.Выбран() Тогда
		Менеджер.Состояние = Перечисления.аргмСостоянияВходящихЗапросовА1.ОшибкаВыполнения;
					
		Менеджер.Длительность = ДлительностьОбработки;
		
		Если ЗначениеЗаполнено(ДатаОбработки) Тогда
			Менеджер.ДатаОбработки = ДатаОбработки;
			
		Иначе
			Менеджер.ДатаОбработки = ТекущаяДатаСеанса();

		КонецЕсли;
		
		Если Ошибки.Количество() > 0 Тогда
			ТекстОшибки = СтрСоединить(Ошибки, Символы.ПС);
			Менеджер.ТекстСообщенияОбОшибке = ТекстОшибки;
			
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);

		Менеджер.Записать(Ложь);
		
	Иначе
		ВызватьИсключение "Попытка зарегистрировать ошибку выполнения для несуществующего запроса";
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСообщение(ДанныеСообщения) Экспорт
	
	Менеджер = РегистрыСведений.аргмЖурналВходящихHttpЗапросовА1.СоздатьМенеджерЗаписи();
	
	Менеджер.Идентификатор = Новый УникальныйИдентификатор();
	Менеджер.МоментВремени = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Менеджер.ДатаСоздания = ТекущаяДатаСеанса();
	
	УстановитьПривилегированныйРежим(Истина);

	Менеджер.Записать(Истина);
	
КонецПроцедуры

Функция ЗапросПоКлючуИдемпотентности(Ключ, Ресурс, Метод, Клиент) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	аргмЖурналВходящихHttpЗапросовА1.ИдентификаторЗапроса КАК ИдентификаторЗапроса,
	               |	аргмЖурналВходящихHttpЗапросовА1.Ресурс КАК Ресурс,
	               |	аргмЖурналВходящихHttpЗапросовА1.Метод КАК Метод,
	               |	аргмЖурналВходящихHttpЗапросовА1.КлючИдемпотентности КАК КлючИдемпотентности,
	               |	аргмЖурналВходящихHttpЗапросовА1.ТипЗапроса КАК ТипЗапроса,
	               |	аргмЖурналВходящихHttpЗапросовА1.Состояние КАК Состояние,
	               |	аргмЖурналВходящихHttpЗапросовА1.Запрос КАК Запрос,
	               |	аргмЖурналВходящихHttpЗапросовА1.Ответ КАК Ответ,
	               |	аргмЖурналВходящихHttpЗапросовА1.МоментВремени КАК МоментВремени,
	               |	аргмЖурналВходящихHttpЗапросовА1.ХешТелаЗапроса КАК ХешТелаЗапроса,
	               |	аргмЖурналВходящихHttpЗапросовА1.ДатаСоздания КАК ДатаСоздания,
	               |	аргмЖурналВходящихHttpЗапросовА1.Длительность КАК Длительность,
	               |	аргмЖурналВходящихHttpЗапросовА1.ТекстСообщенияОбОшибке КАК ТекстСообщенияОбОшибке,
	               |	аргмЖурналВходящихHttpЗапросовА1.Асинхронный КАК Асинхронный,
	               |	аргмЖурналВходящихHttpЗапросовА1.БазовыйURL КАК БазовыйURL
	               |ИЗ
	               |	РегистрСведений.аргмЖурналВходящихHttpЗапросовА1 КАК аргмЖурналВходящихHttpЗапросовА1
	               |ГДЕ
	               |	аргмЖурналВходящихHttpЗапросовА1.КлючИдемпотентности = &КлючИдемпотентности
	               |	И аргмЖурналВходящихHttpЗапросовА1.Ресурс = &Ресурс
	               |	И аргмЖурналВходящихHttpЗапросовА1.Метод = &Метод
	               |	И аргмЖурналВходящихHttpЗапросовА1.Клиент = &Клиент";
	
	Запрос.УстановитьПараметр("КлючИдемпотентности", Ключ);
	Запрос.УстановитьПараметр("Ресурс", Ресурс);
	Запрос.УстановитьПараметр("Метод", Метод);
	Запрос.УстановитьПараметр("Клиент", Клиент);

	Результат = Запрос.Выполнить(); 
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОписаниеЗапроса = НовоеОписаниеЗаписиЖурнала();
		
		ЗаполнитьЗначенияСвойств(ОписаниеЗапроса, Выборка);
		
		Возврат ОписаниеЗапроса;
		
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции 

Функция ЗапросПоИдентификатору(ИдентификаторЗапроса) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	аргмЖурналВходящихHttpЗапросовА1.ИдентификаторЗапроса КАК ИдентификаторЗапроса,
	               |	аргмЖурналВходящихHttpЗапросовА1.Ресурс КАК Ресурс,
	               |	аргмЖурналВходящихHttpЗапросовА1.Метод КАК Метод,
	               |	аргмЖурналВходящихHttpЗапросовА1.КлючИдемпотентности КАК КлючИдемпотентности,
	               |	аргмЖурналВходящихHttpЗапросовА1.Состояние КАК Состояние,
	               |	аргмЖурналВходящихHttpЗапросовА1.Запрос КАК Запрос,
	               |	аргмЖурналВходящихHttpЗапросовА1.Ответ КАК Ответ,
	               |	аргмЖурналВходящихHttpЗапросовА1.МоментВремени КАК МоментВремени,
	               |	аргмЖурналВходящихHttpЗапросовА1.ХешТелаЗапроса КАК ХешТелаЗапроса,
	               |	аргмЖурналВходящихHttpЗапросовА1.ДатаСоздания КАК ДатаСоздания,
	               |	аргмЖурналВходящихHttpЗапросовА1.Длительность КАК Длительность,
	               |	аргмЖурналВходящихHttpЗапросовА1.ТекстСообщенияОбОшибке КАК ТекстСообщенияОбОшибке,
	               |	аргмЖурналВходящихHttpЗапросовА1.Асинхронный КАК Асинхронный,
	               |	аргмЖурналВходящихHttpЗапросовА1.БазовыйURL КАК БазовыйURL,
	               |	аргмЖурналВходящихHttpЗапросовА1.Клиент КАК Клиент,
	               |	аргмЖурналВходящихHttpЗапросовА1.ТипЗапроса КАК ТипЗапроса
	               |ИЗ
	               |	РегистрСведений.аргмЖурналВходящихHttpЗапросовА1 КАК аргмЖурналВходящихHttpЗапросовА1
	               |ГДЕ
	               |	аргмЖурналВходящихHttpЗапросовА1.ИдентификаторЗапроса = &ИдентификаторЗапроса";
	
	Запрос.УстановитьПараметр("ИдентификаторЗапроса", ИдентификаторЗапроса);

	Результат = Запрос.Выполнить(); 
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОписаниеЗапроса = НовоеОписаниеЗаписиЖурнала();
		
		ЗаполнитьЗначенияСвойств(ОписаниеЗапроса, Выборка);
		
		Возврат ОписаниеЗапроса;
		
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции

Процедура ОбработкаАсихронныхЗапросов() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	аргмЖурналВходящихHttpЗапросовА1.ИдентификаторЗапроса КАК ИдентификаторЗапроса,
	               |	аргмЖурналВходящихHttpЗапросовА1.Ресурс КАК Ресурс,
	               |	аргмЖурналВходящихHttpЗапросовА1.Метод КАК Метод,
	               |	аргмЖурналВходящихHttpЗапросовА1.КлючИдемпотентности КАК КлючИдемпотентности,
	               |	аргмЖурналВходящихHttpЗапросовА1.ТипЗапроса КАК ТипЗапроса,
	               |	аргмЖурналВходящихHttpЗапросовА1.Состояние КАК Состояние,
	               |	аргмЖурналВходящихHttpЗапросовА1.Запрос КАК Запрос,
	               |	аргмЖурналВходящихHttpЗапросовА1.Ответ КАК Ответ,
	               |	аргмЖурналВходящихHttpЗапросовА1.МоментВремени КАК МоментВремени,
	               |	аргмЖурналВходящихHttpЗапросовА1.ХешТелаЗапроса КАК ХешТелаЗапроса,
	               |	аргмЖурналВходящихHttpЗапросовА1.ДатаСоздания КАК ДатаСоздания,
	               |	аргмЖурналВходящихHttpЗапросовА1.ДатаОбработки КАК ДатаОбработки,
	               |	аргмЖурналВходящихHttpЗапросовА1.Длительность КАК Длительность,
	               |	аргмЖурналВходящихHttpЗапросовА1.ТекстСообщенияОбОшибке КАК ТекстСообщенияОбОшибке,
	               |	аргмЖурналВходящихHttpЗапросовА1.Асинхронный КАК Асинхронный,
	               |	аргмЖурналВходящихHttpЗапросовА1.БазовыйURL КАК БазовыйURL,
	               |	аргмЖурналВходящихHttpЗапросовА1.Клиент КАК Клиент
	               |ИЗ
	               |	РегистрСведений.аргмЖурналВходящихHttpЗапросовА1 КАК аргмЖурналВходящихHttpЗапросовА1
	               |ГДЕ
	               |	аргмЖурналВходящихHttpЗапросовА1.Асинхронный = ИСТИНА
	               |	И аргмЖурналВходящихHttpЗапросовА1.Состояние = &Состояние";
	
	Запрос.УстановитьПараметр("Состояние", Перечисления.аргмСостоянияВходящихЗапросовА1.Принят);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОписаниеЗапроса = Выборка.Запрос.Получить();
		
		ОбработатьЗапрос(Выборка, ОписаниеЗапроса);
		
	КонецЦикла;
	
КонецПроцедуры

// Функция - Обработать запрос
//
// Параметры:
//  ЗаписьЖурналаРегистрации - Структура, ВыборкаРезультатаЗапроса - Данные записи из журнала вх. запросов
//  ОписаниеЗапроса			 - Структура - см. ВходящиеЗапросыА1.НовоеОписаниеВходящегоЗапроса
// 
// Возвращаемое значение:
//   - РезультатОбработкиЗапроса - Структура - см. ОбработкаВходящихЗапросовА1.НовыйРезультатОбработкиЗапроса
//
Функция ОбработатьЗапрос(ЗаписьЖурналаЗапросов, Знач ОписаниеЗапроса = Неопределено) Экспорт
	
	РезультатОбработкиЗапроса = аргмОбработкаВходящихЗапросовА1.НовыйРезультатОбработкиЗапроса();
	
	НачатьТранзакцию();
	Попытка
		НачалоОбработки = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.аргмЖурналВходящихHttpЗапросовА1");
		ЭлементБлокировкиДанных.УстановитьЗначение("ИдентификаторЗапроса", ЗаписьЖурналаЗапросов.ИдентификаторЗапроса); 
		ЭлементБлокировкиДанных.УстановитьЗначение("Ресурс", ЗаписьЖурналаЗапросов.Ресурс);
		ЭлементБлокировкиДанных.УстановитьЗначение("Метод", ЗаписьЖурналаЗапросов.Метод);
		ЭлементБлокировкиДанных.УстановитьЗначение("Клиент", ЗаписьЖурналаЗапросов.Клиент);
		ЭлементБлокировкиДанных.УстановитьЗначение("КлючИдемпотентности", ЗаписьЖурналаЗапросов.КлючИдемпотентности);

		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		Если ОписаниеЗапроса = Неопределено Тогда
			
			ДанныеЗапроса = ЗаписьЖурналаЗапросов.Запрос;
			
			Если ТипЗнч(ДанныеЗапроса) = Тип("ХранилищеЗначения") Тогда
				ОписаниеЗапроса = ДанныеЗапроса.Получить();
				
			Иначе
				ОписаниеЗапроса = ДанныеЗапроса;
				
			КонецЕсли;
			
		КонецЕсли;
		
		РезультатОбработкиЗапроса = аргмОбработкаВходящихЗапросовА1.РезультатОбработкиЗапроса(ОписаниеЗапроса);
		
		ОкончаниеОбработки = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		ДлительностьОбработки = ОкончаниеОбработки - НачалоОбработки;
		Если РезультатОбработкиЗапроса.ОбработанУспешно Тогда
			
			ОписаниеОтвета = аргмОтветыНаЗапросыА1.ОписаниеОтвета(РезультатОбработкиЗапроса);
			СостояниеОбработки = РезультатОбработкиЗапроса.Состояние;
			
			// запись результата обработки в журнал
			ЗаписатьРезультатОбработки(ЗаписьЖурналаЗапросов,
										ОписаниеОтвета,
										СостояниеОбработки,
										ДлительностьОбработки,
										РезультатОбработкиЗапроса.ДатаОбработки,
										РезультатОбработкиЗапроса.ДатаУстаревания);
			
		Иначе
			// регистрация ошибки обработки с указанием текста ошибки
			ЗаписатьОшибкуОбработки(ЗаписьЖурналаЗапросов,
									РезультатОбработкиЗапроса.Ошибки,
									ДлительностьОбработки,
									РезультатОбработкиЗапроса.ДатаОбработки);
			
		КонецЕсли; 
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(аргмВходящиеЗапросыА1.ИмяСобытияЖурналаРегистрации(),
								УровеньЖурналаРегистрации.Ошибка,
								Метаданные.РегистрыСведений.аргмЖурналВходящихHttpЗапросовА1,
								,
								ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
								
		РезультатОбработкиЗапроса.ОбработанУспешно = Ложь;
		РезультатОбработкиЗапроса.Ошибки.Добавить(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		
	КонецПопытки;

	Возврат РезультатОбработкиЗапроса;
	
КонецФункции

Процедура УдалитьУстаревшиеЗаписи(Знач СрокХраненияЗаписей) Экспорт

	Если Не ЗначениеЗаполнено(СрокХраненияЗаписей) Тогда
		Возврат;
		
	КонецЕсли;
	
	КонтрольнаяДата = ТекущаяДатаСеанса() - СрокХраненияЗаписей * 86400;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	аргмЖурналВходящихHttpЗапросовА1.ИдентификаторЗапроса КАК ИдентификаторЗапроса
	|ИЗ
	|	РегистрСведений.аргмЖурналВходящихHttpЗапросовА1 КАК аргмЖурналВходящихHttpЗапросовА1
	|ГДЕ
	|	аргмЖурналВходящихHttpЗапросовА1.Состояние В(&МассивСостояний)
	|	И аргмЖурналВходящихHttpЗапросовА1.ДатаОбработки <= &ДатаОбработки
	|
	|УПОРЯДОЧИТЬ ПО
	|	аргмЖурналВходящихHttpЗапросовА1.МоментВремени";
	
	МассивСостоянийЗапросов = Новый Массив;
	МассивСостоянийЗапросов.Добавить(Перечисления.аргмСостоянияВходящихЗапросовА1.Завершен);
	
	Запрос.УстановитьПараметр("МассивСостояний", МассивСостоянийЗапросов);	
	Запрос.УстановитьПараметр("ДатаОбработки", КонтрольнаяДата);
	
	Результат = Запрос.Выполнить(); 
	
	Если Результат.Пустой() Тогда
		Возврат;
		
	КонецЕсли;
	Выборка = Результат.Выбрать();
	
	КоличествоУдаляемыхЗаписей	= Выборка.Количество();
	УдаленоЗаписей = 0;
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.аргмЖурналВходящихHttpЗапросовА1.СоздатьНаборЗаписей();
		Набор.Отбор.ИдентификаторЗапроса.Установить(Выборка.ИдентификаторЗапроса);
		Набор.Записать();
		
		УдаленоЗаписей = УдаленоЗаписей + 1;

	КонецЦикла;
	
	ТекстСообщения = СтрШаблон("При очистке журнала входящих запросов удалено %1 из %2 записей",
								УдаленоЗаписей,
								КоличествоУдаляемыхЗаписей);

	ЗаписьЖурналаРегистрации("Очистка журнала вх. http-запросов",
							УровеньЖурналаРегистрации.Информация,
							Метаданные.РегистрыСведений.аргмЖурналВходящихHttpЗапросовА1,
							,
							ТекстСообщения);
							
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий
// Код процедур и функций
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
// Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Код процедур и функций
#КонецОбласти
	
#КонецЕсли