#Область СлужебныйПрограммныйИнтерфейс

#Область ПроцедурыНачалаОбработкиВходящихЗапросов

Процедура РегистрацияНовыхПозицийНоменклатуры(ОписаниеЗапроса, РезультатОбработкиЗапроса) Экспорт

	ПараметрыПреобразования = Новый Структура;
	ПараметрыПреобразования.Вставить("ПрочитатьВСоответствие", Ложь);

	ДанныеЗапроса = аргмКоннекторHttpA1.JsonВОбъект(ОписаниеЗапроса.Тело, "utf-8", ПараметрыПреобразования);
	
	Ошибки = РезультатОбработкиЗапроса.Ошибки;
	
	Поклажедатель = ОписаниеЗапроса.Клиент;
	
	ПрефиксКода = "";
	ГруппаНоменклатуры = Неопределено;
	
	Если ЗначениеЗаполнено(ОписаниеЗапроса.КлючАпи) Тогда		
		НастройкиПоклажедателя = РегистрыСведений.дсфНастройкиДоступаКАпи.ЗначениеНастроекКлиента(ОписаниеЗапроса.КлючАпи);

		ПрефиксКода = НастройкиПоклажедателя["Префикс"];
		ГруппаНоменклатуры = НастройкиПоклажедателя["ГруппаНоменклатуры"]
	
	КонецЕсли;
	
	Результат = РегистрацияНовыхПозицийНоменклатурыРезультат(ДанныеЗапроса,
															Поклажедатель, ГруппаНоменклатуры,
															Ошибки,
															ПрефиксКода);
	
	ПоместитьРезультатВыполненияВРезультатОбработкиЗапроса(Результат, РезультатОбработкиЗапроса);

КонецПроцедуры

Процедура РегистрацияНовогоКонтрагента(ОписаниеЗапроса, РезультатОбработкиЗапроса) Экспорт

	ПараметрыПреобразования = Новый Структура;
	ПараметрыПреобразования.Вставить("ПрочитатьВСоответствие", Ложь);

	ДанныеЗапроса = аргмКоннекторHttpA1.JsonВОбъект(ОписаниеЗапроса.Тело, "utf-8", ПараметрыПреобразования);
	
	Ошибки = РезультатОбработкиЗапроса.Ошибки;
	
	Поклажедатель = ОписаниеЗапроса.Клиент;
		
	Результат = РегистрацияНовогоКонтрагентаРезультат(ДанныеЗапроса, Поклажедатель, Ошибки);
	
	ПоместитьРезультатВыполненияВРезультатОбработкиЗапроса(Результат, РезультатОбработкиЗапроса);

КонецПроцедуры

Процедура РегистрацияНовогоПланаОтгрузки(ОписаниеЗапроса, РезультатОбработкиЗапроса) Экспорт

	ПараметрыПреобразования = Новый Структура;
	ПараметрыПреобразования.Вставить("ПрочитатьВСоответствие", Ложь);
	ПараметрыПреобразования.Вставить("ИменаСвойствСоЗначениямиДата",
									ОписаниеЗапроса["ПравилоОбработки"]["ИменаСвойствСоЗначениямиДата"]);

	ДанныеЗапроса = аргмКоннекторHttpA1.JsonВОбъект(ОписаниеЗапроса.Тело, "utf-8", ПараметрыПреобразования);
	
	Ошибки = РезультатОбработкиЗапроса.Ошибки;
	
	Поклажедатель = ОписаниеЗапроса.Клиент;
		
	Результат = РегистрацияНовогоПланаОтгрузкиРезультат(ДанныеЗапроса, Поклажедатель, Ошибки);
	
	ПоместитьРезультатВыполненияВРезультатОбработкиЗапроса(Результат, РезультатОбработкиЗапроса);

КонецПроцедуры

#КонецОбласти

Процедура ПоместитьРезультатВыполненияВРезультатОбработкиЗапроса(Результат, РезультатОбработкиЗапроса) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		РезультатОбработкиЗапроса.Вставить("Данные", Результат);
		РезультатОбработкиЗапроса.Состояние = Перечисления.аргмСостоянияВходящихЗапросовА1.Завершен;
		
	Иначе
		Ошибки = РезультатОбработкиЗапроса.Ошибки;
		Если Ошибки.Количество() > 0 Тогда
			РезультатОбработкиЗапроса.Данные = Новый Структура("errors", Ошибки);
			
		КонецЕсли;
		
		РезультатОбработкиЗапроса.Состояние = Перечисления.аргмСостоянияВходящихЗапросовА1.ОшибкаВыполнения;
		РезультатОбработкиЗапроса.ОбработанУспешно = Ложь;
		
	КонецЕсли;
	
	РезультатОбработкиЗапроса.ДатаОбработки = ТекущаяДатаСеанса();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РегистрацияНовыхПозицийНоменклатурыРезультат(ДанныеНоменклатуры,
													Поклажедатель,
													ГруппаНоменклатуры,
													Ошибки,
													ПрефиксКода = "")

	Результат = дсфМенеджерДанныхАпи.РезультатСозданияПозицийНоменклатуры(ДанныеНоменклатуры,
																				Поклажедатель,
																				ГруппаНоменклатуры);
	
	Если Результат.ОбъектыСозданы Тогда
		ДанныеДляОтвета = Новый Структура;
		
		Если Результат.СписокОбъектов.Количество() > 0 Тогда
			
			МассивОписанийНоменклатуры = Новый Массив;
			Для каждого Номенклатура Из Результат.СписокОбъектов Цикл
				СведенияОНоменклатуре = дсфНормативноСправочнаяИнформацияАпи.СведенияОПозицииНоменклатуры(Номенклатура);
				
				МассивОписанийНоменклатуры.Добавить(СведенияОНоменклатуре);
				
			КонецЦикла;
			
			СведенияОНоменклатуре = Новый Структура("goods", МассивОписанийНоменклатуры);
			ДанныеДляОтвета.Вставить("data", СведенияОНоменклатуре);
			
		КонецЕсли;
			
		Если ЗначениеЗаполнено(Результат.Ошибки) Тогда
			ДанныеДляОтвета.Вставить("errors", Результат.Ошибки);
	
		КонецЕсли;
		
		Возврат ДанныеДляОтвета;
		
	Иначе
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Ошибки, Результат.Ошибки); 
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Функция РегистрацияНовогоКонтрагентаРезультат(ДанныеКонтрагента, Поклажедатель, Ошибки)
	
	Результат = дсфМенеджерДанныхАпи.РезультатСозданияКонтрагента(ДанныеКонтрагента, Поклажедатель);

	Если Не Результат.ОбъектСоздан Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Ошибки, Результат.Ошибки);
		Возврат Неопределено;

	КонецЕсли;
	
	ДанныеДляОтвета = Новый Структура;
	
	СведенияОКонтрагенте = дсфНормативноСправочнаяИнформацияАпи.СведенияОКонтрагенте(Результат.Ссылка);
	
	ДанныеДляОтвета.Вставить("data", СведенияОКонтрагенте);
			
	Если ЗначениеЗаполнено(Результат.Ошибки) Тогда
		ДанныеДляОтвета.Вставить("errors", Результат.Ошибки);

	КонецЕсли;
	
	Возврат ДанныеДляОтвета;

КонецФункции

Функция РегистрацияНовогоПланаОтгрузкиРезультат(ДанныеПланаОтгрузки, Поклажедатель, Ошибки)
	
	Результат = дсфМенеджерДанныхАпи.РезультатСозданияПланаОтгрузки(ДанныеПланаОтгрузки, Поклажедатель);

	Если Не Результат.ОбъектСоздан Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Ошибки, Результат.Ошибки);
		Возврат Неопределено;

	КонецЕсли;
	
	ДанныеДляОтвета = Новый Структура;
	
	СведенияОПланеОтгрузки = дсфДокументыАпи.СведенияОПланеОтгрузки(Результат.Ссылка);
	
	ДанныеДляОтвета.Вставить("data", СведенияОПланеОтгрузки);
			
	Если ЗначениеЗаполнено(Результат.Ошибки) Тогда
		ДанныеДляОтвета.Вставить("errors", Результат.Ошибки);

	КонецЕсли;
	
	Возврат ДанныеДляОтвета;

КонецФункции

#КонецОбласти