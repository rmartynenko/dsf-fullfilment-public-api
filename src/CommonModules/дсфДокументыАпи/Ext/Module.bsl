#Область ПрограммныйИнтерфейс

#Область ПланПоступления

Функция НовоеОписаниеСтрокиПланаПоступления() Экспорт
	
	ИмяРегистра = "СтрокиПлановПоступления";
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	МенеджерЗаписи = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();

	Возврат ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(МенеджерЗаписи, МетаданныеРегистра)
	
КонецФункции

#КонецОбласти

#Область ПланОтгрузки

Функция НовоеВходящееОписаниеПланаОтгрузки() Экспорт
	ОписаниеПланаОтгрузки = Новый Структура;
	
	ОписаниеПланаОтгрузки.Вставить("Поклажедатель", Неопределено);
	ОписаниеПланаОтгрузки.Вставить("ВходящийИдентификатор", "");
	ОписаниеПланаОтгрузки.Вставить("ДатаВходящегоДокумента", Неопределено);
	ОписаниеПланаОтгрузки.Вставить("НомерВходящегоДокумента", "");
	ОписаниеПланаОтгрузки.Вставить("ТипОтгрузки", Неопределено);
	ОписаниеПланаОтгрузки.Вставить("НаименованиеКонтрагента", "");
	ОписаниеПланаОтгрузки.Вставить("ИдентификаторКонтрагента", "");
	ОписаниеПланаОтгрузки.Вставить("ПлановаяДатаОтгрузки", Неопределено);
	ОписаниеПланаОтгрузки.Вставить("Товары", Новый Массив); // см. дсфДокументыАпи.НовоеОписаниеЭлементаСпискаТоваров
	ОписаниеПланаОтгрузки.Вставить("АдресДоставкиСтрокой", "");
	ОписаниеПланаОтгрузки.Вставить("АдресДоставкиКомментарий", "");
	ОписаниеПланаОтгрузки.Вставить("ПлановаяДатаДоставки", Неопределено);
	ОписаниеПланаОтгрузки.Вставить("ГосНомерТранспортногоСредства", "");
	ОписаниеПланаОтгрузки.Вставить("ВодительФИО", Неопределено);
	ОписаниеПланаОтгрузки.Вставить("ТелефонВодителя", "");
	
	Возврат ОписаниеПланаОтгрузки;
	
КонецФункции

Функция НовоеОписаниеЭлементаСпискаТоваров() Экспорт
	ОписаниеЭлемента = Новый Структура;
	
	ОписаниеЭлемента.Вставить("Артикул", "");
	ОписаниеЭлемента.Вставить("Наименование", "");
	ОписаниеЭлемента.Вставить("ИдентификаторНоменклатуры", "");
	ОписаниеЭлемента.Вставить("Количество", 0);
	ОписаниеЭлемента.Вставить("Цена", 0);
	ОписаниеЭлемента.Вставить("СуммаВсего", 0);
	
	СостояниеОХ = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СостоянияОбъектовХранения.Годен");
	ОписаниеЭлемента.Вставить("Состояние", СостояниеОХ);
	
	ОписаниеЭлемента.Вставить("Поклажедатель", Неопределено);

	Возврат ОписаниеЭлемента;
	
КонецФункции

Функция НовоеОписаниеСтрокиПланаОтгрузки() Экспорт
	
	ИмяРегистра = "СтрокиПлановОтгрузки";
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	МенеджерЗаписи = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();

	Возврат ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(МенеджерЗаписи, МетаданныеРегистра)
	
КонецФункции

Процедура ЗаполнитьВходящееОписаниеПланаОтгрузки(ИсходныеДанные,
												ОписаниеПланаОтгрузки,
												Ошибки = Неопределено,
												ДопСведения = Неопределено) Экспорт
	Если Ошибки = Неопределено Тогда
		Ошибки = Новый Массив;
		
	КонецЕсли;
	
	ОписаниеПланаОтгрузки["ДатаВходящегоДокумента"] =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсходныеДанные, "order_date", Неопределено);

	ОписаниеПланаОтгрузки["НомерВходящегоДокумента"] =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсходныеДанные, "order_number", "");

	ОписаниеПланаОтгрузки["ВходящийИдентификатор"] =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсходныеДанные, "order_id", "");
															
	ТипОтгрузкиСтрокой = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсходныеДанные, "shipment_type", "");
	ОписаниеПланаОтгрузки["ТипОтгрузки"] = ТипОтгрузкиПоСтроковомуПредставлению(ТипОтгрузкиСтрокой);

	ОписаниеПланаОтгрузки["НаименованиеКонтрагента"] =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсходныеДанные, "client_name", "");

	ОписаниеПланаОтгрузки["ИдентификаторКонтрагента"] =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсходныеДанные, "client_id", "");

	ОписаниеПланаОтгрузки["ПлановаяДатаОтгрузки"] =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсходныеДанные, "planned_shipment_date", Неопределено);
				
	// товары
	Для каждого ТекCтрокаПланаПриемки Из ИсходныеДанные["goods"] Цикл
		ЭлементСпискаТоваров = НовоеОписаниеЭлементаСпискаТоваров();
		
		ЭлементСпискаТоваров["Артикул"] =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекCтрокаПланаПриемки, "sku", "");
			
		ЭлементСпискаТоваров["Наименование"] =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекCтрокаПланаПриемки, "name", "");

		ЭлементСпискаТоваров["ИдентификаторНоменклатуры"] =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекCтрокаПланаПриемки, "id", "");

		ЭлементСпискаТоваров["Количество"] =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекCтрокаПланаПриемки, "quantity", 0);
			
		ЭлементСпискаТоваров["Цена"] =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекCтрокаПланаПриемки, "price", 0);

		ЭлементСпискаТоваров["СуммаВсего"] =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекCтрокаПланаПриемки, "amount", 0);
	
		Если ДопСведения <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ЭлементСпискаТоваров, ДопСведения);
		
		КонецЕсли;
			
		ОписаниеПланаОтгрузки["Товары"].Добавить(ЭлементСпискаТоваров);
		
	КонецЦикла;
	
	ОписаниеПланаОтгрузки["АдресДоставкиСтрокой"] =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсходныеДанные, "delivery_address", "");

	ОписаниеПланаОтгрузки["АдресДоставкиКомментарий"] =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсходныеДанные, "delivery_address_comment", "");

	ОписаниеПланаОтгрузки["ПлановаяДатаДоставки"] =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсходныеДанные, "planned_delivery_date", Неопределено);
			
	ОписаниеПланаОтгрузки["ГосНомерТранспортногоСредства"] =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсходныеДанные, "vehicle_number", "");

	ОписаниеПланаОтгрузки["ВодительФИО"] =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсходныеДанные, "driver_name", "");

	ОписаниеПланаОтгрузки["ТелефонВодителя"] =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсходныеДанные, "driver_phone", "");
		
	// Заполнение полей описания, который не могут быть явно получены из исходных данных 
	// Важно! Поле Поклажедатель может устанавливается вне этой процедуры
	//
	Если ДопСведения <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ОписаниеПланаОтгрузки, ДопСведения);
		
	КонецЕсли;
	
КонецПроцедуры

// Функция - Данные плана отгрузки по описанию
//
// Параметры:
//  ОписаниеПланаОтгрузки	 - Структура - см. дсфДокументыАпи.НовоеВходящееОписаниеПланаОтгрузки
//  Ошибки					 - Массив - 
// 
// Возвращаемое значение:
//   - Структура или Неопределено
//
Функция ДанныеПланаОтгрузкиПоВходящемуОписанию(ОписаниеПланаОтгрузки, Ошибки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЕстьОшибкиЗаполнения = Ложь;
	ДанныеПланаПоступления = Новый Структура;
	
	Поклажедатель = ОписаниеПланаОтгрузки["Поклажедатель"];
	Контрагент = дсфНормативноСправочнаяИнформацияАпи.КонтрагентПоНаименованиюИлиИдентификатору(
															ОписаниеПланаОтгрузки["НаименованиеКонтрагента"],
															ОписаниеПланаОтгрузки["ИдентификаторКонтрагента"],
															Поклажедатель);
															
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		
		ТекстОшибки = СтрШаблон("Не удалось определить контрагента по наименованию %1 и идентификатору %2",
								ОписаниеПланаОтгрузки["НаименованиеКонтрагента"],
								ОписаниеПланаОтгрузки["ИдентификаторКонтрагента"]);
								
		Ошибки.Добавить(ТекстОшибки);
		
		Возврат Неопределено;
	
	КонецЕсли;
	
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(Поклажедатель);
	МассивСсылок.Добавить(Контрагент);
	
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить("ЗапасГодностиПриОтгрузке");
	МассивРеквизитов.Добавить("ПроцессОтгрузки");
	
	РеквизитыУчастников = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСсылок, МассивРеквизитов);
	
	Если ЗначениеЗаполнено(РеквизитыУчастников[Контрагент]["ПроцессОтгрузки"]) Тогда
		ПроцессОтгрузки = РеквизитыУчастников[Контрагент]["ПроцессОтгрузки"];
		
	Иначе
		ПроцессОтгрузки = РеквизитыУчастников[Поклажедатель]["ПроцессОтгрузки"];
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыУчастников[Контрагент]["ЗапасГодностиПриОтгрузке"]) Тогда
		ЗапасГодностиПриОтгрузке = РеквизитыУчастников[Контрагент]["ЗапасГодностиПриОтгрузке"];
		
	Иначе
		ЗапасГодностиПриОтгрузке = РеквизитыУчастников[Поклажедатель]["ЗапасГодностиПриОтгрузке"];
	
	КонецЕсли;

	НачатьТранзакцию();
	Попытка
		ДанныеПланаПоступления.Вставить("Контрагент", Контрагент);
		ДанныеПланаПоступления.Вставить("Организация", Поклажедатель);
		ДанныеПланаПоступления.Вставить("ТипОтгрузки", ОписаниеПланаОтгрузки["ТипОтгрузки"]);
		
		ДанныеПланаПоступления.Вставить("Приоритет", Перечисления.Приоритеты.Обычный);
		ДанныеПланаПоступления.Вставить("Процесс", ПроцессОтгрузки);
		ДанныеПланаПоступления.Вставить("ЗапасГодностиПриОтгрузке", ЗапасГодностиПриОтгрузке);
		
		ДанныеПланаПоступления.Вставить("ДатаКИС", ОписаниеПланаОтгрузки["ДатаВходящегоДокумента"]);
		ДанныеПланаПоступления.Вставить("НомерКИС", ОписаниеПланаОтгрузки["НомерВходящегоДокумента"]);
		
		ДанныеПланаПоступления.Вставить("ДатаОтгрузки", ОписаниеПланаОтгрузки["ПлановаяДатаОтгрузки"]);
		ДанныеПланаПоступления.Вставить("ВремяОтгрузки", ОписаниеПланаОтгрузки["ПлановаяДатаОтгрузки"]);
		
		// адрес доставки
		АдресДоставки = дсфНормативноСправочнаяИнформацияАпи.АдресДоставкиПоСтроковомуПредставлению(
															ОписаниеПланаОтгрузки["АдресДоставкиСтрокой"]);
															
		ДанныеПланаПоступления.Вставить("АдресДоставки", АдресДоставки);
		

		// товары
		ТоварыКОтгрузке = Новый Массив;
		Для каждого ОписаниеСтрокиСТоваром Из ОписаниеПланаОтгрузки["Товары"] Цикл
			СтрокаПланаОтгрузки = НовоеОписаниеСтрокиПланаОтгрузки();
			
			Если ЗаполнитьЗначенияСправочниковВСтрокеПланаОтгрузки(СтрокаПланаОтгрузки,
																	ОписаниеСтрокиСТоваром,
																	Поклажедатель,
																	Ошибки) Тогда
																	
				ТоварыКОтгрузке.Добавить(СтрокаПланаОтгрузки);
				
			Иначе
				ЕстьОшибкиЗаполнения = Истина;
				
			КонецЕсли;

		КонецЦикла;
		
		ДанныеПланаПоступления.Вставить("Товары", ТоварыКОтгрузке);
		
		// формирование комментария
		ПараметрыШаблонаСтроки = Новый Массив;
		ПараметрыШаблонаСтроки.Добавить(ОписаниеПланаОтгрузки["ПлановаяДатаДоставки"]);
		ПараметрыШаблонаСтроки.Добавить(ОписаниеПланаОтгрузки["АдресДоставкиКомментарий"]);
		ПараметрыШаблонаСтроки.Добавить(ОписаниеПланаОтгрузки["ГосНомерТранспортногоСредства"]);
		ПараметрыШаблонаСтроки.Добавить(ОписаниеПланаОтгрузки["ВодительФИО"]);
		ПараметрыШаблонаСтроки.Добавить(ОписаниеПланаОтгрузки["ТелефонВодителя"]);
		
		ШаблонСтроки = "Доставка %1, %2. Т/С: гос. номер - %3, водитель - %4, тел. водителя: %5";
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтрокуИзМассива(ШаблонСтроки, ПараметрыШаблонаСтроки);
		ДанныеПланаПоступления.Вставить("Комментарий", Комментарий);

		ЗафиксироватьТранзакцию();

	Исключение
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(аргмВходящиеЗапросыА1.ИмяСобытияЖурналаРегистрации() + ".ShipmentPlan",
								УровеньЖурналаРегистрации.Ошибка,
								Метаданные.Документы.ПланОтгрузки,,
								ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
								
		Ошибки.Добавить(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке)); 
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Если ЕстьОшибкиЗаполнения Тогда
		Возврат Неопределено;
		
	Иначе
		Возврат ДанныеПланаПоступления;
		
	КонецЕсли;
	
КонецФункции

Функция СведенияОПланеОтгрузки(ПланОтгрузкиСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПланОтгрузкиСсылка, "Контрагент");
	СведенияОПланеОтгрузки = Новый Структура;
	СведенияОПланеОтгрузки.Вставить("id", XMLСтрока(ПланОтгрузкиСсылка));
	СведенияОПланеОтгрузки.Вставить("client_id", РеквизитыДокумента.Контрагент);

	Возврат СведенияОПланеОтгрузки;
	
КонецФункции

// Функция - Новый план отгрузки по описанию
//
// Параметры:
//  ОписаниеПланаОтгрузки	 - Структура - см. дсфДокументыАпи.НовоеВходящееОписаниеПланаОтгрузки
//  Ошибки					 - Массив - 
// 
// Возвращаемое значение:
//   - 
//
Функция НовыйПланОтгрузкиПоОписанию(ОписаниеПланаОтгрузки, Ошибки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВходящийИдентификатор = ОписаниеПланаОтгрузки["ВходящийИдентификатор"];
	
	Если ЗначениеЗаполнено(ВходящийИдентификатор) Тогда
		Если Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ВходящийИдентификатор) Тогда
	
			ТекстОшибки = СтрШаблон("Идентификатор документа %1 не соответствует требуемому формату (uuid)",
									ВходящийИдентификатор);
												
			Ошибки.Вставить(ТекстОшибки);
			
			Возврат Неопределено;
			
		КонецЕсли;
		
		ПланОтгрузки = дсфСлужебныйАпи.ПроверитьНаличиеОбъектаСУказаннымИдентификатором(ВходящийИдентификатор,
																						"Документ.ПланОтгрузки");
		Если ЗначениеЗаполнено(ПланОтгрузки) Тогда
			
			ПоклажедательВДокументе = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПланОтгрузки, "Организация");
			
			Если ПоклажедательВДокументе = ОписаниеПланаОтгрузки["Поклажедатель"] Тогда
				ТекстОшибки = СтрШаблон("Документ планирования отгрузки с ID %1 уже зарегистрирован. Для модификации воспользуйтесь методом PUT",
										ВходящийИдентификатор);
										
				Ошибки.Добавить(ТекстОшибки);
				
				Возврат ПланОтгрузки;

			Иначе
				ТекстОшибки = СтрШаблон("Идентификатор %1 относиться к документу другого поклажедателя. Используйте другое значение.",
										ВходящийИдентификатор);
										
				Ошибки.Добавить(ТекстОшибки);

				Возврат Неопределено;

			КонецЕсли;

		КонецЕсли;
		
		// ид создаваемого документа используем внешний
		ИдентификаторДокумента = Новый УникальныйИдентификатор(ВходящийИдентификатор);

	Иначе
		// ид создаваемого докумета генерируем самостоятельно
		ИдентификаторДокумента = Новый УникальныйИдентификатор

	КонецЕсли;
	
	ДанныеПланаОтгрузки = ДанныеПланаОтгрузкиПоВходящемуОписанию(ОписаниеПланаОтгрузки, Ошибки);
	
	Если ДанныеПланаОтгрузки = Неопределено Тогда
		// не удалось подготовить корректные данные для заполнения нового документа
		Возврат Неопределено;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
	
		СсылкаНаНовый = Документы.ПланОтгрузки.ПолучитьСсылку(ИдентификаторДокумента);

		НовыйПланОтгрузки = Документы.ПланОтгрузки.СоздатьДокумент();
		НовыйПланОтгрузки.УстановитьСсылкуНового(СсылкаНаНовый);
		
		НовыйПланОтгрузки.Заполнить(Неопределено);
		
		ЗаполнитьЗначенияСвойств(НовыйПланОтгрузки, ДанныеПланаОтгрузки);
		НовыйПланОтгрузки.Дата = ТекущаяДатаСеанса();
					
		НовыйПланОтгрузки.Записать(РежимЗаписиДокумента.Проведение);
		
		ПланОтгрузки = НовыйПланОтгрузки.Ссылка;
		
		// Строки планов отгрузки
		Если Не ЗаписатьСтрокиПлановОтгрузки(ПланОтгрузки, ДанныеПланаОтгрузки["Товары"]) Тогда
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = "Не удалось выполнить запись / обновление строк плана поступления";
			ЗаписьЖурналаРегистрации(аргмВходящиеЗапросыА1.ИмяСобытияЖурналаРегистрации() + ".ShipmentPlan",
								УровеньЖурналаРегистрации.Ошибка,
								Метаданные.Документы.ПланОтгрузки,,
								ТекстОшибки);
								
			Ошибки.Добавить(ТекстОшибки);
		
			Возврат Неопределено;
		
		КонецЕсли;
	
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(аргмВходящиеЗапросыА1.ИмяСобытияЖурналаРегистрации() + ".ShipmentPlan",
								УровеньЖурналаРегистрации.Ошибка,
								Метаданные.Документы.ПланОтгрузки,,
								ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
								
		Ошибки.Добавить(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке)); 
		
		ВызватьИсключение;
		
	КонецПопытки;

	Возврат ПланОтгрузки;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
Функция ТипОтгрузкиПоСтроковомуПредставлению(Знач ПредставлениеТипаОтгрузки) Экспорт
	
	ПредставлениеТипаОтгрузки = НРег(ПредставлениеТипаОтгрузки);
	Если ПредставлениеТипаОтгрузки = "return_to_supplier" Тогда
		ТипОтгрузки = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ТипыОтгрузки.ВозвратПоставщику");
		
	ИначеЕсли ПредставлениеТипаОтгрузки = "customer_pickup" Тогда
		ТипОтгрузки = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ТипыОтгрузки.ОтгрузкаКлиентуСамовывоз");
		
	Иначе // "shipping_to_customer" - по умолчанию
		ТипОтгрузки = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ТипыОтгрузки.ОтгрузкаКлиенту");

	КонецЕсли;
	
	Возврат ТипОтгрузки;
	
КонецФункции

// Функция - ЗаполнитьЗначенияСправочниковВСтрокеПланаОтгрузки
//
// Параметры:
//  СтрокаПланаОтгрузки  - Структура - см. дсфДокументыАпи.НовоеОписаниеСтрокиПланаОтгрузки
//  ОписаниеТовара		 - Структура - см. дсфДокументыАпи.НовоеОписаниеЭлементаСпискаТоваров
//  ВладелецТовара		 - Справочник - Контрагент - поклажедатель
//  Ошибки				 - Массив
// 
// Возвращаемое значение:
//   - Булево
//
Функция ЗаполнитьЗначенияСправочниковВСтрокеПланаОтгрузки(СтрокаПланаОтгрузки,
															ОписаниеСтрокиСТоваром,
															ВладелецТовара = Неопределено,
															Ошибки) Экспорт
															
	Поклажедатель = ОписаниеСтрокиСТоваром["Поклажедатель"];
	Если Не ЗначениеЗаполнено(Поклажедатель) Тогда
		Поклажедатель = ВладелецТовара;
		
	КонецЕсли;
	
	// номенклатура
	Артикул = ОписаниеСтрокиСТоваром["Артикул"];
	Номенклатура = дсфНормативноСправочнаяИнформацияАпи.НоменклатураПоклажедателяПоАртикулу(Артикул, Поклажедатель);
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		ОшибкаПоискаПоАртикулу = СтрШаблон("Номенклатура с артикулом %1 и наименованием %2 не найдена",
											Артикул,
											ОписаниеСтрокиСТоваром["Наименование"]);
		
		Ошибки.Добавить(ОшибкаПоискаПоАртикулу);
		
		// поиск по идентификатору
		ИдентификаторНоменклатуры = ОписаниеСтрокиСТоваром["ИдентификаторНоменклатуры"];
		Номенклатура = дсфСлужебныйАпи.ПроверитьНаличиеОбъектаСУказаннымИдентификатором(ИдентификаторНоменклатуры,
																						"Справочник.Номенклатура",
																						Ошибки);
																						
		Если Не ЗначениеЗаполнено(Номенклатура) Тогда
			ОшибкаПоискаПоИдентификатору = СтрШаблон("Номенклатура с id %1 и наименованием %2 не найдена",
											ИдентификаторНоменклатуры,
											ОписаниеСтрокиСТоваром["Наименование"]);
		
			Ошибки.Добавить(ОшибкаПоискаПоИдентификатору);
			
			// номенклатура не найдена ни по артикулу, ни по идентификатору
			Возврат Ложь;
			
		Иначе
			// проверка на соответствие поклажедателя найденной номенклатуры требуемому
			ПоклажедательНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "Организация");
			
			Если ПоклажедательНоменклатуры <> Поклажедатель Тогда
				ОшибкаНесоответствияПоклажедателя = СтрШаблон("Номенклатура с id %1 и наименованием %2 относится к другому поклажедателю",
											ИдентификаторНоменклатуры,
											ОписаниеСтрокиСТоваром["Наименование"]);
		
				Ошибки.Добавить(ОшибкаНесоответствияПоклажедателя);
			
				Возврат Ложь
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;

	СтрокаПланаОтгрузки["Номенклатура"] = Номенклатура;
	
	СведенияОбОбъектахХраненияНоменклатуры = КонвертацияДокументов.ПолучитьОбъектыХраненияНоменклатуры(Номенклатура);
	ОбъектыХранения = СведенияОбОбъектахХраненияНоменклатуры.ВыгрузитьКолонку("ОбъектХранения");
	
	Если ОбъектыХранения.Количество() > 0 Тогда
		СтрокаПланаОтгрузки["ОбъектХранения"] = ОбъектыХранения[0];

	КонецЕсли;
	
	// количество во входящем запросе указано в основной (базовой) единице, чаще всего это штуки
	// упаковки
	УпаковкаНоменклатуры = дсфНормативноСправочнаяИнформацияАпи.УпаковкаБазовойЕдиницыИзмеренияНоменклатуры(Номенклатура);
	СтрокаПланаОтгрузки["УпаковкаНоменклатуры"] = УпаковкаНоменклатуры;
	
	Упаковка = Справочники.УпаковкиНоменклатуры.НайтиУпаковку(СтрокаПланаОтгрузки["ОбъектХранения"],
																УпаковкаНоменклатуры);
																
	СтрокаПланаОтгрузки["Упаковка"] = Упаковка;
	
	// количество
	СтрокаПланаОтгрузки["Количество"] = ОписаниеСтрокиСТоваром["Количество"];
	СтрокаПланаОтгрузки["КоличествоУпаковок"] = ОписаниеСтрокиСТоваром["Количество"];
	
	СтрокаПланаОтгрузки["Цена"] = ОписаниеСтрокиСТоваром["Цена"];
	СтрокаПланаОтгрузки["СуммаВсего"] = ОписаниеСтрокиСТоваром["СуммаВсего"];

	//
	СтрокаПланаОтгрузки.Вставить("Состояние", ОписаниеСтрокиСТоваром["Состояние"]);
	
	СтрокаПланаОтгрузки["Партия"] = Неопределено;
	СтрокаПланаОтгрузки["ПартияНоменклатуры"] = Неопределено;

	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗаписатьСтрокиПлановОтгрузки(ПланОтгрузки, ТоварныйСостав, ПричинаКорректировки = Неопределено) Экспорт
	
	НаборЗаписей = РегистрыСведений.СтрокиПлановОтгрузки.СоздатьНаборЗаписей(); 
	Если ЗначениеЗаполнено(ПричинаКорректировки) Тогда 
		НаборЗаписей.ДополнительныеСвойства.Вставить("ПричинаКорректировки", ПричинаКорректировки);
		
	КонецЕсли;
	
	НаборЗаписей.Отбор.План.Установить(ПланОтгрузки);
		
	ТаблицаТекущиеЗаписи = КонвертацияДокументов.ТекущиеЗаписиСтрокОтгрузки(НаборЗаписей);
	
	// обнуление количества в имеющихся строках
	НомерСтрокиДляЗаписи = 0;
	Для каждого ТекСтрока Из ТаблицаТекущиеЗаписи Цикл
		НомерСтрокиДляЗаписи = Макс(НомерСтрокиДляЗаписи, ТекСтрока.НомерСтрокиПлана);
		ТекСтрока.Количество = 0;
		ТекСтрока.КоличествоУпаковок = 0;
		
	КонецЦикла;
	
	// актуализация строк в таблице для записи набора, при необходимости добавляем новую строку
	СтруктураПоиска = Новый Структура("План, Номенклатура, ПартияНоменклатуры, Состояние");
	СтруктураПоиска["План"] = ПланОтгрузки;
		
	Ошибки = Новый Массив;
	Для каждого СтрокаТоварногоСостава Из ТоварныйСостав Цикл
		
		Количество = СтрокаТоварногоСостава["Количество"];
		КоличествоУпаковок = СтрокаТоварногоСостава["КоличествоУпаковок"];
		
		СтруктураПоиска["Номенклатура"] = СтрокаТоварногоСостава["Номенклатура"];
		СтруктураПоиска["ПартияНоменклатуры"] = СтрокаТоварногоСостава["ПартияНоменклатуры"];
		СтруктураПоиска["Состояние"] = СтрокаТоварногоСостава["Состояние"];

		СтрокиТаблицы = ТаблицаТекущиеЗаписи.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТаблицы.Количество() > 0 Тогда
			// обновляем только первую строку
			ТекСтрока = СтрокиТаблицы[0];
			ТекСтрока["Количество"] = Количество;
			ТекСтрока["КоличествоУпаковок"] = КоличествоУпаковок;
			
			// актуализируем значение цены и суммы
			ТекСтрока["Цена"] = СтрокаТоварногоСостава["Цена"];
			ТекСтрока["СуммаВсего"] = СтрокаТоварногоСостава["СуммаВсего"];

		Иначе
			// добавляем
			НомерСтрокиДляЗаписи = НомерСтрокиДляЗаписи + 1;
			
			НоваяСтрокаТаблицы = ТаблицаТекущиеЗаписи.Добавить();
			
			// TODO
			// партию в дальнейшем прописывать отдельно, т.к. возможно что они тоже будут в массиве
			// 
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, СтрокаТоварногоСостава);
			
			НоваяСтрокаТаблицы.Состояние = СтрокаТоварногоСостава["Состояние"];
			НоваяСтрокаТаблицы.Количество = Количество;
			НоваяСтрокаТаблицы.КоличествоУпаковок = КоличествоУпаковок;

			НоваяСтрокаТаблицы.План = ПланОтгрузки;
			НоваяСтрокаТаблицы.НомерСтрокиПлана = НомерСтрокиДляЗаписи;
			
		КонецЕсли;

	КонецЦикла;
	
	НаборЗаписей.Загрузить(ТаблицаТекущиеЗаписи);
	
	Попытка
		КонвертацияДокументов.ЗаписатьСтрокиОтгрузки(НаборЗаписей, ПланОтгрузки);
		Успех = Истина;
		
	Исключение
		СлужебныйМодуль.ОбработатьИсключение(ИнформацияОбОшибке(), НСтр("en = 'Save lines'; ru = 'Запись строк'; bg = 'Запись строк'"),, ПланОтгрузки);
		Успех = Ложь;
		
	КонецПопытки;

	Возврат Успех;
	
КонецФункции

&НаСервере
Функция ЗаписатьСтрокиПлановОтгрузкиГрузовыхМест(ПланОтгрузки,
												ГрузовыеМеста,
												ПричинаКорректировки = Неопределено) Экспорт
	
	НаборЗаписей = РегистрыСведений.СтрокиПлановОтгрузкиГрузовыхМест.СоздатьНаборЗаписей(); 
	Если ЗначениеЗаполнено(ПричинаКорректировки) Тогда 
		НаборЗаписей.ДополнительныеСвойства.Вставить("ПричинаКорректировки", ПричинаКорректировки);
		
	КонецЕсли;
	
	НаборЗаписей.Отбор.План.Установить(ПланОтгрузки);
		
	ТаблицаТекущиеЗаписи = КонвертацияДокументов.ТекущиеЗаписиСтрокОтгрузкиГрузовыхМест(НаборЗаписей);
	
	// обнуление количества в имеющихся строках
	НомерСтрокиДляЗаписи = 0;
	Для каждого ТекСтрока Из ТаблицаТекущиеЗаписи Цикл
		НомерСтрокиДляЗаписи = Макс(НомерСтрокиДляЗаписи, ТекСтрока.НомерСтрокиПлана);
		ТекСтрока.Количество = 0;
	
	КонецЦикла;
	
	ТаблицаГрузовыхМест = дсфОбщегоНазначенияЯндексМаркет.ПреобразоватьМассивВТаблицуЗначений(ГрузовыеМеста);
	ТаблицаГрузовыхМест.Свернуть("План, ТипМХ, МестоХранения", "Количество");
	
	// актуализация строк в таблице для записи набора, при необходимости добавляем новую строку
	СтруктураПоиска = Новый Структура("План, ТипМХ, МестоХранения");
	
	Для каждого СтрокаГрузовогоМеста Из ТаблицаГрузовыхМест Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаГрузовогоМеста);
		СтруктураПоиска.План = ПланОтгрузки;
		
		СтрокиТаблицы = ТаблицаТекущиеЗаписи.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТаблицы.Количество() > 0 Тогда
			// обновляем только первую строку
			СтрокиТаблицы[0]["Количество"] = СтрокаГрузовогоМеста["Количество"]
			
		Иначе
			// добавляем
			НомерСтрокиДляЗаписи = НомерСтрокиДляЗаписи + 1;
			
			НоваяСтрокаТаблицы = ТаблицаТекущиеЗаписи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, СтрокаГрузовогоМеста);
			
			НоваяСтрокаТаблицы.План = ПланОтгрузки;
			НоваяСтрокаТаблицы.НомерСтрокиПлана = НомерСтрокиДляЗаписи;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЗаписей.Загрузить(ТаблицаТекущиеЗаписи);
	
	Попытка
		КонвертацияДокументов.ЗаписатьСтрокиОтгрузкиГрузовыхМест(НаборЗаписей, ПланОтгрузки);
		Успех = Истина;
		
	Исключение
		СлужебныйМодуль.ОбработатьИсключение(ИнформацияОбОшибке(), НСтр("en = 'Save lines'; ru = 'Запись строк'; bg = 'Запись строк'"),, ПланОтгрузки);
		Успех = Ложь;
		
	КонецПопытки; 

	Возврат Успех;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Код процедур и функций
#КонецОбласти