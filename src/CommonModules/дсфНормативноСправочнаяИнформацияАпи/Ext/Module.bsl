#Область ПрограммныйИнтерфейс

#Область Номенклатура

Функция НовоеВходящееОписаниеНоменклатуры() Экспорт
	ОписаниеНоменклатуры = Новый Структура;
	
	ОписаниеНоменклатуры.Вставить("Артикул", "");
	ОписаниеНоменклатуры.Вставить("Наименование", "");
	ОписаниеНоменклатуры.Вставить("НаименованиеПолное", "");
	ОписаниеНоменклатуры.Вставить("Поклажедатель", Неопределено);
	ОписаниеНоменклатуры.Вставить("ГруппаНоменклатуры", Справочники.Номенклатура.ПустаяСсылка());
	ОписаниеНоменклатуры.Вставить("ПрефиксКода", "");
	ОписаниеНоменклатуры.Вставить("ЕдиницаИзмерения", дсфОбщегоНазначенияАпиПовтИсп.ЕдиницаИзмеренияШтук());
	ОписаниеНоменклатуры.Вставить("ВесБазовойЕдиницы", 0);
	ОписаниеНоменклатуры.Вставить("ВГХ", НовоеОписаниеВГХОбъекта()); // см. НовоеОписаниеВГХОбъекта()
	ОписаниеНоменклатуры.Вставить("КоличествоЕдиницТовараВУпаковке", 1);

	ОписаниеНоменклатуры.Вставить("Штрихкоды", Новый Массив); // массив структур, см. дсфНоменклатураАпи.НовоеОписаниеШтрихкода
	
	ОписаниеНоменклатуры.Вставить("СрокХраненияДней", 0);
	ОписаниеНоменклатуры.Вставить("ТорговаяМарка", "");
	
	ОписаниеНоменклатуры.Вставить("Цена", 0);
	
	Возврат ОписаниеНоменклатуры;
	
КонецФункции

Функция НовоеОписаниеВГХОбъекта() Экспорт
	ВГХОбъекта = Новый Структура;
	
	ВГХОбъекта.Вставить("ШиринаСм", 0);
	ВГХОбъекта.Вставить("ВысотаСм", 0);
	ВГХОбъекта.Вставить("ДлинаСм", 0);
	ВГХОбъекта.Вставить("ВесБруттоКг", 0);
	ВГХОбъекта.Вставить("ВесНеттоКг", 0);
	ВГХОбъекта.Вставить("ВесУпаковкиКг", 0);
	
	Возврат ВГХОбъекта;

КонецФункции

Функция НовоеОписаниеШтрихкода() Экспорт
	ОписаниеШтрихкода = Новый Структура;
	
	ОписаниеШтрихкода.Вставить("Штрихкод", "");
	ОписаниеШтрихкода.Вставить("Тип", "");
	ОписаниеШтрихкода.Вставить("Источник", "");
	
	Возврат ОписаниеШтрихкода;

КонецФункции

Процедура ЗаполнитьВходящееОписаниеНоменклатуры(ИсходныеДанные,
												ОписаниеНоменклатуры,
												Ошибки = Неопределено,
												ДопСведения = Неопределено) Экспорт
	Если Ошибки = Неопределено Тогда
		Ошибки = Новый Массив;
		
	КонецЕсли;
	
	ОписаниеНоменклатуры["Артикул"] = ИсходныеДанные["sku"];
	ОписаниеНоменклатуры["Наименование"] = ИсходныеДанные["name"];
	ОписаниеНоменклатуры["НаименованиеПолное"] = ИсходныеДанные["full_name"];
	
	ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(ИсходныеДанные["unit"]);
	Если ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка() Тогда
		ТекстОшибки = СтрШаблон("Ошибка определения единицы измерения для sku: %1. Ед.изм. %2",
								ИсходныеДанные["sku"],
								ИсходныеДанные["unit"]);
								
	Иначе	
		ОписаниеНоменклатуры["ЕдиницаИзмерения"] = ЕдиницаИзмерения;
		
	КонецЕсли;
	
	ОписаниеНоменклатуры["ВесБазовойЕдиницы"] = 
										ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсходныеДанные, "weight", 0);
										
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсходныеДанные, "dimensions") Тогда
		ГабаритыБазовойЕдиницы = ИсходныеДанные["dimensions"];
		ВысотаСм = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ГабаритыБазовойЕдиницы, "height", 0);
		ДлинаСм = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ГабаритыБазовойЕдиницы, "length", 0);
		ШиринаСм = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ГабаритыБазовойЕдиницы, "width", 0);
		
		ОписаниеНоменклатуры["ВГХ"]["ВысотаСм"] = ВысотаСм;
		ОписаниеНоменклатуры["ВГХ"]["ДлинаСм"] = ДлинаСм;
		ОписаниеНоменклатуры["ВГХ"]["ШиринаСм"] = ШиринаСм;
		
		ОписаниеНоменклатуры["ВГХ"]["ВесНеттоКг"] = ОписаниеНоменклатуры["ВесБазовойЕдиницы"];
		ОписаниеНоменклатуры["ВГХ"]["ВесБруттоКг"] = ОписаниеНоменклатуры["ВесБазовойЕдиницы"];
		
	КонецЕсли;
	
	ОписаниеНоменклатуры["КоличествоЕдиницТовараВУпаковке"] = 
					ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсходныеДанные, "package_quantity", 1);

	Штрихкоды = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсходныеДанные, "barcodes", Неопределено);
	
	Если ЗначениеЗаполнено(Штрихкоды) И ТипЗнч(Штрихкоды) = Тип("Массив") Тогда
		Для каждого ТекШтрихкод Из Штрихкоды Цикл
			
			ОписаниеШтрихкода = дсфНормативноСправочнаяИнформацияАпи.НовоеОписаниеШтрихкода();
			ОписаниеШтрихкода.Штрихкод = ТекШтрихкод;
			ОписаниеНоменклатуры["Штрихкоды"].Добавить(ОписаниеШтрихкода);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОписаниеНоменклатуры["СрокХраненияДней"] =
								ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсходныеДанные, "shelf_life_days", 0);
								
	ОписаниеНоменклатуры["ТорговаяМарка"] =
								ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсходныеДанные, "brand", "");
								
	ОписаниеНоменклатуры["Цена"] = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсходныеДанные, "price", "");
	
	// Заполнение полей описания, который не могут быть явно получены из исходных данных 
	// Важно! Поля ПрефиксКода, Поклажедатель, ГруппаНоменклатуры могут быть устанавливлены вне этой процедуры
	//
	Если ДопСведения <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ОписаниеНоменклатуры, ДопСведения);
		
	КонецЕсли;

КонецПроцедуры

Функция НоваяНоменклатураПоОписанию(ОписаниеТовара, Ошибки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	АртикулНоменклатуры = ОписаниеТовара.Артикул;
	Если ПустаяСтрока(АртикулНоменклатуры) Тогда
		Ошибки.Добавить(СтрШаблон("Для товара %1 не указано значение sku", ОписаниеТовара.Наименование));
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	НаименованиеНоменклатуры = ОписаниеТовара.Наименование;
	Если ПустаяСтрока(НаименованиеНоменклатуры) Тогда
		Ошибки.Добавить(СтрШаблон("Для товара с sku 1% не указано наименование", ОписаниеТовара.Артикул));
		
		Возврат Неопределено;
		
	КонецЕсли;

	КоэффициентПересчетаОбъема = Константы.КоэффициентПересчетаЛинейныхГабаритовВОбъем.Получить();

	НачатьТранзакцию();
	Попытка
		ИдентификаторНоменклатуры = Новый УникальныйИдентификатор;
				
		СсылкаНаНовый = Справочники.Номенклатура.ПолучитьСсылку(ИдентификаторНоменклатуры);

		НоваяНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
		НоваяНоменклатура.УстановитьСсылкуНового(СсылкаНаНовый);
			
		НоваяНоменклатура.Заполнить(Неопределено);
		
		НоваяНоменклатура.Родитель = ОписаниеТовара.ГруппаНоменклатуры;
		НоваяНоменклатура.Организация = ОписаниеТовара.Поклажедатель;
		
		НоваяНоменклатура.Артикул = АртикулНоменклатуры;
		НоваяНоменклатура.Наименование = НаименованиеНоменклатуры;

		Если ПустаяСтрока(ОписаниеТовара.НаименованиеПолное) Тогда
			НоваяНоменклатура.НаименованиеПолное = НаименованиеНоменклатуры;
			
		Иначе
			НоваяНоменклатура.НаименованиеПолное = ОписаниеТовара.НаименованиеПолное;
			
		КонецЕсли;
	
		НоваяНоменклатура.ЕдиницаИзмерения = ОписаниеТовара.ЕдиницаИзмерения;
		
		//
		// TODO: Добавить логику определения вида номенклатуры для товара
		//
		НоваяНоменклатура.ВидНоменклатуры = Справочники.ВидыОбъектовХранения.ПустаяСсылка();
		
		// базовые ВГХ номенклатуры
		НоваяНоменклатура.Масса = ОписаниеТовара["ВесБазовойЕдиницы"];
		НоваяНоменклатура.МассаНетто = ОписаниеТовара["ВесБазовойЕдиницы"];
		
		НоваяНоменклатура.ОбъемНетто = ОбъемПоРазмерам(ОписаниеТовара.ВГХ["ШиринаСм"],
														ОписаниеТовара.ВГХ["ДлинаСм"],
														ОписаниеТовара.ВГХ["ВысотаСм"],
														КоэффициентПересчетаОбъема);
														
		Если ОписаниеТовара.СрокХраненияДней > 0 Тогда
			НоваяНоменклатура.СрокХранения = ОписаниеТовара.СрокХраненияДней;
			НоваяНоменклатура.ЕдиницаИзмеренияСрокаХранения = Перечисления.ЕдиницыИзмеренияВремени.Сутки;
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(ОписаниеТовара.ТорговаяМарка) Тогда
			ТорговаяМарка = Справочники.ТорговыеМарки.НайтиПоНаименованию(ОписаниеТовара.ТорговаяМарка);
			
			Если ТорговаяМарка = Справочники.ТорговыеМарки.ПустаяСсылка() Тогда
				НоваяТорговаяМарка = Справочники.ТорговыеМарки.СоздатьЭлемент();
				НоваяТорговаяМарка.Заполнить(Неопределено);
				НоваяТорговаяМарка.Наименование = ОписаниеТовара.ТорговаяМарка;
				НоваяТорговаяМарка.Записать();
				
				ТорговаяМарка = НоваяТорговаяМарка.Ссылка;
			
			КонецЕсли;
			
			НоваяНоменклатура.ТорговаяМарка = ТорговаяМарка;
			
		КонецЕсли;
		
		НоваяНоменклатура.Цена = ОписаниеТовара.Цена;
		
		НоваяНоменклатура.Комментарий = СтрШаблон("Зарегистрирована %1", Формат(ТекущаяДатаСеанса(), "ДФ='dd.MM.yyyy HH:mm:ss'"));
		
		//
		// В текущей реализации индивидуальные префиксы для номенклатуры поклажедателя не устанавиваются
		//
		УстанавливатьПрефиксКода = Ложь;
		Если УстанавливатьПрефиксКода Тогда
			НоваяНоменклатура.УстановитьНовыйКод(ОписаниеТовара.ПрефиксКода);	
		
		КонецЕсли;
		
		НоваяНоменклатура.Записать();
		
		Номенклатура = НоваяНоменклатура.Ссылка;
				
		// создание упаковки номенклатуры для базовой единицы
		УпаковкаДляШтук = Справочники.УпаковкиНоменклатуры.СоздатьЭлемент();
		УпаковкаДляШтук.Владелец = Номенклатура;
		
		//
		// TODO: Добавить логику определения вида учета для упаковки, пока для всех штучный товар
		//
		УпаковкаДляШтук.ВидУчета = Перечисления.ВидыУчетаУпаковок.УпаковкаШтучногоТовара;
		
		УпаковкаДляШтук.ЕдиницаИзмерения = ОписаниеТовара.ЕдиницаИзмерения;
		УпаковкаДляШтук.Коэффициент = 1;

		УпаковкаДляШтук.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УпаковкаДляШтук.ЕдиницаИзмерения, "Наименование");
		УпаковкаДляШтук.НаименованиеПолное = УпаковкаДляШтук.Наименование;
		УпаковкаДляШтук.Масса = ОписаниеТовара.ВГХ["ВесБруттоКг"];
		УпаковкаДляШтук.МассаНетто = ОписаниеТовара.ВГХ["ВесНеттоКг"];
		УпаковкаДляШтук.Высота = ОписаниеТовара.ВГХ["ВысотаСм"];
		УпаковкаДляШтук.Глубина = ОписаниеТовара.ВГХ["ДлинаСм"];
		УпаковкаДляШтук.Ширина = ОписаниеТовара.ВГХ["ШиринаСм"];
		УпаковкаДляШтук.Объем = ОбъемПоРазмерам(УпаковкаДляШтук.Ширина,
												УпаковкаДляШтук.Глубина,
												УпаковкаДляШтук.Высота,
												КоэффициентПересчетаОбъема);

		УпаковкаДляШтук.Записать();

		// создание упаковки для короба
		Если ОписаниеТовара.КоличествоЕдиницТовараВУпаковке > 1 Тогда
			УпаковкаДляКороба = Справочники.УпаковкиНоменклатуры.СоздатьЭлемент();
			УпаковкаДляКороба.Владелец = Номенклатура;
			
			УпаковкаДляКороба.Родитель = УпаковкаДляШтук.Ссылка;
		
			//
			// TODO: Добавить логику определения вида учета для упаковки, пока для всех штучный товар
			//
			УпаковкаДляКороба.ВидУчета = Перечисления.ВидыУчетаУпаковок.УпаковкаШтучногоТовара;
		
			УпаковкаДляКороба.ЕдиницаИзмерения = дсфОбщегоНазначенияАпиПовтИсп.ЕдиницаИзмеренияКоробов();
			УпаковкаДляКороба.Коэффициент = ОписаниеТовара.КоличествоЕдиницТовараВУпаковке;
			
			НаименованиеУпаковки = СтрШаблон("%1 (%2 %3)",
									ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УпаковкаДляКороба.ЕдиницаИзмерения, "Наименование"),
									Формат(УпаковкаДляКороба.Коэффициент, "ЧГ=0"),
									ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОписаниеТовара.ЕдиницаИзмерения, "Наименование"));

			УпаковкаДляКороба.Наименование = НаименованиеУпаковки;
			УпаковкаДляКороба.НаименованиеПолное = НаименованиеУпаковки;
			
			УпаковкаДляКороба.Записать();
	
		КонецЕсли;
		
		// партия номенклатуры
			
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(аргмВходящиеЗапросыА1.ИмяСобытияЖурналаРегистрации() + ".Goods",
								УровеньЖурналаРегистрации.Ошибка,
								Метаданные.HTTPСервисы.дсфFulfillmentPublicApi,,
								ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
								
		Ошибки.Добавить(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат НоваяНоменклатура.Ссылка;

КонецФункции

Функция СведенияОПозицииНоменклатуры(НоменклатураСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоменклатураСсылка, "Артикул,Наименование");
	СведенияОНоменклатуре = Новый Структура;
	СведенияОНоменклатуре.Вставить("id", XMLСтрока(НоменклатураСсылка));
	СведенияОНоменклатуре.Вставить("sku", РеквизитыНоменклатуры.Артикул);
	СведенияОНоменклатуре.Вставить("name", РеквизитыНоменклатуры.Наименование);

	Возврат СведенияОНоменклатуре;
	
КонецФункции

Функция НоменклатураПоклажедателяПоАртикулу(Артикул, Поклажедатель) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Организация = &Поклажедатель
	|	И Номенклатура.Артикул = &Артикул";
	
	Запрос.УстановитьПараметр("Артикул", Артикул);
	Запрос.УстановитьПараметр("Поклажедатель", Поклажедатель);

	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Справочники.Номенклатура.ПустаяСсылка();

	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
		
	КонецЦикла;

КонецФункции

Функция УпаковкаБазовойЕдиницыИзмеренияНоменклатуры(Номенклатура) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	Номенклатура.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТ_ДанныеНоменклатуры
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.Ссылка = &Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	УпаковкиНоменклатуры.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеНоменклатуры КАК ВТ_ДанныеНоменклатуры
	               |		ПО УпаковкиНоменклатуры.Владелец = ВТ_ДанныеНоменклатуры.Ссылка
	               |			И УпаковкиНоменклатуры.ЕдиницаИзмерения = ВТ_ДанныеНоменклатуры.ЕдиницаИзмерения";

	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
		
	КонецЦикла;
		
	Возврат Справочники.УпаковкиНоменклатуры.ПустаяСсылка();

КонецФункции

#КонецОбласти

#Область Контрагенты

Функция НовоеВходящееОписаниеКонтрагента() Экспорт
	ОписаниеКонтрагента = Новый Структура;
	
	ОписаниеКонтрагента.Вставить("Поклажедатель", Неопределено);
	ОписаниеКонтрагента.Вставить("Наименование", "");
	ОписаниеКонтрагента.Вставить("НаименованиеПолное", "");
	ОписаниеКонтрагента.Вставить("Бин", "");
	ОписаниеКонтрагента.Вставить("ЭтоПокупатель", Ложь);
	ОписаниеКонтрагента.Вставить("ЭтоПоставщик", Ложь);
	ОписаниеКонтрагента.Вставить("ВидКонтрагента", "");
	ОписаниеКонтрагента.Вставить("ЮридическийАдрес", "");
	ОписаниеКонтрагента.Вставить("ЗапасГодностиПриПриемке", НовоеВходящееОписаниеОстаточногоСрокаГодности());
	ОписаниеКонтрагента.Вставить("ЗапасГодностиПриОтгрузке", НовоеВходящееОписаниеОстаточногоСрокаГодности());
	
	Возврат ОписаниеКонтрагента;
	
КонецФункции

Процедура ЗаполнитьВходящееОписаниеКонтрагента(ИсходныеДанные,
												ОписаниеКонтрагента,
												Ошибки = Неопределено,
												ДопСведения = Неопределено) Экспорт
	Если Ошибки = Неопределено Тогда
		Ошибки = Новый Массив;
		
	КонецЕсли;
		
	ОписаниеКонтрагента["ВидКонтрагента"] = ИсходныеДанные["type"];
	
	ОписаниеКонтрагента["Наименование"] = ИсходныеДанные["name"];
	ОписаниеКонтрагента["НаименованиеПолное"] = 
				ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсходныеДанные, "full_name", ИсходныеДанные["name"]);
				
	ОписаниеКонтрагента["Бин"] = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсходныеДанные, "bin", "");
	
	ОписаниеКонтрагента["ЭтоПокупатель"] =
				ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсходныеДанные, "is_customer", Ложь);
				
	ОписаниеКонтрагента["ЭтоПоставщик"] =
				ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсходныеДанные, "is_supplier", Ложь);
				
	ОписаниеКонтрагента["ЮридическийАдрес"] =
				ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсходныеДанные, "legal_address", "");
				
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсходныеДанные, "receiving_expiration") Тогда
		ОписаниеКонтрагента["ЗапасГодностиПриПриемке"]["ЗапасГодности"] = ИсходныеДанные["receiving_expiration"]["value"];
		
		ЗапасГодностиВводится = ИсходныеДанные["receiving_expiration"]["input_method"];
		Если Нрег(ЗапасГодностиВводится) = "percentage" Тогда
			ОписаниеКонтрагента["ЗапасГодностиПриПриемке"]["ЗапасГодностиВводится"] =
																Перечисления.СпособыВводаЧисломПроцентом.Процентом;
	
		Иначе	
			ОписаниеКонтрагента["ЗапасГодностиПриПриемке"]["ЗапасГодностиВводится"] =
																Перечисления.СпособыВводаЧисломПроцентом.Числом;

		КонецЕсли;
		
	КонецЕсли;

	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсходныеДанные, "shipping_expiration") Тогда
		ОписаниеКонтрагента["ЗапасГодностиПриОтгрузке"]["ЗапасГодности"] = ИсходныеДанные["shipping_expiration"]["value"];
		
		ЗапасГодностиВводится = ИсходныеДанные["shipping_expiration"]["input_method"];
		Если Нрег(ЗапасГодностиВводится) = "percentage" Тогда
			ОписаниеКонтрагента["ЗапасГодностиПриОтгрузке"]["ЗапасГодностиВводится"] =
																Перечисления.СпособыВводаЧисломПроцентом.Процентом;
	
		Иначе	
			ОписаниеКонтрагента["ЗапасГодностиПриОтгрузке"]["ЗапасГодностиВводится"] =
																Перечисления.СпособыВводаЧисломПроцентом.Числом;

		КонецЕсли;

	КонецЕсли;
	
	// Заполнение полей описания, который не могут быть явно получены из исходных данных 
	// Важно! Поле Поклажедатель может устанавливается вне этой процедуры
	//
	Если ДопСведения <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ОписаниеКонтрагента, ДопСведения);
		
	КонецЕсли;
	
КонецПроцедуры

Функция КонтрагентПоНаименованиюИРодителю(Наименование, Родитель) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Контрагенты.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Контрагенты КАК Контрагенты
	               |ГДЕ
	               |	Контрагенты.Родитель = &Родитель
	               |	И Контрагенты.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("Родитель", Родитель);

	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();

	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
		
	КонецЦикла;

КонецФункции

Функция КонтрагентПоНаименованиюИлиИдентификатору(Знач Наименование,
												Знач Идентификатор = "",
												Родитель = Неопределено) Экспорт
	
	// поиск по идентификатору
	Если ЗначениеЗаполнено(Идентификатор) И СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(Идентификатор) Тогда

		Контрагент = 
				дсфСлужебныйАпи.ПроверитьНаличиеОбъектаСУказаннымИдентификатором(Идентификатор, "Справочник.Контрагенты");
				
		Если ЗначениеЗаполнено(Контрагент) Тогда	
			Возврат Контрагент;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// поиск по наименованию и родителю (поклажедателю)
	Контрагент = КонтрагентПоНаименованиюИРодителю(Наименование, Родитель);
	Если ЗначениеЗаполнено(Контрагент) Тогда	
		Возврат Контрагент;
			
	КонецЕсли;

	Возврат Справочники.Контрагенты.ПустаяСсылка();
	
КонецФункции

Функция НовыйКонтрагентПоОписанию(ОписаниеКонтрагента, Ошибки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
		
	НаименованиеКонтрагента = ОписаниеКонтрагента.Наименование;
	Если ПустаяСтрока(НаименованиеКонтрагента) Тогда
		Ошибки.Добавить("Не заполнено наименование контрагента");
		
		Возврат Неопределено;
		
	КонецЕсли;

	НачатьТранзакцию();
	Попытка
		ИдентификаторКонтрагента = Новый УникальныйИдентификатор;
				
		СсылкаНаНовый = Справочники.Контрагенты.ПолучитьСсылку(ИдентификаторКонтрагента);

		НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
		НовыйКонтрагент.УстановитьСсылкуНового(СсылкаНаНовый);
			
		НовыйКонтрагент.Заполнить(Неопределено);
		
		НовыйКонтрагент.Родитель = ОписаниеКонтрагента.Поклажедатель;

		НовыйКонтрагент.Наименование = ОписаниеКонтрагента.Наименование;

		Если ПустаяСтрока(ОписаниеКонтрагента.НаименованиеПолное) Тогда
			НовыйКонтрагент.НаименованиеПолное = ОписаниеКонтрагента.Наименование;
			
		Иначе
			НовыйКонтрагент.НаименованиеПолное = ОписаниеКонтрагента.НаименованиеПолное;
			
		КонецЕсли;
		
		НовыйКонтрагент.ИНН = ОписаниеКонтрагента.Бин;

		НовыйКонтрагент.Поставщик = ОписаниеКонтрагента.ЭтоПоставщик;
		НовыйКонтрагент.Покупатель = ОписаниеКонтрагента.ЭтоПокупатель;
		
		НовыйКонтрагент.ВидКонтрагента = ВидКонтрагентаПоВходящемуПредставлению(НовыйКонтрагент.ВидКонтрагента);

		НовыйКонтрагент.ЗапасГодностиПриПриемке =
							НастройкаОстаточногоСрокаГодностиПоОписанию(ОписаниеКонтрагента.ЗапасГодностиПриПриемке);

		НовыйКонтрагент.ЗапасГодностиПриОтгрузке = 
							НастройкаОстаточногоСрокаГодностиПоОписанию(ОписаниеКонтрагента.ЗапасГодностиПриОтгрузке);

		// контактная информация
		ЮридическийАдрес = ОписаниеКонтрагента.ЮридическийАдрес;
		Если Не ПустаяСтрока(ЮридическийАдрес) Тогда
			СтрокаКИ = НовыйКонтрагент.КонтактнаяИнформация.Добавить();
			СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
			СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ЮридическийАдресКонтрагента;
			СтрокаКИ.Представление = ЮридическийАдрес;
			СтрокаКИ.Значение = ЮридическийАдрес;
		
		КонецЕсли;

		НовыйКонтрагент.Комментарий = СтрШаблон("Зарегистрирован %1", Формат(ТекущаяДатаСеанса(), "ДФ='dd.MM.yyyy HH:mm:ss'"));
		
		НовыйКонтрагент.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(аргмВходящиеЗапросыА1.ИмяСобытияЖурналаРегистрации() + ".Partners",
								УровеньЖурналаРегистрации.Ошибка,
								Метаданные.HTTPСервисы.дсфFulfillmentPublicApi,,
								ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
								
		Ошибки.Добавить(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат НовыйКонтрагент.Ссылка;

КонецФункции

Функция ВидКонтрагентаПоВходящемуПредставлению(Знач ВидКонтрагентаПредставление) Экспорт
	ВидКонтрагентаПредставление = Нрег(ВидКонтрагентаПредставление);
	
	Если ВидКонтрагентаПредставление = "legal" Тогда
		ВидКонтрагента = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		
	ИначеЕсли ВидКонтрагентаПредставление = "individual" Тогда
		ВидКонтрагента = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		
	ИначеЕсли ВидКонтрагентаПредставление = "individual_entrepreneur" Тогда
		ВидКонтрагента = Перечисления.ЮридическоеФизическоеЛицо.ИндивидуальныйПредприниматель;
		
	Иначе
		ВидКонтрагента = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		
	КонецЕсли;
	
	Возврат ВидКонтрагента;
	
КонецФункции

Функция СведенияОКонтрагенте(КонтрагентСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КонтрагентСсылка, "Наименование");
	СведенияОКонтрагенте = Новый Структура;
	СведенияОКонтрагенте.Вставить("id", XMLСтрока(КонтрагентСсылка));
	СведенияОКонтрагенте.Вставить("name", РеквизитыКонтрагента.Наименование);

	Возврат СведенияОКонтрагенте;
	
КонецФункции

#КонецОбласти

#Область ПрочиеСправочники

Функция АдресДоставкиПоСтроковомуПредставлению(АдресСтрокой, Родитель = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АдресаДоставки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.АдресаДоставки КАК АдресаДоставки
	|ГДЕ
	|	АдресаДоставки.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", АдресСтрокой);
	
	
	УстановитьПривилегированныйРежим(Истина);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
		
	КонецЦикла;
	
	НовыйАдрес = Справочники.АдресаДоставки.СоздатьЭлемент();
	НовыйАдрес.Заполнить(Неопределено);
	НовыйАдрес.Наименование = АдресСтрокой;
	
	НовыйАдрес.Записать();
	
	Возврат НовыйАдрес.Ссылка;
	
КонецФункции

Функция НовоеВходящееОписаниеОстаточногоСрокаГодности() Экспорт
	
	ОписаниеОстаточногоСрокаГодности = Новый Структура;
	ОписаниеОстаточногоСрокаГодности.Вставить("ЗапасГодности", 0);
	ОписаниеОстаточногоСрокаГодности.Вставить("ЗапасГодностиВводится", Неопределено);
	
	Возврат ОписаниеОстаточногоСрокаГодности;
	
КонецФункции

// Функция - Настройка остаточного срока годности по описанию
//
// Параметры:
//  ОписаниеСрокаГодности	 - Структура - см. дсфНормативноСправочнаяИнформацияАпи.НовоеВходящееОписаниеОстаточногоСрокаГодности
// 
// Возвращаемое значение:
//   - Настройка - СправочникСсылка.НастройкиОстаточногоСрокаГодности
//
Функция НастройкаОстаточногоСрокаГодностиПоОписанию(ОписаниеСрокаГодности) Экспорт
	Настройка = Справочники.НастройкиОстаточногоСрокаГодности.ПустаяСсылка();
	
	Если ОписаниеСрокаГодности["ЗапасГодности"] = 0 Тогда
		Возврат Настройка;
		
	КонецЕсли;
	
	Настройка = НастройкаОстаточногоСрокаГодностиПоПараметрам(ОписаниеСрокаГодности["ЗапасГодности"],
															ОписаниеСрокаГодности["ЗапасГодностиВводится"]);
	
	Если ЗначениеЗаполнено(Настройка) Тогда
		Возврат Настройка;
		
	КонецЕсли;
	
	// нужной настройки в ИБ нет - создаем новую
	Настройка = НоваяНастройкаОстаточногоСрокаГодности(ОписаниеСрокаГодности["ЗапасГодности"],
														ОписаниеСрокаГодности["ЗапасГодностиВводится"]);

	Возврат Настройка;

КонецФункции

// Функция - Настройка остаточного срока годности по параметрам
//
// Параметры:
//  ЗапасГодности			 - Число - 
//  ЗапасГодностиВводится	 - Перечисление.СпособыВводаЧисломПроцентом - 
// 
// Возвращаемое значение:
//   - Неопределено или СправочникСсылка.НастройкиОстаточногоСрокаГодности
//
Функция НастройкаОстаточногоСрокаГодностиПоПараметрам(ЗапасГодности, ЗапасГодностиВводится) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НастройкиОстаточногоСрокаГодности.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиОстаточногоСрокаГодности КАК НастройкиОстаточногоСрокаГодности
	|ГДЕ
	|	НастройкиОстаточногоСрокаГодности.ЗадатьОбщий = ИСТИНА
	|	И НастройкиОстаточногоСрокаГодности.ЗапасГодности = &ЗапасГодности
	|	И НастройкиОстаточногоСрокаГодности.ЗапасГодностиВводится = &ЗапасГодностиВводится";
	
	Запрос.УстановитьПараметр("ЗапасГодности", ЗапасГодности);
	Запрос.УстановитьПараметр("ЗапасГодностиВводится", ЗапасГодностиВводится);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
		
	КонецЦикла;
		
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ОбъемПоРазмерам(Ширина = 0, Длина = 0, Высота = 0, КоэффициентПересчетаОбъема) Экспорт
	
	Возврат СлужебныйКлиентСервер.ОбъемПоРазмерам(Ширина, Длина, Высота, КоэффициентПересчетаОбъема);
	
КонецФункции

// Процедура - Обновить штрихкоды номенклатуры
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура	 - 
//  Штрихкоды	 - Массив							 - см. НовоеОписаниеШтрихкода
//  Упаковка	 - СправочникСсылка.УпаковкиНоменклатуры - 
//  Организация	 - 										 - 
//
Процедура ОбновитьШтрихкодыНоменклатуры(Номенклатура,
										Штрихкоды,
										УпаковкаНоменклатуры = Неопределено,
										Организация = Неопределено) Экспорт
										
	// записываем только, если данного шк нет в базе
	
	Для каждого ОписаниеШтрихкода Из Штрихкоды Цикл
	
		НаборЗаписей = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
		НаборЗаписей.Отбор.УпаковкаНоменклатуры.Установить(УпаковкаНоменклатуры);
		НаборЗаписей.Отбор.Штрихкод.Установить(ОписаниеШтрихкода.Штрихкод);
		
		МенеджерЗаписи = НаборЗаписей.Добавить();
		МенеджерЗаписи.Организация  = Организация;
	
		НаборЗаписей.ДополнительныеСвойства.Вставить("НеОбновлятьСвязанные");
		ФормированиеДвижений.ЗаполнитьНаборЗаписейПоОтбору(НаборЗаписей);
		
		Для каждого ТекЗапись Из НаборЗаписей Цикл
			ТекЗапись.Организация = Организация;
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
	
	КонецЦикла;	

КонецПроцедуры

Процедура ОбновитьШтрихкодыОбъектаХраненияНоменклатуры(ОбъектХранения,
										Штрихкоды,
										Упаковка,
										НеОбновлятьСвязанные = Ложь) Экспорт
										
	УстановитьПривилегированныйРежим(Истина);
	
	Для каждого ОписаниеШтрихкода Из Штрихкоды Цикл
	
		НаборЗаписей = РегистрыСведений.ШтрихкодыОбъектовХранения.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОбъектХранения.Установить(ОбъектХранения);
		НаборЗаписей.Отбор.Упаковка.Установить(Упаковка);
		НаборЗаписей.Отбор.Штрихкод.Установить(ОписаниеШтрихкода.Штрихкод);
		
		МенеджерЗаписи = НаборЗаписей.Добавить();
		
		Если НеОбновлятьСвязанные Тогда
			НаборЗаписей.ДополнительныеСвойства.Вставить("НеОбновлятьСвязанные");
			
		КонецЕсли;

		ФормированиеДвижений.ЗаполнитьНаборЗаписейПоОтбору(НаборЗаписей);
				
		НаборЗаписей.Записать();
	
	КонецЦикла;

КонецПроцедуры

Функция НоваяНастройкаОстаточногоСрокаГодности(ЗапасГодности, ЗапасГодностиВводится) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НоваяНастройка = Справочники.НастройкиОстаточногоСрокаГодности.СоздатьЭлемент();
	НоваяНастройка.Заполнить(Неопределено);
	
	НоваяНастройка.ЗадатьОбщий = Истина;
	НоваяНастройка.ЗапасГодности = ЗапасГодности;
	НоваяНастройка.ЗапасГодностиВводится = ЗапасГодностиВводится;
	
	Если ЗапасГодностиВводится = Перечисления.СпособыВводаЧисломПроцентом.Числом Тогда
		Наименование = СтрШаблон("%1 сут.", Формат(ЗапасГодности, "ЧДЦ=0; ЧГ=0"));
		
		НоваяНастройка.ЕдиницаИзмерения = Перечисления.ЕдиницыИзмеренияВремени.Сутки;

	Иначе
		Наименование = СтрШаблон("%1 проц.", Формат(ЗапасГодности, "ЧДЦ=2; ЧГ=0"));
		
	КонецЕсли;
	
	НоваяНастройка.Наименование = Наименование;
	
	Попытка
		НоваяНастройка.Записать();
	
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(аргмВходящиеЗапросыА1.ИмяСобытияЖурналаРегистрации() + ".ExpirationWindowSettings",
								УровеньЖурналаРегистрации.Ошибка,
								Метаданные.Справочники.НастройкиОстаточногоСрокаГодности,,
								ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
								
		ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
	Возврат НоваяНастройка.Ссылка;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Код процедур и функций
#КонецОбласти