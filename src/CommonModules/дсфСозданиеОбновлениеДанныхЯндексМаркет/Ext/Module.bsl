#Область ПрограммныйИнтерфейс

#Область Номенклатура

Функция НовоеОписаниеЭлементаСпискаТоваровВРеестре() Экспорт
	ОписаниеЭлемента = Новый Структура;
	
	ОписаниеЭлемента.Вставить("Наименование", ""); 
	ОписаниеЭлемента.Вставить("Описание", "");

	ОписаниеЭлемента.Вставить("Цена", 0);
	ОписаниеЭлемента.Вставить("ТипыТовара", Новый Массив);

	ОписаниеЭлемента.Вставить("Идентификаторы", Новый Соответствие);	// соответствие, где в качестве ключа используеется
																		// перечисление dsf_ТипыИдентификаторов
	ОписаниеЭлемента.Вставить("СведенияОКоличестве", Новый Соответствие);	// соответствие, где в качестве ключа используеется
																			// перечисление dsf_СтатусыЕдиницТовара
																	
	ОписаниеЭлемента.Вставить("Штрихкоды", Новый Массив); // см. НовоеОписаниеШтрихкода
	
	ОписаниеЭлемента.Вставить("ВГХ", НовоеОписаниеВГХОбъекта()); // см. НовоеОписаниеВГХОбъекта()
	
	ОписаниеЭлемента.Вставить("КоличествоЕдиницТовараВУпаковке", 0); // в шт, больше 0
	ОписаниеЭлемента.Вставить("КоличествоКоробокДляЕдиницыТовара", 0); // в шт, больше 0
	
	Возврат ОписаниеЭлемента;

КонецФункции

// устарела. Использовать дсфНоменклатураАпи.НовоеОписаниеШтрихкода
Функция НовоеОписаниеШтрихкода() Экспорт
	Возврат дсфНормативноСправочнаяИнформацияАпи.НовоеОписаниеШтрихкода();
	
КонецФункции

// устарела. Использовать дсфНоменклатураАпи.НовоеОписаниеШтрихкода
Функция НовоеОписаниеВГХОбъекта() Экспорт
	Возврат дсфНормативноСправочнаяИнформацияАпи.НовоеОписаниеВГХОбъекта();

КонецФункции

#КонецОбласти

#Область ОписанияСтрок

Функция НовоеОписаниеСтрокиПланаПоступленияГрузовогоМеста() Экспорт
	ОписаниеСтроки = Новый Структура;
	
	ОписаниеСтроки.Вставить("План", Документы.ПланПоступления.ПустаяСсылка());
	ОписаниеСтроки.Вставить("НомерСтрокиПлана", 0);
	ОписаниеСтроки.Вставить("ОжидаемоеПоступление", Неопределено);
	ОписаниеСтроки.Вставить("НомерСтрокиЗаказа", 0);
	ОписаниеСтроки.Вставить("Количество", 0);
	ОписаниеСтроки.Вставить("ТипМХ", Справочники.ТипыМестХранения.ПустаяСсылка());
	ОписаниеСтроки.Вставить("МестоХранения", Справочники.МестаХранения.ПустаяСсылка());
	
	Возврат ОписаниеСтроки;
	
КонецФункции

Функция НовоеОписаниеСтрокиПланаПоступления() Экспорт
	
	Возврат дсфДокументыАпи.НовоеОписаниеСтрокиПланаПоступления();
	
КонецФункции

Функция СтрокаПлановЗначенияСправочников() Экспорт
	
	ЗначенияСправочников = Новый Структура;
	
	ЗначенияСправочников.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	ЗначенияСправочников.Вставить("ОбъектХранения", Справочники.ОбъектыХранения.ПустаяСсылка());
	ЗначенияСправочников.Вставить("Партия", Справочники.Партии.ПустаяСсылка());
	ЗначенияСправочников.Вставить("ПартияНоменклатуры", Справочники.ПартииНоменклатуры.ПустаяСсылка());
	ЗначенияСправочников.Вставить("Упаковка", Справочники.Упаковки.ПустаяСсылка());
	ЗначенияСправочников.Вставить("УпаковкаНоменклатуры", Справочники.УпаковкиНоменклатуры.ПустаяСсылка());

	Возврат ЗначенияСправочников;
	
КонецФункции

Функция НовоеОписаниеСтрокиПланаОтгрузкиГрузовогоМеста() Экспорт
	ОписаниеСтроки = Новый Структура;
	
	ОписаниеСтроки.Вставить("План", Документы.ПланОтгрузки.ПустаяСсылка());
	ОписаниеСтроки.Вставить("НомерСтрокиПлана", 0);
	ОписаниеСтроки.Вставить("ЗаказНаОтгрузку", Неопределено);
	ОписаниеСтроки.Вставить("НомерСтрокиЗаказа", 0);
	ОписаниеСтроки.Вставить("Количество", 0);
	ОписаниеСтроки.Вставить("ТипМХ", Справочники.ТипыМестХранения.ПустаяСсылка());
	ОписаниеСтроки.Вставить("МестоХранения", Справочники.МестаХранения.ПустаяСсылка());
	
	Возврат ОписаниеСтроки;
	
КонецФункции

Функция СтрокаПлановОтгрузкиЗначенияСправочников() Экспорт
	
	ЗначенияСправочников = Новый Структура;
	
	ЗначенияСправочников.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	ЗначенияСправочников.Вставить("ОбъектХранения", Справочники.ОбъектыХранения.ПустаяСсылка());
	ЗначенияСправочников.Вставить("Партия", Справочники.Партии.ПустаяСсылка());
	ЗначенияСправочников.Вставить("ПартияНоменклатуры", Справочники.ПартииНоменклатуры.ПустаяСсылка());
	ЗначенияСправочников.Вставить("Упаковка", Справочники.Упаковки.ПустаяСсылка());
	ЗначенияСправочников.Вставить("УпаковкаНоменклатуры", Справочники.УпаковкиНоменклатуры.ПустаяСсылка());

	Возврат ЗначенияСправочников;
	
КонецФункции

#КонецОбласти

#Область Универсальные

Функция РезультатОбработкиРеестра() Экспорт
	ОписаниеРезультата = Новый Структура;
	
	ОписаниеРезультата.Вставить("Успех", Ложь);
	ОписаниеРезультата.Вставить("Ошибки", Новый Массив);
	ОписаниеРезультата.Вставить("ИдентификаторВнешний", "");
	ОписаниеРезультата.Вставить("Идентификатор", "");

	Возврат ОписаниеРезультата;
	
КонецФункции

#КонецОбласти

#Область dsf_ЗаявкаНаПриемку

Функция НовоеОписаниеЗаявкиНаПриемку() Экспорт
	ОписаниеЗаявки = Новый Структура;
	
	ОписаниеЗаявки.Вставить("Дата", Неопределено);
	ОписаниеЗаявки.Вставить("ПериодДоставкиНачало", Неопределено); 
	ОписаниеЗаявки.Вставить("ПериодДоставкиОкончание", Неопределено);
	ОписаниеЗаявки.Вставить("ИдентификаторВнешний", "");
	ОписаниеЗаявки.Вставить("Идентификатор", "");
	ОписаниеЗаявки.Вставить("Комментарий", "");
	ОписаниеЗаявки.Вставить("ДанныеЗаявкиВходящие", "");
	ОписаниеЗаявки.Вставить("ДанныеСкладаЗначенияПолей", "");
	ОписаниеЗаявки.Вставить("ДанныеКурьераЗначенияПолей", "");
	ОписаниеЗаявки.Вставить("ДанныеОтправителяГрузаЗначенияПолей", "");

	ОписаниеЗаявки.Вставить("ТипПриемки", Перечисления.дсфТипыПриемкиЯндексМаркет.ПустаяСсылка());
	
	Возврат ОписаниеЗаявки;
	
КонецФункции

Функция РезультатОбработкиЗаявкиНаПриемку() Экспорт
	ОписаниеРезультата = Новый Структура;
	
	ОписаниеРезультата.Вставить("Успех", Ложь);
	ОписаниеРезультата.Вставить("Ошибки", Новый Массив);
	ОписаниеРезультата.Вставить("ИдентификаторВнешний", "");
	ОписаниеРезультата.Вставить("Идентификатор", "");

	Возврат ОписаниеРезультата;
	
КонецФункции

Процедура СоздатьОбновитьЗаявкуНаПриемку(ДанныеЗаявки, РезультатОбработки) Экспорт
	
	ИдентификаторВнешний = ДанныеЗаявки["ИдентификаторВнешний"];
	
	ЗаявкаНаПриемку = 
		РегистрыСведений.дсфИдентификаторыЯндексМаркет.СсылкаНаОбъектПоПубличномуИдентификатору(
																		ИдентификаторВнешний,
																		"ДокументСсылка.дсфЗаявкаНаПриемку");
		
	ЭтоОбновлениеЗаявки = ЗначениеЗаполнено(ЗаявкаНаПриемку);
	
	// проверка возможности модификации заявки
	Если ЭтоОбновлениеЗаявки Тогда
	
		
	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);

	НачатьТранзакцию();
	Попытка
		
		Если ЭтоОбновлениеЗаявки Тогда
			
			БлокировкаДанных = Новый БлокировкаДанных;
		
			ЭлементБлокировки = БлокировкаДанных.Добавить("Документ.дсфЗаявкаНаПриемку");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ЗаявкаНаПриемку);
				
			БлокировкаДанных.Заблокировать();
			
			//
			ЗаявкаОбъект = ЗаявкаНаПриемку.ПолучитьОбъект();
			
			ЗаполнитьЗначенияСвойств(ЗаявкаОбъект, ДанныеЗаявки);
			
			ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		Иначе
			// создание новой
			УникальныйИдентификатор = Новый УникальныйИдентификатор;
			СсылкаНаНовый = Документы.дсфЗаявкаНаПриемку.ПолучитьСсылку(УникальныйИдентификатор);

			НоваяЗаявка = Документы.дсфЗаявкаНаПриемку.СоздатьДокумент();
			НоваяЗаявка.УстановитьСсылкуНового(СсылкаНаНовый);
			
			НоваяЗаявка.Заполнить(ДанныеЗаявки);
			
			НоваяЗаявка.Дата = ТекущаяДатаСеанса();
						
			НоваяЗаявка.Записать(РежимЗаписиДокумента.Проведение); 
			
			// dsf_ИдентификаторыЯндексМаркет
			СтруктураЗаписи = Новый Структура;
			СтруктураЗаписи.Вставить("Идентификатор", ИдентификаторВнешний);
			СтруктураЗаписи.Вставить("Ссылка", СсылкаНаНовый);
			СтруктураЗаписи.Вставить("ДатаРегистрации", ТекущаяДатаСеанса());
			
			РегистрыСведений.дсфИдентификаторыЯндексМаркет.ДобавитьЗапись(СтруктураЗаписи);
			
			// dsf_СвязанныеОбъектыЗаявкаНаПриемку
			РегистрыСведений.дсфЗаявкаНаПриемкуСвязанныеОбъектыЯМаркет.ДобавитьНовуюЗапись(СсылкаНаНовый);
			
			ЗаявкаНаПриемку = НоваяЗаявка.Ссылка;
			
		КонецЕсли;
				
		РезультатОбработки["Идентификатор"] = XMLСтрока(ЗаявкаНаПриемку);
		РезультатОбработки["ИдентификаторВнешний"] = ИдентификаторВнешний;
		
		РезультатОбработки.Успех = Истина;

		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(дсфВходящиеЗапросыЯндексМаркет.ИмяСобытияЖурналаРегистрации(),
								УровеньЖурналаРегистрации.Ошибка,
								Метаданные.HTTPСервисы.дсфFulfillmentYandexMarket,,
								ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
								
		РезультатОбработки.Ошибки.Добавить(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке)); 
		
		ВызватьИсключение;
		
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область РеестрПриемки

Функция НовоеОписаниеРеестраПриемки() Экспорт
	ОписаниеРеестра = Новый Структура;
	
	ОписаниеРеестра.Вставить("Дата", Неопределено);
	ОписаниеРеестра.Вставить("ИдентификаторВнешний", "");
	ОписаниеРеестра.Вставить("Идентификатор", "");
	ОписаниеРеестра.Вставить("Комментарий", "");
	ОписаниеРеестра.Вставить("ИдентификаторЗаявкиНаПриемкуВнешний", "");
	ОписаниеРеестра.Вставить("ИдентификаторЗаявкиНаПриемку", "");
	
	ОписаниеРеестра.Вставить("ТипРеестра", Перечисления.дсфТипыРеестровЯндексМаркет.ПустаяСсылка());
	ОписаниеРеестра.Вставить("ТипРеестраКод", Неопределено);
	ОписаниеРеестра.Вставить("Процесс", дсфОбщегоНазначенияЯндексМаркет.ПроцессПоступленияПоУмолчанию());
	
	ОписаниеРеестра.Вставить("ГрузовыеМеста", Новый Массив); // см. НовоеОписаниеСтрокиПланаПоступленияГрузовогоМеста
	ОписаниеРеестра.Вставить("Состав", Новый Массив); // см. НовоеОписаниеЭлементаСпискаТоваровВРеестре
	
	ОписаниеРеестра.Вставить("ЗначенияПолей", "");
	
	ОписаниеРеестра.Вставить("Контрагент", Неопределено);
	ОписаниеРеестра.Вставить("Организация", Неопределено);
	
	ОписаниеРеестра.Вставить("НомерКИС", "");

	Возврат ОписаниеРеестра;
	
КонецФункции

// Процедура - Создать обновить реестр приемки, данные реестра хранятся в документе ПланПоступления
//				
//
// Параметры:
//  ДанныеРеестра		 - Структура - см. dsf_СозданиеОбновлениеДанныхЯндексМаркет.НовоеОписаниеРеестраПриемки
//  РезультатОбработки	 - Структура - см. dsf_СозданиеОбновлениеДанныхЯндексМаркет.РезультатОбработкиРеестраПриемки
//
Процедура СоздатьОбновитьРеестрПриемки(ДанныеРеестра, РезультатОбработки) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	ИдентификаторЗаявкиВнешний = ДанныеРеестра["ИдентификаторЗаявкиНаПриемкуВнешний"];

	ЗаявкаНаПриемку = 
		РегистрыСведений.дсфИдентификаторыЯндексМаркет.СсылкаНаОбъектПоПубличномуИдентификатору(
																		ИдентификаторЗаявкиВнешний,
																		"ДокументСсылка.дсфЗаявкаНаПриемку");
	
	Если ЗаявкаНаПриемку = Неопределено Тогда
		ТекстОшибки = СтрШаблон("Заявка на приемку с yandexId %1 не была ранее зарегистрирована.", ИдентификаторЗаявкиВнешний);
			
		РезультатОбработки.Ошибки.Добавить(ТекстОшибки);
		
		Возврат;
	
	КонецЕсли;
	
	// Важно! Входящий идентификатор реестра не используется для идентификации планов поступления,
	// т.к. запрос на изменение реестра может содержать иной registryId
	// Поэтому всегда обрабатывается тот План поступления, который связан с заявкой на приемку
	ИдентификаторРеестраВнешний = ДанныеРеестра["ИдентификаторВнешний"];
	
	ПланПоступления = 
		РегистрыСведений.дсфЗаявкаНаПриемкуСвязанныеОбъектыЯМаркет.ПланПоступленияПоЗаявкеНаПриемку(ЗаявкаНаПриемку);
		
	ЭтоОбновлениеРеестра = ЗначениеЗаполнено(ПланПоступления);
	
	// проверка возможности модификации реестра
	Если ЭтоОбновлениеРеестра Тогда
		Статус = СтатусыДокументовСервер.СтатусДокумента(ПланПоступления);

		//Если Не ЗначениеЗаполнено(Статус) ИЛИ Статус = Справочники.СтатусыДокументов.НеЗагружен ИЛИ Статус = Справочники.СтатусыДокументов.Новый Тогда 
		//	
		//Иначе
		//	ТекстОшибки = СтрШаблон("Реестр поступления с yandexId = %1 не может быть изменен, "
		//							+ "т.к. соответствующий ему план поступления находится в статусе %2.",
		//							ИдентификаторВнешний,
		//							Статус);
		//	РезультатОбработки.Ошибки.Добавить(ТекстОшибки);
		//
		//	Возврат;

		//КонецЕсли;
		
	КонецЕсли;
	

	НачатьТранзакцию();
	Попытка
			
		Если ЭтоОбновлениеРеестра Тогда
			БлокировкаДанных = Новый БлокировкаДанных;

			ЭлементБлокировки = БлокировкаДанных.Добавить("Документ.ПланПоступления");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ПланПоступления);
			
			ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.СтрокиПлановПоступления");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("План", ПланПоступления);
			
			ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.СтрокиПлановПоступленияГрузовыхМест");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("План", ПланПоступления);
			БлокировкаДанных.Заблокировать();
			
			//
			ПланПоступленияОбъект = ПланПоступления.ПолучитьОбъект();
			
			ЗаполнитьЗначенияСвойств(ПланПоступленияОбъект, ДанныеРеестра);
			
			ПланПоступленияОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		Иначе
			// создание нового
			УникальныйИдентификатор = Новый УникальныйИдентификатор;
			СсылкаНаНовый = Документы.ПланПоступления.ПолучитьСсылку(УникальныйИдентификатор);

			НовыйПланПоступления = Документы.ПланПоступления.СоздатьДокумент();
			НовыйПланПоступления.УстановитьСсылкуНового(СсылкаНаНовый);
			
			НовыйПланПоступления.Заполнить(ДанныеРеестра);
			ЗаполнитьЗначенияСвойств(НовыйПланПоступления, ДанныеРеестра);

			НовыйПланПоступления.Дата = ДанныеРеестра.Дата;
			
			НовыйПланПоступления.Записать(РежимЗаписиДокумента.Проведение);
			
			// записать идентификаторы в регистр
			СтруктураЗаписи = Новый Структура;
			СтруктураЗаписи.Вставить("Идентификатор", ИдентификаторРеестраВнешний);
			СтруктураЗаписи.Вставить("Ссылка", СсылкаНаНовый);
			СтруктураЗаписи.Вставить("ДатаРегистрации", ТекущаяДатаСеанса());
			
			РегистрыСведений.дсфИдентификаторыЯндексМаркет.ДобавитьЗапись(СтруктураЗаписи);
						
			ПланПоступления = НовыйПланПоступления.Ссылка;
			
		КонецЕсли;
		
		// связанные регистры
		
		// Строки планов поступления грузовых мест
		Если ДанныеРеестра["ГрузовыеМеста"].Количество() > 0 Тогда
			Рез = ЗаписатьСтрокиПлановПоступленияГрузовыхМест(ПланПоступления, ДанныеРеестра["ГрузовыеМеста"]);
		
		КонецЕсли;
			
		// Строки планов поступления
		Если Не ЗаписатьСтрокиПлановПоступления(ПланПоступления, ДанныеРеестра["Состав"]) Тогда
			ОтменитьТранзакцию();
			
			ТекстОшибки = "Не удалось выполнить запись / обновление строк планов поступления";
			ЗаписьЖурналаРегистрации(дсфВходящиеЗапросыЯндексМаркет.ИмяСобытияЖурналаРегистрации(),
								УровеньЖурналаРегистрации.Ошибка,
								Метаданные.HTTPСервисы.дсфFulfillmentYandexMarket,,
								ТекстОшибки);
								
			РезультатОбработки.Ошибки.Добавить(ТекстОшибки); 
		
			Возврат;
		
		КонецЕсли;
		
		// вспомогательные регистры
		БлокировкаДанныхРегистров = Новый БлокировкаДанных;
		
		ЭлементБлокировки = БлокировкаДанныхРегистров.Добавить("РегистрСведений.дсфЗаявкаНаПриемкуСвязанныеОбъектыЯМаркет");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("ЗаявкаНаПриемку", ЗаявкаНаПриемку);
		
		ЭлементБлокировки = БлокировкаДанныхРегистров.Добавить("РегистрСведений.дсфВерсииРеестровПриемкиЯндексМаркет");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("ЗаявкаНаПриемку", ЗаявкаНаПриемку);
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторРеестра", ИдентификаторРеестраВнешний);

		БлокировкаДанныхРегистров.Заблокировать();

		// dsf_СвязанныеОбъектыЗаявкаНаПриемку
		РегистрыСведений.дсфЗаявкаНаПриемкуСвязанныеОбъектыЯМаркет.СвязатьПланПоступленияСЗаявкойНаПриемку(ПланПоступления,
																									ЗаявкаНаПриемку);
																									
		// dsf_ВерсииРеестровПриемкиЯндексМаркет
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("ЗаявкаНаПриемку", ЗаявкаНаПриемку);
		СтруктураЗаписи.Вставить("ИдентификаторРеестра", ИдентификаторРеестраВнешний);
		
		СтруктураЗаписи.Вставить("ДатаРеестра", ДанныеРеестра["Дата"]);
		СтруктураЗаписи.Вставить("ТипРеестра", ДанныеРеестра["ТипРеестра"]);
		СтруктураЗаписи.Вставить("ТипРеестраКод", ДанныеРеестра["ТипРеестраКод"]);
		
		СтруктураЗаписи.Вставить("ДанныеРеестра", Новый ХранилищеЗначения(ДанныеРеестра["ЗначенияПолей"], Новый СжатиеДанных()));
		
		Если РегистрыСведений.дсфВерсииРеестровПриемкиЯндексМаркет.ЗаписьЕстьВРегистре(ЗаявкаНаПриемку,
																						ИдентификаторРеестраВнешний) Тогда
																						
			РегистрыСведений.дсфВерсииРеестровПриемкиЯндексМаркет.ОбновитьЗапись(СтруктураЗаписи);

		Иначе	
			РегистрыСведений.дсфВерсииРеестровПриемкиЯндексМаркет.ДобавитьЗапись(СтруктураЗаписи);
			
		КонецЕсли;
				
		РезультатОбработки["Идентификатор"] = XMLСтрока(ПланПоступления);
		РезультатОбработки["ИдентификаторВнешний"] = ИдентификаторРеестраВнешний;
		
		РезультатОбработки.Успех = Истина;

		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(дсфВходящиеЗапросыЯндексМаркет.ИмяСобытияЖурналаРегистрации(),
								УровеньЖурналаРегистрации.Ошибка,
								Метаданные.HTTPСервисы.дсфFulfillmentYandexMarket,,
								ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
								
		РезультатОбработки.Ошибки.Добавить(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке)); 
		
		ВызватьИсключение;
		
	КонецПопытки;

КонецПроцедуры

&НаСервере
Функция ЗаписатьСтрокиПлановПоступленияГрузовыхМест(ПланПоступления, ГрузовыеМеста, ПричинаКорректировки = Неопределено)
	
	// если грузовых мест нет, то сразу возврат
	Если ГрузовыеМеста.Количество() = 0 Тогда
		Возврат Истина;
		
	КонецЕсли;

	НаборЗаписей = РегистрыСведений.СтрокиПлановПоступленияГрузовыхМест.СоздатьНаборЗаписей(); 
	Если ЗначениеЗаполнено(ПричинаКорректировки) Тогда 
		НаборЗаписей.ДополнительныеСвойства.Вставить("ПричинаКорректировки", ПричинаКорректировки);
		
	КонецЕсли;
	
	НаборЗаписей.Отбор.План.Установить(ПланПоступления);
		
	ТаблицаТекущиеЗаписи = КонвертацияДокументов.ТекущиеЗаписиСтрокПоступленияГрузовыхМест(НаборЗаписей);
	
	// обнуление количества в имеющихся строках
	НомерСтрокиДляЗаписи = 0;
	Для каждого ТекСтрока Из ТаблицаТекущиеЗаписи Цикл
		НомерСтрокиДляЗаписи = Макс(НомерСтрокиДляЗаписи, ТекСтрока.НомерСтрокиПлана);
		ТекСтрока.Количество = 0;
	
	КонецЦикла;
	
	ТаблицаГрузовыхМест = дсфОбщегоНазначенияЯндексМаркет.ПреобразоватьМассивВТаблицуЗначений(ГрузовыеМеста);
	ТаблицаГрузовыхМест.Свернуть("План, ТипМХ, МестоХранения", "Количество");
	
	// актуализация строк в таблице для записи набора, при необходимости добавляем новую строку
	СтруктураПоиска = Новый Структура("План, ТипМХ, МестоХранения");
	
	Для каждого СтрокаГрузовогоМеста Из ТаблицаГрузовыхМест Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаГрузовогоМеста);
		СтруктураПоиска.План = ПланПоступления;
		
		СтрокиТаблицы = ТаблицаТекущиеЗаписи.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТаблицы.Количество() > 0 Тогда
			// обновляем только первую строку
			СтрокиТаблицы[0]["Количество"] = СтрокаГрузовогоМеста["Количество"]
			
		Иначе
			// добавляем
			НомерСтрокиДляЗаписи = НомерСтрокиДляЗаписи + 1;
			
			НоваяСтрокаТаблицы = ТаблицаТекущиеЗаписи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, СтрокаГрузовогоМеста);
			
			НоваяСтрокаТаблицы.План = ПланПоступления;
			НоваяСтрокаТаблицы.НомерСтрокиПлана = НомерСтрокиДляЗаписи;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЗаписей.Загрузить(ТаблицаТекущиеЗаписи);
	
	Попытка
		КонвертацияДокументов.ЗаписатьСтрокиПоступленияГрузовыхМест(НаборЗаписей, ПланПоступления);
		Успех = Истина;
		
	Исключение
		СлужебныйМодуль.ОбработатьИсключение(ИнформацияОбОшибке(), НСтр("en = 'Save lines'; ru = 'Запись строк'; bg = 'Запись строк'"),, ПланПоступления);
		Успех = Ложь;
		
	КонецПопытки; 

	Возврат Успех;
	
КонецФункции

&НаСервере
Функция ЗаписатьСтрокиПлановПоступления(ПланПоступления, ТоварныйСостав, ПричинаКорректировки = Неопределено)
	
	НаборЗаписей = РегистрыСведений.СтрокиПлановПоступления.СоздатьНаборЗаписей(); 
	Если ЗначениеЗаполнено(ПричинаКорректировки) Тогда 
		НаборЗаписей.ДополнительныеСвойства.Вставить("ПричинаКорректировки", ПричинаКорректировки);
		
	КонецЕсли;
	
	НаборЗаписей.Отбор.План.Установить(ПланПоступления);
		
	ТаблицаТекущиеЗаписи = КонвертацияДокументов.ТекущиеЗаписиСтрокПоступления(НаборЗаписей);
	
	// обнуление количества в имеющихся строках
	НомерСтрокиДляЗаписи = 0;
	Для каждого ТекСтрока Из ТаблицаТекущиеЗаписи Цикл
		НомерСтрокиДляЗаписи = Макс(НомерСтрокиДляЗаписи, ТекСтрока.НомерСтрокиПлана);
		ТекСтрока.Количество = 0;
		ТекСтрока.КоличествоУпаковок = 0;
		
	КонецЦикла;
	
	// актуализация строк в таблице для записи набора, при необходимости добавляем новую строку
	СтруктураПоиска = Новый Структура("План, Номенклатура, ПартияНоменклатуры, Состояние");
	СтруктураПоиска["План"] = ПланПоступления;
	
	Ошибки = Новый Массив;
	Для каждого СтрокаТоварногоСостава Из ТоварныйСостав Цикл
		
		ЭлементыСправочников = СтрокаПлановЗначенияСправочников();
		
		Если Не ОпределитьЭлементыСправочниковДляСтрокиПлана(СтрокаТоварногоСостава,
																ЭлементыСправочников,
																Ошибки) Тогда
			Возврат Ложь;
			
		КонецЕсли;
		
		// анализ статуса единиц товара
		Для каждого СведенияОКоличестве Из СтрокаТоварногоСостава["СведенияОКоличестве"] Цикл
			Состояние = дсфОбщегоНазначенияЯндексМаркет.СостояниеОбъектаХраненияПоСтатусуЕдиницыТовара(СведенияОКоличестве.Ключ);
			Количество = СведенияОКоличестве.Значение;
			
			СтруктураПоиска["Номенклатура"] = ЭлементыСправочников["Номенклатура"];
			СтруктураПоиска["ПартияНоменклатуры"] = ЭлементыСправочников["ПартияНоменклатуры"];
			СтруктураПоиска["Состояние"] = Состояние;
			
			СтрокиТаблицы = ТаблицаТекущиеЗаписи.НайтиСтроки(СтруктураПоиска);
			Если СтрокиТаблицы.Количество() > 0 Тогда
				// обновляем только первую строку
				СтрокиТаблицы[0]["Количество"] = Количество;
				СтрокиТаблицы[0]["КоличествоУпаковок"] = Количество;

			Иначе
				// добавляем
				НомерСтрокиДляЗаписи = НомерСтрокиДляЗаписи + 1;
				
				НоваяСтрокаТаблицы = ТаблицаТекущиеЗаписи.Добавить();
				
				// партию в дальнейшем прописывать отдельно, т.к. они тоже будут в массиве 
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, ЭлементыСправочников);
				
				НоваяСтрокаТаблицы.Состояние = Состояние;
				НоваяСтрокаТаблицы.Количество = Количество;
				НоваяСтрокаТаблицы.КоличествоУпаковок = Количество;

				НоваяСтрокаТаблицы.План = ПланПоступления;
				НоваяСтрокаТаблицы.НомерСтрокиПлана = НомерСтрокиДляЗаписи;
				
			КонецЕсли;

		КонецЦикла;
		
	КонецЦикла;
	
	НаборЗаписей.Загрузить(ТаблицаТекущиеЗаписи);
	
	Попытка
		КонвертацияДокументов.ЗаписатьСтрокиПоступления(НаборЗаписей, ПланПоступления);
		Успех = Истина;
		
	Исключение
		СлужебныйМодуль.ОбработатьИсключение(ИнформацияОбОшибке(), НСтр("en = 'Save lines'; ru = 'Запись строк'; bg = 'Запись строк'"),, ПланПоступления);
		Успех = Ложь;
		
	КонецПопытки; 

	Возврат Успех;
	
КонецФункции

#КонецОбласти

#Область ЗаявкаНаОтгрузку

Функция НовоеОписаниеЗаявкиНаОтгрузку() Экспорт
	ОписаниеЗаявки = Новый Структура;
	
	ОписаниеЗаявки.Вставить("Дата", Неопределено);
	ОписаниеЗаявки.Вставить("ПериодОтправкиНачало", Неопределено); 
	ОписаниеЗаявки.Вставить("ПериодОтправкиОкончание", Неопределено);
	ОписаниеЗаявки.Вставить("ИдентификаторВнешний", "");
	ОписаниеЗаявки.Вставить("Идентификатор", "");
	ОписаниеЗаявки.Вставить("Комментарий", "");
	ОписаниеЗаявки.Вставить("ДанныеЗаявкиВходящие", "");
	ОписаниеЗаявки.Вставить("ДанныеСкладаЗначенияПолей", "");
	ОписаниеЗаявки.Вставить("ДанныеКурьераЗначенияПолей", "");
	
	ОписаниеЗаявки.Вставить("ДанныеКурьераЗначенияПолей", "");
	
	Возврат ОписаниеЗаявки;
	
КонецФункции

Функция РезультатОбработкиЗаявкиНаОтгрузку() Экспорт
	ОписаниеРезультата = Новый Структура;
	
	ОписаниеРезультата.Вставить("Успех", Ложь);
	ОписаниеРезультата.Вставить("Ошибки", Новый Массив);
	ОписаниеРезультата.Вставить("ИдентификаторВнешний", "");
	ОписаниеРезультата.Вставить("Идентификатор", "");

	Возврат ОписаниеРезультата;
	
КонецФункции

Процедура СоздатьОбновитьЗаявкуНаОтгрузку(ДанныеЗаявки, РезультатОбработки) Экспорт
	
	ЭтоОбновлениеЗаявки = Ложь;

	ИдентификаторВнешний = ДанныеЗаявки["ИдентификаторВнешний"];
	
	ЗаявкаНаОтгрузку = РегистрыСведений.дсфИдентификаторыЯндексМаркет.СсылкаНаОбъектПоПубличномуИдентификатору(
																		ИдентификаторВнешний,
																		"ДокументСсылка.дсфЗаявкаНаОтгрузку");
																		
	// проверка возможности модификации заявки
	Если ЗначениеЗаполнено(ЗаявкаНаОтгрузку) И ТипЗнч(ЗаявкаНаОтгрузку) = Тип("ДокументСсылка.дсфЗаявкаНаОтгрузку") Тогда
		ЭтоОбновлениеЗаявки = Истина;
		
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Истина);

	НачатьТранзакцию();
	Попытка
		
		Если ЭтоОбновлениеЗаявки Тогда
			
			БлокировкаДанных = Новый БлокировкаДанных;
		
			ЭлементБлокировки = БлокировкаДанных.Добавить("Документ.дсфЗаявкаНаОтгрузку");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ЗаявкаНаОтгрузку);
				
			БлокировкаДанных.Заблокировать();
			
			//
			ЗаявкаОбъект = ЗаявкаНаОтгрузку.ПолучитьОбъект();
			
			ЗаполнитьЗначенияСвойств(ЗаявкаОбъект, ДанныеЗаявки);
			
			ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		Иначе
			// создание новой
			УникальныйИдентификатор = Новый УникальныйИдентификатор;
			СсылкаНаНовый = Документы.дсфЗаявкаНаОтгрузку.ПолучитьСсылку(УникальныйИдентификатор);

			НоваяЗаявка = Документы.дсфЗаявкаНаОтгрузку.СоздатьДокумент();
			НоваяЗаявка.УстановитьСсылкуНового(СсылкаНаНовый);
			
			НоваяЗаявка.Заполнить(ДанныеЗаявки);
			
			НоваяЗаявка.Дата = ТекущаяДатаСеанса();
						
			НоваяЗаявка.Записать(РежимЗаписиДокумента.Проведение); 
			
			// dsf_ИдентификаторыЯндексМаркет
			СтруктураЗаписи = Новый Структура;
			СтруктураЗаписи.Вставить("Идентификатор", ИдентификаторВнешний);
			СтруктураЗаписи.Вставить("Ссылка", СсылкаНаНовый);
			СтруктураЗаписи.Вставить("ДатаРегистрации", ТекущаяДатаСеанса());
			
			РегистрыСведений.дсфИдентификаторыЯндексМаркет.ДобавитьЗапись(СтруктураЗаписи);
			
			// dsf_СвязанныеОбъектыЗаявкаНаПриемку
			РегистрыСведений.дсфЗаявкаНаОтгрузкуСвязанныеОбъектыЯМаркет.ДобавитьНовуюЗапись(СсылкаНаНовый);
			
			ЗаявкаНаОтгрузку = НоваяЗаявка.Ссылка;
			
		КонецЕсли;
				
		РезультатОбработки["Идентификатор"] = XMLСтрока(ЗаявкаНаОтгрузку);
		РезультатОбработки["ИдентификаторВнешний"] = ИдентификаторВнешний;
		
		РезультатОбработки.Успех = Истина;

		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(дсфВходящиеЗапросыЯндексМаркет.ИмяСобытияЖурналаРегистрации(),
								УровеньЖурналаРегистрации.Ошибка,
								Метаданные.HTTPСервисы.дсфFulfillmentYandexMarket,,
								ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
								
		РезультатОбработки.Ошибки.Добавить(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке)); 
		
		ВызватьИсключение;
		
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область РеестрОтгрузки

Функция НовоеОписаниеРеестраОтгрузки() Экспорт
	ОписаниеРеестра = Новый Структура;
	
	ОписаниеРеестра.Вставить("Дата", Неопределено);
	ОписаниеРеестра.Вставить("ИдентификаторВнешний", "");
	ОписаниеРеестра.Вставить("Идентификатор", "");
	ОписаниеРеестра.Вставить("Комментарий", "");
	ОписаниеРеестра.Вставить("ИдентификаторЗаявкиНаОтгрузкуВнешний", "");
	ОписаниеРеестра.Вставить("ИдентификаторЗаявкиНаОтгрузку", "");
	
	ОписаниеРеестра.Вставить("ТипРеестра", Перечисления.дсфТипыРеестровЯндексМаркет.ПустаяСсылка());
	ОписаниеРеестра.Вставить("ТипРеестраКод", Неопределено);
	ОписаниеРеестра.Вставить("Процесс", дсфОбщегоНазначенияЯндексМаркет.ПроцессОтгрузкиПоУмолчанию());
	
	ОписаниеРеестра.Вставить("ГрузовыеМеста", Новый Массив); // см. НовоеОписаниеСтрокиПланаПоступленияГрузовогоМеста
	ОписаниеРеестра.Вставить("Состав", Новый Массив); // см. НовоеОписаниеЭлементаСпискаТоваровВРеестре
	
	ОписаниеРеестра.Вставить("ЗначенияПолей", "");
	
	ОписаниеРеестра.Вставить("Контрагент", Неопределено);
	ОписаниеРеестра.Вставить("Организация", Неопределено);
	
	ОписаниеРеестра.Вставить("НомерКИС", "");

	Возврат ОписаниеРеестра;
	
КонецФункции

Процедура СоздатьОбновитьРеестрОтгрузки(ДанныеРеестра, РезультатОбработки) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	ИдентификаторЗаявкиВнешний = ДанныеРеестра["ИдентификаторЗаявкиНаОтгрузкуВнешний"];

	ЗаявкаНаОтгрузку = 
		РегистрыСведений.дсфИдентификаторыЯндексМаркет.СсылкаНаОбъектПоПубличномуИдентификатору(
																		ИдентификаторЗаявкиВнешний,
																		"ДокументСсылка.дсфЗаявкаНаОтгрузку");
	
	Если ЗаявкаНаОтгрузку = Неопределено Тогда
		ТекстОшибки = СтрШаблон("Заявка на отгрузку с yandexId %1 не была ранее зарегистрирована.", ИдентификаторЗаявкиВнешний);
			
		РезультатОбработки.Ошибки.Добавить(ТекстОшибки);
		
		Возврат;
	
	КонецЕсли;
	
	// Важно! Входящий идентификатор реестра не используется для идентификации планов отгрузки,
	// т.к. запрос на изменение реестра может содержать иной registryId
	// Поэтому всегда обрабатывается тот План поступления, который связан с заявкой на приемку
	ИдентификаторРеестраВнешний = ДанныеРеестра["ИдентификаторВнешний"];
	
	ПланОтгрузки = 
		РегистрыСведений.дсфЗаявкаНаОтгрузкуСвязанныеОбъектыЯМаркет.ПланОтгрузкиПоЗаявкеНаОтгрузку(ЗаявкаНаОтгрузку);
		
	ЭтоОбновлениеРеестра = ЗначениеЗаполнено(ПланОтгрузки);
	
	// проверка возможности модификации реестра
	Если ЭтоОбновлениеРеестра Тогда
		Статус = СтатусыДокументовСервер.СтатусДокумента(ПланОтгрузки);

		//Если Не ЗначениеЗаполнено(Статус) ИЛИ Статус = Справочники.СтатусыДокументов.НеЗагружен ИЛИ Статус = Справочники.СтатусыДокументов.Новый Тогда 
		//	
		//Иначе
		//	ТекстОшибки = СтрШаблон("Реестр поступления с yandexId = %1 не может быть изменен, "
		//							+ "т.к. соответствующий ему план поступления находится в статусе %2.",
		//							ИдентификаторВнешний,
		//							Статус);
		//	РезультатОбработки.Ошибки.Добавить(ТекстОшибки);
		//
		//	Возврат;

		//КонецЕсли;
		
	КонецЕсли;
	

	НачатьТранзакцию();
	Попытка
			
		Если ЭтоОбновлениеРеестра Тогда
			БлокировкаДанных = Новый БлокировкаДанных;

			ЭлементБлокировки = БлокировкаДанных.Добавить("Документ.ПланОтгрузки");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ПланОтгрузки);
			
			ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.СтрокиПлановОтгрузки");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("План", ПланОтгрузки);
			
			ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.СтрокиПлановОтгрузкиГрузовыхМест");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("План", ПланОтгрузки);
			БлокировкаДанных.Заблокировать();
			
			//
			ПланОтгрузкиОбъект = ПланОтгрузки.ПолучитьОбъект();
			
			ЗаполнитьЗначенияСвойств(ПланОтгрузкиОбъект, ДанныеРеестра);
			
			ПланОтгрузкиОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		Иначе
			// создание нового
			УникальныйИдентификатор = Новый УникальныйИдентификатор;
			СсылкаНаНовый = Документы.ПланОтгрузки.ПолучитьСсылку(УникальныйИдентификатор);

			НовыйПланОтгрузки = Документы.ПланОтгрузки.СоздатьДокумент();
			НовыйПланОтгрузки.УстановитьСсылкуНового(СсылкаНаНовый);
			
			НовыйПланОтгрузки.Заполнить(ДанныеРеестра);
			ЗаполнитьЗначенияСвойств(НовыйПланОтгрузки, ДанныеРеестра);

			НовыйПланОтгрузки.Дата = ДанныеРеестра.Дата;
			
			НовыйПланОтгрузки.Записать(РежимЗаписиДокумента.Проведение);
			
			// записать идентификаторы в регистр
			СтруктураЗаписи = Новый Структура;
			СтруктураЗаписи.Вставить("Идентификатор", ИдентификаторРеестраВнешний);
			СтруктураЗаписи.Вставить("Ссылка", СсылкаНаНовый);
			СтруктураЗаписи.Вставить("ДатаРегистрации", ТекущаяДатаСеанса());
			
			РегистрыСведений.дсфИдентификаторыЯндексМаркет.ДобавитьЗапись(СтруктураЗаписи);
						
			ПланОтгрузки = НовыйПланОтгрузки.Ссылка;
			
		КонецЕсли;
		
		// связанные регистры
		
		// Строки планов отгрузки грузовых мест
		Если ДанныеРеестра["ГрузовыеМеста"].Количество() > 0 Тогда
			Рез = ЗаписатьСтрокиПлановОтгрузкиГрузовыхМест(ПланОтгрузки, ДанныеРеестра["ГрузовыеМеста"]);
			
		КонецЕсли;
			
		// Строки планов отгрузки
		Если Не ЗаписатьСтрокиПлановОтгрузки(ПланОтгрузки, ДанныеРеестра["Состав"]) Тогда
			ОтменитьТранзакцию();
			
			ТекстОшибки = "Не удалось выполнить запись / обновление строк планов отгрузки";
			ЗаписьЖурналаРегистрации(дсфВходящиеЗапросыЯндексМаркет.ИмяСобытияЖурналаРегистрации(),
								УровеньЖурналаРегистрации.Ошибка,
								Метаданные.HTTPСервисы.дсфFulfillmentYandexMarket,,
								ТекстОшибки);
								
			РезультатОбработки.Ошибки.Добавить(ТекстОшибки); 
		
			Возврат;
		
		КонецЕсли;
		
		// вспомогательные регистры
		БлокировкаДанныхРегистров = Новый БлокировкаДанных;
		
		ЭлементБлокировки = БлокировкаДанныхРегистров.Добавить("РегистрСведений.дсфЗаявкаНаОтгрузкуСвязанныеОбъектыЯМаркет");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("ЗаявкаНаОтгрузку", ЗаявкаНаОтгрузку);
		
		ЭлементБлокировки = БлокировкаДанныхРегистров.Добавить("РегистрСведений.дсфВерсииРеестровОтгрузкиЯндексМаркет");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("ЗаявкаНаОтгрузку", ЗаявкаНаОтгрузку);
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторРеестра", ИдентификаторРеестраВнешний);

		БлокировкаДанныхРегистров.Заблокировать();

		// dsf_СвязанныеОбъектыЗаявкаНаОтгрузку
		РегистрыСведений.дсфЗаявкаНаОтгрузкуСвязанныеОбъектыЯМаркет.СвязатьПланОтгрузкиСЗаявкой(ПланОтгрузки,
																									ЗаявкаНаОтгрузку);
																									
		// dsf_ВерсииРеестровОтгрузкиЯндексМаркет
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("ЗаявкаНаОтгрузку", ЗаявкаНаОтгрузку);
		СтруктураЗаписи.Вставить("ИдентификаторРеестра", ИдентификаторРеестраВнешний);
		
		СтруктураЗаписи.Вставить("ДатаРеестра", ДанныеРеестра["Дата"]);
		СтруктураЗаписи.Вставить("ТипРеестра", ДанныеРеестра["ТипРеестра"]);
		СтруктураЗаписи.Вставить("ТипРеестраКод", ДанныеРеестра["ТипРеестраКод"]);
		
		СтруктураЗаписи.Вставить("ДанныеРеестра", Новый ХранилищеЗначения(ДанныеРеестра["ЗначенияПолей"], Новый СжатиеДанных()));
		
		Если РегистрыСведений.дсфВерсииРеестровОтгрузкиЯндексМаркет.ЗаписьЕстьВРегистре(ЗаявкаНаОтгрузку,
																						ИдентификаторРеестраВнешний) Тогда
																						
			РегистрыСведений.дсфВерсииРеестровОтгрузкиЯндексМаркет.ОбновитьЗапись(СтруктураЗаписи);

		Иначе	
			РегистрыСведений.дсфВерсииРеестровОтгрузкиЯндексМаркет.ДобавитьЗапись(СтруктураЗаписи);
			
		КонецЕсли;
				
		РезультатОбработки["Идентификатор"] = XMLСтрока(ПланОтгрузки);
		РезультатОбработки["ИдентификаторВнешний"] = ИдентификаторРеестраВнешний;
		
		РезультатОбработки.Успех = Истина;

		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(дсфВходящиеЗапросыЯндексМаркет.ИмяСобытияЖурналаРегистрации(),
								УровеньЖурналаРегистрации.Ошибка,
								Метаданные.HTTPСервисы.дсфFulfillmentYandexMarket,,
								ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
								
		РезультатОбработки.Ошибки.Добавить(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке)); 
		
		ВызватьИсключение;
		
	КонецПопытки;

КонецПроцедуры

&НаСервере
Функция ЗаписатьСтрокиПлановОтгрузкиГрузовыхМест(ПланОтгрузки, ГрузовыеМеста, ПричинаКорректировки = Неопределено)
	
	// если грузовых мест нет, то сразу возврат
	Если ГрузовыеМеста.Количество() = 0 Тогда
		Возврат Истина;
		
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.СтрокиПлановОтгрузкиГрузовыхМест.СоздатьНаборЗаписей(); 
	Если ЗначениеЗаполнено(ПричинаКорректировки) Тогда 
		НаборЗаписей.ДополнительныеСвойства.Вставить("ПричинаКорректировки", ПричинаКорректировки);
		
	КонецЕсли;
	
	НаборЗаписей.Отбор.План.Установить(ПланОтгрузки);
		
	ТаблицаТекущиеЗаписи = КонвертацияДокументов.ТекущиеЗаписиСтрокОтгрузкиГрузовыхМест(НаборЗаписей);
	
	// обнуление количества в имеющихся строках
	НомерСтрокиДляЗаписи = 0;
	Для каждого ТекСтрока Из ТаблицаТекущиеЗаписи Цикл
		НомерСтрокиДляЗаписи = Макс(НомерСтрокиДляЗаписи, ТекСтрока.НомерСтрокиПлана);
		ТекСтрока.Количество = 0;
	
	КонецЦикла;
	
	ТаблицаГрузовыхМест = дсфОбщегоНазначенияЯндексМаркет.ПреобразоватьМассивВТаблицуЗначений(ГрузовыеМеста);
	ТаблицаГрузовыхМест.Свернуть("План, ТипМХ, МестоХранения", "Количество");
	
	// актуализация строк в таблице для записи набора, при необходимости добавляем новую строку
	СтруктураПоиска = Новый Структура("План, ТипМХ, МестоХранения");
	
	Для каждого СтрокаГрузовогоМеста Из ТаблицаГрузовыхМест Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаГрузовогоМеста);
		СтруктураПоиска.План = ПланОтгрузки;
		
		СтрокиТаблицы = ТаблицаТекущиеЗаписи.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТаблицы.Количество() > 0 Тогда
			// обновляем только первую строку
			СтрокиТаблицы[0]["Количество"] = СтрокаГрузовогоМеста["Количество"]
			
		Иначе
			// добавляем
			НомерСтрокиДляЗаписи = НомерСтрокиДляЗаписи + 1;
			
			НоваяСтрокаТаблицы = ТаблицаТекущиеЗаписи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, СтрокаГрузовогоМеста);
			
			НоваяСтрокаТаблицы.План = ПланОтгрузки;
			НоваяСтрокаТаблицы.НомерСтрокиПлана = НомерСтрокиДляЗаписи;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЗаписей.Загрузить(ТаблицаТекущиеЗаписи);
	
	Попытка
		КонвертацияДокументов.ЗаписатьСтрокиОтгрузкиГрузовыхМест(НаборЗаписей, ПланОтгрузки);
		Успех = Истина;
		
	Исключение
		СлужебныйМодуль.ОбработатьИсключение(ИнформацияОбОшибке(), НСтр("en = 'Save lines'; ru = 'Запись строк'; bg = 'Запись строк'"),, ПланОтгрузки);
		Успех = Ложь;
		
	КонецПопытки; 

	Возврат Успех;

КонецФункции

&НаСервере
Функция ЗаписатьСтрокиПлановОтгрузки(ПланОтгрузки, ТоварныйСостав, ПричинаКорректировки = Неопределено)
	
	НаборЗаписей = РегистрыСведений.СтрокиПлановОтгрузки.СоздатьНаборЗаписей(); 
	Если ЗначениеЗаполнено(ПричинаКорректировки) Тогда 
		НаборЗаписей.ДополнительныеСвойства.Вставить("ПричинаКорректировки", ПричинаКорректировки);
		
	КонецЕсли;
	
	НаборЗаписей.Отбор.План.Установить(ПланОтгрузки);
		
	ТаблицаТекущиеЗаписи = КонвертацияДокументов.ТекущиеЗаписиСтрокОтгрузки(НаборЗаписей);
	
	// обнуление количества в имеющихся строках
	НомерСтрокиДляЗаписи = 0;
	Для каждого ТекСтрока Из ТаблицаТекущиеЗаписи Цикл
		НомерСтрокиДляЗаписи = Макс(НомерСтрокиДляЗаписи, ТекСтрока.НомерСтрокиПлана);
		ТекСтрока.Количество = 0;
		ТекСтрока.КоличествоУпаковок = 0;
		
	КонецЦикла;
	
	// актуализация строк в таблице для записи набора, при необходимости добавляем новую строку
	СтруктураПоиска = Новый Структура("План, Номенклатура, ПартияНоменклатуры, Состояние");
	СтруктураПоиска["План"] = ПланОтгрузки;
	
	Ошибки = Новый Массив;
	Для каждого СтрокаТоварногоСостава Из ТоварныйСостав Цикл
		
		ЭлементыСправочников = СтрокаПлановЗначенияСправочников();
		
		Если Не ОпределитьЭлементыСправочниковДляСтрокиПлана(СтрокаТоварногоСостава,
															ЭлементыСправочников,
															Ошибки) Тогда
			Возврат Ложь;
			
		КонецЕсли;
		
		// анализ статуса единиц товара
		Для каждого СведенияОКоличестве Из СтрокаТоварногоСостава["СведенияОКоличестве"] Цикл
			Состояние = дсфОбщегоНазначенияЯндексМаркет.СостояниеОбъектаХраненияПоСтатусуЕдиницыТовара(СведенияОКоличестве.Ключ);
			Количество = СведенияОКоличестве.Значение;
			
			СтруктураПоиска["Номенклатура"] = ЭлементыСправочников["Номенклатура"];
			СтруктураПоиска["ПартияНоменклатуры"] = ЭлементыСправочников["ПартияНоменклатуры"];
			СтруктураПоиска["Состояние"] = Состояние;
			
			СтрокиТаблицы = ТаблицаТекущиеЗаписи.НайтиСтроки(СтруктураПоиска);
			Если СтрокиТаблицы.Количество() > 0 Тогда
				// обновляем только первую строку
				СтрокиТаблицы[0]["Количество"] = Количество;
				СтрокиТаблицы[0]["КоличествоУпаковок"] = Количество;

			Иначе
				// добавляем
				НомерСтрокиДляЗаписи = НомерСтрокиДляЗаписи + 1;
				
				НоваяСтрокаТаблицы = ТаблицаТекущиеЗаписи.Добавить();
				
				// партию в дальнейшем прописывать отдельно, т.к. они тоже будут в массиве 
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, ЭлементыСправочников);
				
				НоваяСтрокаТаблицы.Состояние = Состояние;
				НоваяСтрокаТаблицы.Количество = Количество;
				НоваяСтрокаТаблицы.КоличествоУпаковок = Количество;

				НоваяСтрокаТаблицы.План = ПланОтгрузки;
				НоваяСтрокаТаблицы.НомерСтрокиПлана = НомерСтрокиДляЗаписи;
				
			КонецЕсли;

		КонецЦикла;
		
	КонецЦикла;
	
	НаборЗаписей.Загрузить(ТаблицаТекущиеЗаписи);
	
	Попытка
		КонвертацияДокументов.ЗаписатьСтрокиОтгрузки(НаборЗаписей, ПланОтгрузки);
		Успех = Истина;
		
	Исключение
		СлужебныйМодуль.ОбработатьИсключение(ИнформацияОбОшибке(), НСтр("en = 'Save lines'; ru = 'Запись строк'; bg = 'Запись строк'"),, ПланОтгрузки);
		Успех = Ложь;
		
	КонецПопытки; 

	Возврат Успех;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция НоваяНоменклатураНаОснованииДанныхРеестра(ОписаниеТовара, Ошибки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	АртикулНоменклатуры = ОписаниеТовара.Идентификаторы.Получить(Перечисления.дсфТипыИдентификаторовЯндексМаркет.ARTICLE);
	Если НЕ ЗначениеЗаполнено(АртикулНоменклатуры) Тогда
		Ошибки.Добавить(СтрШаблон("Для товара % не указано значение ARTICLE", ОписаниеТовара.Наименование));
		
		Возврат Ложь;
		
	КонецЕсли;
	
	КоэффициентПересчетаОбъема = Константы.КоэффициентПересчетаЛинейныхГабаритовВОбъем.Получить();

	НачатьТранзакцию();
	Попытка
		ИдентификаторНоменклатуры = Новый УникальныйИдентификатор;
				
		СсылкаНаНовый = Справочники.Номенклатура.ПолучитьСсылку(ИдентификаторНоменклатуры);

		НоваяНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
		НоваяНоменклатура.УстановитьСсылкуНового(СсылкаНаНовый);
			
		НоваяНоменклатура.Заполнить(Неопределено);
		
		Если ЗначениеЗаполнено(ОписаниеТовара.Наименование) Тогда
			НоваяНоменклатура.Наименование = ОписаниеТовара.Наименование;
			
		ИначеЕсли ЗначениеЗаполнено(ОписаниеТовара.Описание) Тогда
			НоваяНоменклатура.Наименование = ОписаниеТовара.Описание;

		КонецЕсли;
		
		НоваяНоменклатура.НаименованиеПолное = НоваяНоменклатура.Наименование;
		НоваяНоменклатура.Организация = дсфОбщегоНазначенияЯндексМаркет.ПоклажедательПоУмолчанию();
		
		// Важно! Из-за ограничения длинны штатного реквизита Артикул
		// может происходить обрезание символов после 25-го, поэтому дополнительно
		// записываем входящий артикул и в добаввленный реквизит
		//
		НоваяНоменклатура.Артикул = АртикулНоменклатуры;
		НоваяНоменклатура.дсфАртикулПолный = АртикулНоменклатуры;
		
		Если ОписаниеТовара.ТипыТовара.Количество() > 0 Тогда
			
			КодТипаТовара = ОписаниеТовара.ТипыТовара[0]; // берем первый
			НоваяНоменклатура.ВидНоменклатуры = дсфОбщегоНазначенияЯндексМаркет.ВидОбъектаХраненияПоТипуТовара(КодТипаТовара);
			
		Иначе
			НоваяНоменклатура.ВидНоменклатуры = Справочники.ВидыОбъектовХранения.ПустаяСсылка();
			
		КонецЕсли;
		
		НоваяНоменклатура.ЕдиницаИзмерения = дсфОбщегоНазначенияЯндексМаркет.ЕдиницаИзмеренияШтук();
		
		// базовые ВГХ номенклатуры
		НоваяНоменклатура.Масса = ОписаниеТовара.ВГХ["ВесБруттоКг"];
		НоваяНоменклатура.МассаНетто = ОписаниеТовара.ВГХ["ВесНеттоКг"];
		
		
		НоваяНоменклатура.ОбъемНетто = дсфОбщегоНазначенияЯндексМаркет.ОбъемПоГабаритам(ОписаниеТовара.ВГХ["ШиринаСм"],
																				ОписаниеТовара.ВГХ["ДлинаСм"],
																				ОписаниеТовара.ВГХ["ВысотаСм"],
																				КоэффициентПересчетаОбъема);

		НоваяНоменклатура.Цена = ОписаниеТовара.Цена;
		
		НоваяНоменклатура.Комментарий = СтрШаблон("Зарегистрирована %1", Формат(ТекущаяДатаСеанса(), "ДФ='dd.MM.yyyy HH:mm:ss'"));
		
		НоваяНоменклатура.Записать();
		
		Номенклатура = НоваяНоменклатура.Ссылка;

		// создание упаковки номенклатуры для базовой единицы
		УпаковкаДляШтук = Справочники.УпаковкиНоменклатуры.СоздатьЭлемент();
		УпаковкаДляШтук.Владелец = Номенклатура;
		УпаковкаДляШтук.ВидУчета = Перечисления.ВидыУчетаУпаковок.УпаковкаШтучногоТовара;
		
		УпаковкаДляШтук.ЕдиницаИзмерения = дсфОбщегоНазначенияЯндексМаркет.ЕдиницаИзмеренияШтук();
		УпаковкаДляШтук.Коэффициент = 1;

		УпаковкаДляШтук.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УпаковкаДляШтук.ЕдиницаИзмерения, "Наименование");
		УпаковкаДляШтук.НаименованиеПолное = УпаковкаДляШтук.Наименование;
		УпаковкаДляШтук.Масса = ОписаниеТовара.ВГХ["ВесБруттоКг"];
		УпаковкаДляШтук.МассаНетто = ОписаниеТовара.ВГХ["ВесНеттоКг"];
		УпаковкаДляШтук.Высота = ОписаниеТовара.ВГХ["ВысотаСм"];
		УпаковкаДляШтук.Глубина = ОписаниеТовара.ВГХ["ДлинаСм"];
		УпаковкаДляШтук.Ширина = ОписаниеТовара.ВГХ["ШиринаСм"];
		УпаковкаДляШтук.Объем = СлужебныйКлиентСервер.ОбъемПоРазмерам(УпаковкаДляШтук.Ширина,
																		УпаковкаДляШтук.Глубина,
																		УпаковкаДляШтук.Высота,
																		КоэффициентПересчетаОбъема);

		УпаковкаДляШтук.Записать();
		
		// создание упаковки, если КоличествоЕдиницТовараВУпаковке > 0
		//ОписаниеЭлемента.Вставить("КоличествоЕдиницТовараВУпаковке", 0); // в шт, больше 0
		//ОписаниеЭлемента.Вставить("КоличествоКоробокДляЕдиницыТовара", 0); // в шт, больше 0

		// партия номенклатуры

		// актуализация штрихкодов
		ОбновитьШтрихкодыНоменклатуры(Номенклатура, ОписаниеТовара.Штрихкоды, УпаковкаДляШтук.Ссылка);
		
				
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(дсфВходящиеЗапросыЯндексМаркет.ИмяСобытияЖурналаРегистрации(),
								УровеньЖурналаРегистрации.Ошибка,
								Метаданные.HTTPСервисы.дсфFulfillmentYandexMarket,,
								ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
								
		Ошибки.Добавить(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат Номенклатура;

КонецФункции

Процедура ОбновитьНоменклатуруНаОснованииДанныхРеестра(Номенклатура, ОписаниеТовара, Ошибки) Экспорт
	НачатьТранзакцию();
	
	Попытка
		Если ЗначениеЗаполнено(ОписаниеТовара.Наименование) Тогда
			НаименованиеНоменклатуры = ОписаниеТовара.Наименование;
			
		ИначеЕсли ЗначениеЗаполнено(ОписаниеТовара.Описание) Тогда
			НаименованиеНоменклатуры = ОписаниеТовара.Описание;

		КонецЕсли;
		
		ТекущееНаименованиеНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "Наименование");
		
		Если НаименованиеНоменклатуры <> ТекущееНаименованиеНоменклатуры Тогда
			// обновление наименования
			НоменклатураОбъект = Номенклатура.ПолучитьОбъект();
			НоменклатураОбъект.Наименование = НаименованиеНоменклатуры;
			НоменклатураОбъект.НаименованиеПолное = НаименованиеНоменклатуры;
			
			НоменклатураОбъект.Комментарий = СтрШаблон("Обновлена %1", Формат(ТекущаяДатаСеанса(), "ДФ='dd.MM.yyyy HH:mm:ss'"));
	
			НоменклатураОбъект.Записать();
			
		КонецЕсли;
		
		// упаковка для штук
		УпаковкаДляШтук = НоменклатураУпаковкаДляШтук(Номенклатура);
					
		// создание упаковки, если КоличествоЕдиницТовараВУпаковке > 0
		
		// актуализация штрихкодов
		ОбновитьШтрихкодыНоменклатуры(Номенклатура, ОписаниеТовара.Штрихкоды, УпаковкаДляШтук);
		
		
		// партия номенклатуры
		
		//ОписаниеЭлемента.Вставить("КоличествоЕдиницТовараВУпаковке", 0); // в шт, больше 0
		//ОписаниеЭлемента.Вставить("КоличествоКоробокДляЕдиницыТовара", 0); // в шт, больше 0
	
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(дсфВходящиеЗапросыЯндексМаркет.ИмяСобытияЖурналаРегистрации(),
								УровеньЖурналаРегистрации.Ошибка,
								Метаданные.HTTPСервисы.дсфFulfillmentYandexMarket,,
								ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
								
		Ошибки.Добавить(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры 

// Устарела. Использовать дсфНоменклатураАпи.ОбновитьШтрихкодыНоменклатуры
// Процедура - Обновить штрихкоды номенклатуры
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - 
//  Штрихкоды	 - Массив - см. НовоеОписаниеШтрихкода
//  Упаковка	 - СправочникСсылка.УпаковкиНоменклатуры - 
//
Процедура ОбновитьШтрихкодыНоменклатуры(Номенклатура, Штрихкоды, Упаковка = Неопределено) Экспорт
	дсфНормативноСправочнаяИнформацияАпи.ОбновитьШтрихкодыНоменклатуры(Номенклатура, Штрихкоды, Упаковка);
	
КонецПроцедуры

// Функция - Определить элементы справочников для строки плана поступления
//
// Параметры:
//  ОписаниеТовара		 - Структура - см. dsf_СозданиеОбновлениеДанныхЯндексМаркет.НовоеОписаниеЭлементаСпискаТоваровВРеестре
//  ЭлементыСправочников - Структура - см. dsf_СозданиеОбновлениеДанныхЯндексМаркет.СтрокаПлановПоступленияЗначенияСправочников
//  Ошибки				 - Массив
// 
// Возвращаемое значение:
//   - Булево
//
Функция ОпределитьЭлементыСправочниковДляСтрокиПлана(ОписаниеТовара, ЭлементыСправочников, Ошибки) Экспорт
	
	// номенклатура
	АртикулНоменклатуры = ОписаниеТовара.Идентификаторы.Получить(Перечисления.дсфТипыИдентификаторовЯндексМаркет.ARTICLE);
	Если НЕ ЗначениеЗаполнено(АртикулНоменклатуры) Тогда
		Ошибки.Добавить(СтрШаблон("Для товара % не указано значение ARTICLE", ОписаниеТовара.Наименование));
		
		Возврат Ложь;
		
	КонецЕсли; 
	
	// поиск выполняется по добавленному в расширении реквизиту
	// если длина артикула будет превышать 25 символов
	Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("дсфАртикулПолный", АртикулНоменклатуры);
	
	Если Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
		// создание новой номенклатуры
		Номенклатура = НоваяНоменклатураНаОснованииДанныхРеестра(ОписаниеТовара, Ошибки);
		
	Иначе
		// обновление данных о существующей
		ОбновитьНоменклатуруНаОснованииДанныхРеестра(Номенклатура, ОписаниеТовара, Ошибки);
		
	КонецЕсли;
	
	ЭлементыСправочников["Номенклатура"] = Номенклатура;
	
	ОбъектыХранения = КонвертацияДокументов.ПолучитьОбъектыХраненияНоменклатуры(Номенклатура).ВыгрузитьКолонку("ОбъектХранения");
	
	Если ОбъектыХранения.Количество() > 0 Тогда
		ЭлементыСправочников["ОбъектХранения"] = ОбъектыХранения[0];

	КонецЕсли;
	
	ЭлементыСправочников["УпаковкаНоменклатуры"] = НоменклатураУпаковкаДляШтук(Номенклатура);
	ЭлементыСправочников["Упаковка"] = Справочники.УпаковкиНоменклатуры.НайтиУпаковку(ЭлементыСправочников["ОбъектХранения"],
																			ЭлементыСправочников["УпаковкаНоменклатуры"]);

		
	//ЗначенияСправочников.Вставить("Состояние", Справочники.СостоянияОбъектовХранения.ПустаяСсылка());
	
	//ЭлементыСправочников["Партия"] = Неопределено;
	//ЭлементыСправочников["ПартияНоменклатуры"] = Неопределено;

	Возврат Истина;
	
КонецФункции

Функция НоменклатураУпаковкаДляШтук(Номенклатура) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	УпаковкиНоменклатуры.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	               |ГДЕ
	               |	УпаковкиНоменклатуры.Владелец = &Владелец
	               |	И УпаковкиНоменклатуры.ЕдиницаИзмерения = &ЕдиницаИзмерения";
	
	Запрос.УстановитьПараметр("Владелец", Номенклатура);
	Запрос.УстановитьПараметр("ЕдиницаИзмерения", дсфОбщегоНазначенияЯндексМаркет.ЕдиницаИзмеренияШтук());
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	УпаковкаДляШтук = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
		
	КонецЦикла;
	
	Возврат Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
	
КонецФункции	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Код процедур и функций
#КонецОбласти