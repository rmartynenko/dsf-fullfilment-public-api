///////////////////////////////////////////////////////////////////////////////////////////////////////
// Модуль логирования HTTP запросов, как входящих, так и исходящих.
// Лог запроса пишется в журнал под событием ЛогированиеHTTPЗапросов.
// Лог формируется в следующем ввиде:
// 		[ДатаВремяНачала ПримерноеВремяЗапроса] МетодHTTPЗапроса URL
// 		ЗаголовкиЗапроса
// 		ТелоЗапроса
// 		КодСостония
// 		ЗаголовкиОтвета
// 		ТелоОтвета
// 
// Пример:
// 		[22.04.2024 11:26:11 ~0.109s] GET https://example.ru/
// 		200
// 		{"data":["1","2","3"]}
// 
// ЗаголовкиЗапроса и ЗаголовкиОтвета пишутся в лог, если их в явном виде включить через ФиксироватьЗаголовки,
// по умолчанию выключены.
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует структуру для логирование http запросов,
//
// Параметры:
// 		РесурсHTTPЗапроса - Любая ссылка - Ссылка в разрезе которой фиксируем лог
//
// Возвращаемое значение:
// 		Структура - Подготовленная структура данных.
//
Функция ОткрытьЛогHTTPЗапроса(РесурсHTTPЗапроса) Экспорт
		
	Параметры = Новый Структура("РесурсHTTPЗапроса,
								|Включено,
								|МетодHTTPЗапроса,
								|ВнешняяСсылка,
								|ЗаголовкиИсх,
								|ЗаголовкиВх,
								|ТелоЗапроса,
								|ТелоОтвета,
								|ФиксироватьЗаголовки,
								|ТелоОтветаВBase64,
								|ОграничениеБайт,
								|ТипСобытия,
								|ВремяНачало,
								|ВремяОкончания");
	
	Параметры.РесурсHTTPЗапроса = РесурсHTTPЗапроса;
	Параметры.ФиксироватьЗаголовки = Ложь;
	Параметры.ТелоОтветаВBase64 = Ложь;
		
	Если Параметры.Включено = Неопределено Тогда
		Параметры.Включено = РесурсHTTPЗапроса <> Неопределено;
	КонецЕсли;
	
	Если Параметры.ОграничениеБайт = Неопределено Тогда
		// Примерный максимиум байт, которые можем сохранить
		Параметры.ОграничениеБайт = 5242880; // 5Mb
		
	КонецЕсли; 
	
	НачатьЗамерВремени(Параметры);
	
	Возврат Параметры;
	
КонецФункции

// Записывает http запрос в журнал регистрации и возвращает текст сформированный для журнала.
// При этом, в некоторых случаях, если запрос возвращает файл, то он не сохраняется в ЖР, чтобы не повесить его.
//
// Параметры:
// 		Параметры - Структура - возвращенная функцией ОткрытьЛогHTTPЗапроса()
// 		ОтветHTTP - HTTPОтвет - ответ HTTP-сервера на запрос 
//						или ФиксированаяСтруктура - результат ответа КлиентHTTPКлиентСервер
//
// Возвращаемое значение:
// 		Строка - сообщение сформированное для журнала регистрации.
//
Функция ЗакрытьЛогHTTPЗапроса(Параметры, ОтветHTTP) Экспорт
		
	Если Параметры.Включено = Ложь Тогда
		Возврат "";
	КонецЕсли;
	
	УстановитьУровеньЖР(Параметры, УровеньЖурналаРегистрации.Информация);
			
	МассивСтрок = Новый Массив;
	
	ВставитьШапкуЗапросаHTTP(МассивСтрок, Параметры); 		
	ВставитьЗаголовкиЗапросаHTTP(МассивСтрок, Параметры);
	ВставитьТелоЗапросаHTTP(МассивСтрок, Параметры); 	
	ВставитьЗаголовкиОтветаHTTP(МассивСтрок, Параметры, ОтветHTTP);
	ВставитьТелоОтветаHTTP(МассивСтрок, Параметры, ОтветHTTP);
	
	Возврат СообщениеВЖурналРегистрации(МассивСтрок, Параметры);
	
КонецФункции

// Записывает ошибку http запроса в журнал регистрации и возвращает текст сформированный для журнала.
// Ошибка могут возникнуть из-за отсутствия интернета и т.п.
// Т.е. у нас по факту нету данных по ответу в запросе
//
// Параметры:
// 		Параметры - Структура - возвращенная функцией ОткрытьЛогHTTPЗапроса()
// 		ТекстОшибки - Строка - краткое представление ошибки
//
// Возвращаемое значение:
// 		Строка - сообщение сформированное для журнала регистрации.
//
Функция ЗакрытьЛогHTTPЗапросаСОшибкой(Параметры, ТекстОшибки) Экспорт
	
	Если Параметры.Включено = Ложь Тогда
		Возврат "";
	КонецЕсли; 
	
	УстановитьУровеньЖР(Параметры, УровеньЖурналаРегистрации.Ошибка);
	
	МассивСтрок = Новый Массив;
	
	ВставитьШапкуЗапросаHTTP(МассивСтрок, Параметры);
	ВставитьЗаголовкиЗапросаHTTP(МассивСтрок, Параметры);
	ВставитьТелоЗапросаHTTP(МассивСтрок, Параметры);
		
	МассивСтрок.Добавить(ТекстОшибки);
		
	Возврат СообщениеВЖурналРегистрации(МассивСтрок, Параметры);

КонецФункции

// Формирует полный URL из входящего запроса
//
// Параметры:
// 		Параметры - Структура - возвращенная функцией ОткрытьЛогHTTPЗапроса()
// 		ЗапросHTTP - HTTPСервисЗапрос - входящий HTTP запрос
//
Процедура УстановитьURLИзВхЗапроса(Параметры, ЗапросHTTP) Экспорт
	
	Если Параметры.Включено = Ложь Тогда
		Возврат;
	КонецЕсли; 
	
	МассивПараметровЗапроса = Новый Массив;
	
	Для каждого ПараметрЗапроса Из ЗапросHTTP.ПараметрыЗапроса Цикл
		МассивПараметровЗапроса.Добавить(ПараметрЗапроса.Ключ + "=" + ПараметрЗапроса.Значение);
	КонецЦикла; 
	
	Если МассивПараметровЗапроса.Количество() = 0 Тогда
		СтрокаПараметров = "";
	Иначе
		СтрокаПараметров = "?" + СтрСоединить(МассивПараметровЗапроса, "&");
	КонецЕсли; 
	
	Параметры.ВнешняяСсылка = ЗапросHTTP.БазовыйURL + ЗапросHTTP.ОтносительныйURL + СтрокаПараметров;
	
КонецПроцедуры 

Процедура УстановитьURL(Параметры, ВнешняяСсылка) Экспорт
	
	Параметры.ВнешняяСсылка = ВнешняяСсылка;
	
КонецПроцедуры 

Процедура УстановитьТелоЗапроса(Параметры, ТелоЗапроса) Экспорт
	
	Параметры.ТелоЗапроса = ТелоЗапроса;
	
КонецПроцедуры 

Процедура УстановитьЗаголовкиИсх(Параметры, Заголовки) Экспорт
	
	Параметры.ЗаголовкиИсх = Заголовки;
	
КонецПроцедуры 

Процедура ФиксироватьЗаголовки(Параметры, Фиксировать = Истина) Экспорт
	
	Параметры.ФиксироватьЗаголовки = Фиксировать;
	
КонецПроцедуры 

Процедура ТелоОтветаСохранитьВBase64(Параметры, СохранитьВBase64 = Истина) Экспорт
	
	// Бывает, что ответ возращает файл в двоичных данных и если переводить в строку, 
	// то будет не определенный набор символов.
	// Такой набор сохранится в журнал, но обратно в двоичные данные его не конвернуть.
	// Чтобы была возможность снова преобразовать в двоичные данные, тело мы сохраняем в Base64.
	// Пример файла - любой pdf
	Параметры.ТелоОтветаВBase64 = СохранитьВBase64;
	
КонецПроцедуры 

Процедура УстановитьМетодHTTPЗапроса(Параметры, МетодHTTPЗапроса) Экспорт
	
	Параметры.МетодHTTPЗапроса = МетодHTTPЗапроса;
	
КонецПроцедуры 

Процедура УстановитьМетодHTTPЗапросаGET(Параметры) Экспорт
	
	Параметры.МетодHTTPЗапроса = "GET";
	
КонецПроцедуры 

Процедура УстановитьМетодHTTPЗапросаPOST(Параметры) Экспорт
	
	Параметры.МетодHTTPЗапроса = "POST";
	
КонецПроцедуры

Процедура НачатьЗамерВремени(Параметры) Экспорт
	
	Параметры.ВремяНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
КонецПроцедуры 

Процедура ВыключитьЛогирование(Параметры) Экспорт
	
	Параметры.Включено = Ложь;
	
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВставитьШапкуЗапросаHTTP(МассивСтрок, Параметры)
	
	Параметры.ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ДатаНачалаЗапроса = (Дата("00010101") + Параметры.ВремяНачало / 1000) + 10800;
	
	ШапкаЗапроса = СтрШаблон("[%3 ~%4] %1 %2", 
		Параметры.МетодHTTPЗапроса, 
		Параметры.ВнешняяСсылка,
		ДатаНачалаЗапроса,
		ПродолжительностьВремениСтрокой(Параметры.ВремяНачало, Параметры.ВремяОкончания));
		
	МассивСтрок.Добавить(ШапкаЗапроса);
	
КонецПроцедуры

Процедура ВставитьЗаголовкиЗапросаHTTP(МассивСтрок, Параметры)
	
	Если Параметры.ФиксироватьЗаголовки И Параметры.ЗаголовкиИсх <> Неопределено Тогда
		Для каждого Строка Из Параметры.ЗаголовкиИсх Цикл
			МассивСтрок.Добавить(СтрШаблон("%1: %2", Строка.Ключ, Строка.Значение));
		КонецЦикла;
	КонецЕсли; 

КонецПроцедуры  

Процедура ВставитьТелоЗапросаHTTP(МассивСтрок, Параметры)
	
	Если Параметры.ТелоЗапроса = Неопределено Тогда
		ТелоЗапроса = "";
		
	Иначе
		ОбрезатьДанныеПриНеобходимости(Параметры, Параметры.ТелоЗапроса);
		ТелоЗапроса = Параметры.ТелоЗапроса;
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ТелоЗапроса) Тогда
		МассивСтрок.Добавить(ТелоЗапроса);
	КонецЕсли;
	
	
КонецПроцедуры 
 
Процедура ВставитьЗаголовкиОтветаHTTP(МассивСтрок, Параметры, ОтветHTTP)
	
	Если ОтветHTTP = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрок.Добавить(ОтветHTTP.КодСостояния);
	
	ФиксироватьЗаголовки = Параметры.ФиксироватьЗаголовки
		// Фиксируем заголовки всегда, когда получаем эти статусы, так как там нужная информация присутствует
		Или ОтветHTTP.КодСостояния = 301 // КлиентHTTPПовтИсп.КодСостоянияПеремещен() 							
		Или ОтветHTTP.КодСостояния = 302 // КлиентHTTPПовтИсп.КодыСостояния().Перенаправления.Найден 		
		Или ОтветHTTP.КодСостояния = 429 // СлишкомМногоЗапросов; 												
		;
		
	Если ФиксироватьЗаголовки Тогда
		Для каждого Строка Из ОтветHTTP.Заголовки Цикл
			МассивСтрок.Добавить(СтрШаблон("%1: %2", Строка.Ключ, Строка.Значение));
		КонецЦикла;
	КонецЕсли; 
	
	// из-за особенностей реализаци асинхронной обработки в текущей реализации модуля
	// 302 код не относим к ошибкам
	Если ОтветHTTP.КодСостояния = 302 Тогда
		УстановитьУровеньЖР(Параметры, УровеньЖурналаРегистрации.Информация);

	ИначеЕсли ОтветHTTP.КодСостояния >= 300 Тогда  // КлиентHTTPПовтИсп.КодыСостояния().Перенаправления.МножественныйВыбор
		УстановитьУровеньЖР(Параметры, УровеньЖурналаРегистрации.Ошибка);
		
	КонецЕсли;

КонецПроцедуры

Процедура ВставитьТелоОтветаHTTP(МассивСтрок, Параметры, ОтветHTTP)
	
	Перем ВариантКонтента;

	Если ОтветHTTP = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ТелоОтвета = "";
	
	#Область ТелоОтветаСтрокой 
	Для каждого Заголовок Из ОтветHTTP.Заголовки Цикл
		Если НРег(Заголовок.Ключ) = "content-disposition" Тогда
			ВариантКонтента = НРег(Заголовок.Значение);
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	
	КонтентЭтоФайл = Ложь;
	Если ВариантКонтента <> Неопределено Тогда
		КонтентЭтоФайл = // Проверим, является ли контент файлом 			
			// Content-Disposition: attachment; filename="example.xml"
			СтрНайти(ВариантКонтента, "attachment") <> 0
			// Content-Disposition: form-data; name="file"; filename="example.xml"
			Или СтрНайти(ВариантКонтента, "name=""file""") <> 0;
	КонецЕсли; 
	
	ДанныеТелаОтвета = ДанныеТелаОтвета(Параметры, ОтветHTTP);
	
	Если КонтентЭтоФайл И Не Параметры.ТелоОтветаВBase64 Тогда
		ТелоОтвета = СтрШаблон("%1 Размер: %2 байт", ВариантКонтента, ДанныеТелаОтвета.Размер); 
	Иначе
		ТелоОтвета = ДанныеТелаОтвета.ТелоОтвета;
	КонецЕсли;
	#КонецОбласти 
	
	Если ЗначениеЗаполнено(ТелоОтвета) Тогда
		МассивСтрок.Добавить(ТелоОтвета);	
	КонецЕсли; 
		
КонецПроцедуры 

Функция СообщениеВЖурналРегистрации(МассивСтрок, Параметры)
	
	СообщениеЖР = СтрСоединить(МассивСтрок, Символы.ПС); 
	
	СообщениеЖР = МаскированныйРезультат(СообщениеЖР);
	
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), 
							Параметры.УровеньЖР, 
							, 
							Параметры.РесурсHTTPЗапроса, 
							СообщениеЖР);
		
	Возврат СообщениеЖР;
	
КонецФункции
 
Функция ДанныеТелаОтвета(Параметры, ОтветHTTP)
	Размер = Неопределено;
	
	Если ТипЗнч(ОтветHTTP) = Тип("ФиксированнаяСтруктура") Тогда
		
		Если ТипЗнч(ОтветHTTP.Тело) = Тип("ДвоичныеДанные") Тогда 
			Если Параметры.ТелоОтветаВBase64 
				И ОтветHTTP.КодСостояния = 200 Тогда // КлиентHTTPПовтИсп.КодСостоянияУспешно()
				// Сохраняем только при успешном выполнении
				ТелоОтвета = Base64Строка(ОтветHTTP.Тело); 
			Иначе	
				ТелоОтвета = ПолучитьСтрокуИзДвоичныхДанных(ОтветHTTP.Тело);
			КонецЕсли; 
		Иначе
			ТелоОтвета = ОтветHTTP.Тело;
		КонецЕсли; 
		
	Иначе			
		Если Параметры.ТелоОтветаВBase64 
			И ОтветHTTP.КодСостояния = 200 Тогда
			ТелоОтвета = Base64Строка(ОтветHTTP.ПолучитьТелоКакДвоичныеДанные());
			
		Иначе
			ТелоОтвета = ОтветHTTP.ПолучитьТелоКакСтроку();
			
			СтрокаContentType = ОтветHTTP.Заголовки["Content-Type"];
			Если СтрНайти(СтрокаContentType, "application/json") Тогда
				ТелоОтвета = ПодготовитьJsonСтрокуОтветаДляЗаписиВЛог(ТелоОтвета);
				
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	Если Размер = Неопределено И ТелоОтвета <> Неопределено Тогда
		
		ОбрезатьДанныеПриНеобходимости(Параметры, ТелоОтвета, Размер);
		
	КонецЕсли; 
	
	Возврат Новый Структура("ТелоОтвета, Размер", ТелоОтвета, Размер);
	
КонецФункции 

Процедура ОбрезатьДанныеПриНеобходимости(Параметры, Данные, Размер = Неопределено)
	
	Размер = ПолучитьДвоичныеДанныеИзСтроки(Данные).Размер();
	Если Размер > Параметры.ОграничениеБайт Тогда
		// Обрежем ТелоЗапроса, чтобы не нагружать журнал
		Данные = Лев(Данные, 4000000) + "(...)";
		
	КонецЕсли;
	
КонецПроцедуры 

Процедура УстановитьУровеньЖР(Параметры, Уровень)
	
	Параметры.Вставить("УровеньЖР", Уровень);
	
КонецПроцедуры

Функция ПродолжительностьВремениСтрокой(Параметр1, Параметр2) Экспорт
	
	РазницаВремени = Параметр2 - Параметр1;
	РазницаВремени = РазницаВремени / 1000;
	Миллисекунды = (РазницаВремени - Цел(РазницаВремени)) ;
		
	Если РазницаВремени = 0 Тогда
		Продолжительность = "0.000";
	Иначе
		Продолжительность = СтрШаблон("%1%2s", 
			XMLСтрока(Цел(РазницаВремени)),
			Формат(Миллисекунды, "ЧЦ=3; ЧДЦ=3; ЧРД=.; ЧН=.000; ДЛФ=T"));	
	КонецЕсли; 
	
	Возврат Продолжительность;
	
КонецФункции

Функция ИмяСобытияЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'AOne.HTTP.Log'");
	
КонецФункции

Функция МаскированныйРезультат(Данные) Экспорт
	
	Данные = ВырезатьМаскированныйФрагмент(Данные, """login""");
	Данные = ВырезатьМаскированныйФрагмент(Данные, """password""");
	Данные = ВырезатьМаскированныйФрагмент(Данные, """access_token""");
	Данные = ВырезатьМаскированныйФрагмент(Данные, """refresh_token""");
	Данные = ВырезатьМаскированныйФрагмент(Данные, """Authorization""");

	Возврат Данные;
	
КонецФункции

Функция ВырезатьМаскированныйФрагмент(Данные, Фрагмент)
	
	НачальнаяПозиция = СтрНайти(Данные, Фрагмент); // >>"<<key": "value"
	
	Если НачальнаяПозиция > 0 Тогда 
		
		НачальнаяПозиция = СтрНайти(Данные, """", , НачальнаяПозиция + 1); // "key>>"<<: "value"
		НачальнаяПозиция = СтрНайти(Данные, """", , НачальнаяПозиция + 1); // "key": >>"<<value"
		
		НовыеДанные = Лев(Данные, НачальнаяПозиция) + "********";
		
		КонечнаяПозциция = СтрНайти(Данные, """", , НачальнаяПозиция + 1); // "key": "value>>"<<
		
		// Частный случай поиска экранированных ковычек, что в json соответствует обычной кавычке.
		Пока Сред(Данные, КонечнаяПозциция - 1, 1) = "\" Цикл // "key": "value1>>\<<"value2"
			КонечнаяПозциция = СтрНайти(Данные, """", , КонечнаяПозциция + 1); // "key": "value1\"value2>>"<<
		КонецЦикла;
		
		Если КонечнаяПозциция > 0 Тогда
			НовыеДанные = НовыеДанные + Сред(Данные, КонечнаяПозциция);
		КонецЕсли;
		
		Данные = НовыеДанные;
		
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

// В некоторых случаях при чтении тела ответа не удается правильно записать в ЖР строку с кириллическими символами
// Но при чтении в json проблема отсутствует
// поэтому данная функция пытается перевести исходную строку в читаемый вид через попытку чтения строки как json
// и помещения полученногообъекта обратно в строку
//
// Параметры:
//  СтрокаСодержимогоОтвета	 - Строка - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПодготовитьJsonСтрокуОтветаДляЗаписиВЛог(СтрокаСодержимогоОтвета)
	
	Если ЗначениеЗаполнено(СтрокаСодержимогоОтвета) Тогда
		Данные = аргмКоннекторHttpA1.JsonВОбъект(СтрокаСодержимогоОтвета);
		
		Содержимое = аргмКоннекторHttpA1.ОбъектВJson(Данные);
		
	Иначе
		Содержимое = "";
		
	КонецЕсли;
	
	Возврат Содержимое;
	
КонецФункции

#КонецОбласти