#Область ПрограммныйИнтерфейс

Функция НовыйРезультатПроверкиИдемпотентностиЗапроса() Экспорт
	РезультатПроверки = Новый Структура;
	
	РезультатПроверки.Вставить("КлючИдемпотентности", "");
	РезультатПроверки.Вставить("ЭтоПовторныйЗапрос", Ложь);
	РезультатПроверки.Вставить("ЕстьОшибкиПриПроверке", Ложь);
	РезультатПроверки.Вставить("ТекстОшибки", "");
	РезультатПроверки.Вставить("Данные", Неопределено);
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция НовоеОписаниеВходящегоЗапроса() Экспорт
	ОписаниеВходящегоЗапроса = Новый Структура; 
	ОписаниеВходящегоЗапроса.Вставить("HTTPМетод", "");
	ОписаниеВходящегоЗапроса.Вставить("БазовыйURL", "");
	ОписаниеВходящегоЗапроса.Вставить("ОтносительныйURL", "");
	ОписаниеВходящегоЗапроса.Вставить("Заголовки", Неопределено);
	ОписаниеВходящегоЗапроса.Вставить("ПараметрыЗапроса", Неопределено);
	ОписаниеВходящегоЗапроса.Вставить("ПараметрыURL", Неопределено); 
	ОписаниеВходящегоЗапроса.Вставить("Тело", Неопределено);
	ОписаниеВходящегоЗапроса.Вставить("РазмерТелаЗапроса", 0);
	ОписаниеВходящегоЗапроса.Вставить("ПравилоОбработки", Неопределено);
	ОписаниеВходящегоЗапроса.Вставить("Клиент", Неопределено);
	ОписаниеВходящегоЗапроса.Вставить("КлючАпи", "");
	ОписаниеВходящегоЗапроса.Вставить("ТипЗапроса", "");
	ОписаниеВходящегоЗапроса.Вставить("ИдентификаторЗапроса", "");

	Возврат ОписаниеВходящегоЗапроса;
	
КонецФункции

Функция ОтветНаВходящийЗапрос(Запрос, ИмяПравилаОбработки = Неопределено, ОбрабатыватьАсинхронно = Ложь) Экспорт
	
	Ошибки = Новый Массив;

	Ответ = Новый HTTPСервисОтвет(200);
	
	ЛогЗапроса = аргмЛогированиеHttpA1.ОткрытьЛогHTTPЗапроса(Запрос.БазовыйURL + Запрос.ОтносительныйURL);
	аргмЛогированиеHttpA1.УстановитьМетодHTTPЗапроса(ЛогЗапроса, Запрос.HTTPМетод);
	аргмЛогированиеHttpA1.УстановитьЗаголовкиИсх(ЛогЗапроса, Запрос.Заголовки);
	аргмЛогированиеHttpA1.УстановитьURLИзВхЗапроса(ЛогЗапроса, Запрос);
	аргмЛогированиеHttpA1.УстановитьТелоЗапроса(ЛогЗапроса, Запрос.ПолучитьТелоКакСтроку());
	
	аргмЛогированиеHttpA1.НачатьЗамерВремени(ЛогЗапроса);
	
	Если ИмяПравилаОбработки = Неопределено Тогда
		Ответ = аргмОтветыНаЗапросыА1.ОтветЗапросОбработанУспешно();
		аргмЛогированиеHttpA1.ЗакрытьЛогHTTPЗапроса(ЛогЗапроса, Ответ);
		
		Возврат Ответ;
	
	КонецЕсли;
	
	ПравилоОбработки = аргмПравилаОбработкиВходящихЗапросовА1ПовтИсп.ПравилаОбработки().Получить(ИмяПравилаОбработки);
	
	Если ПравилоОбработки = Неопределено Тогда
		
		Ошибки.Добавить(СтрШаблон("Указано некорректное имя правила обработки запроса: %1",
										ИмяПравилаОбработки));
										
		Ответ = аргмОтветыНаЗапросыА1.ОтветЗапросНеОбработан(400, Ошибки);
		аргмЛогированиеHttpA1.ЗакрытьЛогHTTPЗапроса(ЛогЗапроса, Ответ);

		Возврат Ответ;
	
	КонецЕсли;
	
	КлиентАпи = Неопределено;
	Если ПравилоОбработки.ПроверятьНаличиеКлючаАпи Тогда
		КлючАпи = Запрос.Заголовки.Получить("X-API-Key");
	
		Если Не ЗначениеЗаполнено(КлючАпи) Тогда
			Ошибки.Добавить("В заголовке запроса отсутствует или не заполнен X-API-Key");
											
			Ответ = аргмОтветыНаЗапросыА1.ОтветЗапросНеОбработан(400, Ошибки);
			аргмЛогированиеHttpA1.ЗакрытьЛогHTTPЗапроса(ЛогЗапроса, Ответ);

			Возврат Ответ;
		
		КонецЕсли;
		
		// получение клиента по ключу api
		КлиентАпи = РегистрыСведений.дсфНастройкиДоступаКАпи.КлиентПоКлючуАпи(КлючАпи);
		
		Если КлиентАпи = Неопределено Тогда
			Ошибки.Добавить("В заголовке запроса передан незарегистрированный X-API-Key");
											
			Ответ = аргмОтветыНаЗапросыА1.ОтветЗапросНеОбработан(400, Ошибки);
			аргмЛогированиеHttpA1.ЗакрытьЛогHTTPЗапроса(ЛогЗапроса, Ответ);

			Возврат Ответ;
		
		КонецЕсли;
		
	КонецЕсли;
	
	ОписаниеЗапроса = ОписаниеВходящегоЗапроса(Запрос, ПравилоОбработки, КлиентАпи);
		
	Если ПравилоОбработки.ПроверятьНаличиеТелаЗапроса И ОписаниеЗапроса.РазмерТелаЗапроса = 0 Тогда
		Ошибки.Добавить("HTTP Error 400. The request is badly formed. Передано пустое тело запроса.");
										
		Ответ = аргмОтветыНаЗапросыА1.ОтветЗапросНеОбработан(400, Ошибки);
		аргмЛогированиеHttpA1.ЗакрытьЛогHTTPЗапроса(ЛогЗапроса, Ответ);

		Возврат Ответ;

	КонецЕсли;
	
	Ресурс = ОписаниеЗапроса.ОтносительныйURL;
	Метод  = ОписаниеЗапроса.HTTPМетод;
	
	КлючИдемпотентностиДляЖурнала = "";
	
	// идемпотентность запроса
	Если ПравилоОбработки.ПроверятьИдемпотентность Тогда
		
		КлючИдемпотентности = КлючИдемпотентностиЗапроса(ОписаниеЗапроса);

		РезультатПроверкиНаИдемпотентность = РезультатПроверкиИдемпотентностиЗапроса(КлючИдемпотентности, Ресурс, Метод, КлиентАпи);
		
		Если РезультатПроверкиНаИдемпотентность.ЕстьОшибкиПриПроверке Тогда
			
			Ошибки.Добавить(РезультатПроверкиНаИдемпотентность.ТекстОшибки);
										
			Ответ = аргмОтветыНаЗапросыА1.ОтветЗапросНеОбработан(400, Ошибки);
			аргмЛогированиеHttpA1.ЗакрытьЛогHTTPЗапроса(ЛогЗапроса, Ответ);
			
			Возврат Ответ;
			
		КонецЕсли;
			
		Если РезультатПроверкиНаИдемпотентность.ЭтоПовторныйЗапрос Тогда
			
			Ответ = аргмОтветыНаЗапросыА1.ОтветНаПовторныйЗапрос(РезультатПроверкиНаИдемпотентность.Данные);
			аргмЛогированиеHttpA1.ЗакрытьЛогHTTPЗапроса(ЛогЗапроса, Ответ);
			
			Возврат Ответ;
	
		КонецЕсли;
		
		КлючИдемпотентностиДляЖурнала = РезультатПроверкиНаИдемпотентность.КлючИдемпотентности;

	КонецЕсли;
	
	// подготовка данных запроса к дальнейшей обработке
	ИдентификаторЗапроса = Новый УникальныйИдентификатор;
	
	Если Не ЗначениеЗаполнено(КлючИдемпотентностиДляЖурнала) Тогда
		КлючИдемпотентностиДляЖурнала = XMLСтрока(ИдентификаторЗапроса);
		
	КонецЕсли;
	
	// обработка запроса и формирование ответа
	ВозниклоИсключениеПриОбработке = Ложь;

	НачатьТранзакцию();
	Попытка
		// запись в журнал запросов, статус задания "Принят"
		НоваяЗапись = РегистрыСведений.аргмЖурналВходящихHttpЗапросовА1.НоваяЗаписьЖурнала();
	
		НоваяЗапись["ИдентификаторЗапроса"] = ИдентификаторЗапроса;
		НоваяЗапись["Ресурс"] = Ресурс;
		НоваяЗапись["Метод"] = Метод;
		НоваяЗапись["Клиент"] = ОписаниеЗапроса.Клиент;
		НоваяЗапись["КлючИдемпотентности"] = КлючИдемпотентностиДляЖурнала;
		НоваяЗапись["Запрос"] = ОписаниеЗапроса;
		НоваяЗапись["Асинхронный"] = ОбрабатыватьАсинхронно;
		НоваяЗапись["БазовыйURL"] = ОписаниеЗапроса.БазовыйURL;
		НоваяЗапись["ТипЗапроса"] = ОписаниеЗапроса.ТипЗапроса;
		
		РегистрыСведений.аргмЖурналВходящихHttpЗапросовА1.ДобавитьЗаписьВЖурнал(НоваяЗапись);

		Если ОбрабатыватьАсинхронно Тогда
			
			аргмОбработкаВходящихЗапросовА1.ЗапуститьОбработкуЗапроса(НоваяЗапись, ОписаниеЗапроса);

			// ответ с данными для получения результатов запроса
			Ответ = аргмОтветыНаЗапросыА1.ОтветСостояниеНовогоЗапроса(ИдентификаторЗапроса,
																ОписаниеЗапроса.БазовыйURL);
			
		Иначе			
			РезультатОбработкиЗапроса = РегистрыСведений.аргмЖурналВходящихHttpЗапросовА1.ОбработатьЗапрос(НоваяЗапись,
																									ОписаниеЗапроса);
																									
			ОписаниеОтвета = РезультатОбработкиЗапроса.ОписаниеОтвета;
			СостояниеОбработки = РезультатОбработкиЗапроса.Состояние;
			
			Если РезультатОбработкиЗапроса.ОбработанУспешно Тогда
				// формирование ответа
				Ответ = аргмОтветыНаЗапросыА1.ОтветРезультатОбработкиЗапросаПоОписанию(ОписаниеОтвета,
																					ИдентификаторЗапроса,
																					СостояниеОбработки);

			Иначе
				Ответ = аргмОтветыНаЗапросыА1.ОтветЗапросНеОбработан(400, РезультатОбработкиЗапроса.Ошибки);
	
			КонецЕсли;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();

		КонецЕсли;
				
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(),
								УровеньЖурналаРегистрации.Ошибка,
								Метаданные.HTTPСервисы.дсфFulfillmentPublicApi,,
								ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
								
		ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
					
		Ошибки.Добавить(ТекстОшибки);
		
		Ответ = аргмОтветыНаЗапросыА1.ОтветИсключениеВоВремяОбработкиЗапроса(Ошибки);

		ВозниклоИсключениеПриОбработке = Истина;

	КонецПопытки;	
		
	Если Не ВозниклоИсключениеПриОбработке Тогда
		аргмЛогированиеHttpA1.ЗакрытьЛогHTTPЗапроса(ЛогЗапроса, Ответ);
		
	Иначе
		аргмЛогированиеHttpA1.ЗакрытьЛогHTTPЗапросаСОшибкой(ЛогЗапроса,
														"Информацию об ошибке см. в журнале регистрации.");

	КонецЕсли;
	
	Возврат Ответ;

КонецФункции	

Функция ОтветНаЗапросСостоянияОбработки(Запрос) Экспорт

	Ошибки = Новый Массив;
	
	ЛогЗапроса = аргмЛогированиеHttpA1.ОткрытьЛогHTTPЗапроса(Запрос.БазовыйURL + Запрос.ОтносительныйURL);
	аргмЛогированиеHttpA1.УстановитьМетодHTTPЗапроса(ЛогЗапроса, Запрос.HTTPМетод);
	аргмЛогированиеHttpA1.УстановитьЗаголовкиИсх(ЛогЗапроса, Запрос.Заголовки);
	аргмЛогированиеHttpA1.УстановитьURLИзВхЗапроса(ЛогЗапроса, Запрос);
	аргмЛогированиеHttpA1.УстановитьТелоЗапроса(ЛогЗапроса, Запрос.ПолучитьТелоКакСтроку());
	
	аргмЛогированиеHttpA1.НачатьЗамерВремени(ЛогЗапроса);
		
	ВходящийИдентификаторЗапроса = Запрос.ПараметрыURL.Получить("RequestId");
	
	Если Не ЗначениеЗаполнено(ВходящийИдентификаторЗапроса) Тогда
		
		Ошибки.Добавить("Не передан параметр url c идентификатором запроса");
										
		Ответ = аргмОтветыНаЗапросыА1.ОтветЗапросНеОбработан(400, Ошибки);
		аргмЛогированиеHttpA1.ЗакрытьЛогHTTPЗапроса(ЛогЗапроса, Ответ);

		Возврат Ответ;
	
	КонецЕсли;
	
	Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ВходящийИдентификаторЗапроса) Тогда
		ИдентификаторЗапроса = Новый УникальныйИдентификатор(ВходящийИдентификаторЗапроса);
		
	Иначе
		Ошибки.Добавить(СтрШаблон("Значение переданного идентификатора запроса %1 не соответствует формату uuid",
								ВходящийИдентификаторЗапроса));
										
		Ответ = аргмОтветыНаЗапросыА1.ОтветЗапросНеОбработан(400, Ошибки);
		аргмЛогированиеHttpA1.ЗакрытьЛогHTTPЗапроса(ЛогЗапроса, Ответ);

		Возврат Ответ;
	
	КонецЕсли;	
	
	Ответ = аргмОтветыНаЗапросыА1.ОтветСостояниеОбработкиЗапроса(ИдентификаторЗапроса);
	аргмЛогированиеHttpA1.ЗакрытьЛогHTTPЗапроса(ЛогЗапроса, Ответ);
	
	Возврат Ответ;

КонецФункции

Функция ОтветНаЗапросРезультатаОбработки(Запрос) Экспорт

	Ошибки = Новый Массив;
	
	ЛогЗапроса = аргмЛогированиеHttpA1.ОткрытьЛогHTTPЗапроса(Запрос.БазовыйURL + Запрос.ОтносительныйURL);
	аргмЛогированиеHttpA1.УстановитьМетодHTTPЗапроса(ЛогЗапроса, Запрос.HTTPМетод);
	аргмЛогированиеHttpA1.УстановитьЗаголовкиИсх(ЛогЗапроса, Запрос.Заголовки);
	аргмЛогированиеHttpA1.УстановитьURLИзВхЗапроса(ЛогЗапроса, Запрос);
	аргмЛогированиеHttpA1.УстановитьТелоЗапроса(ЛогЗапроса, Запрос.ПолучитьТелоКакСтроку());
	
	аргмЛогированиеHttpA1.НачатьЗамерВремени(ЛогЗапроса);
		
	ВходящийИдентификаторЗапроса = Запрос.ПараметрыURL.Получить("RequestId");
	
	Если Не ЗначениеЗаполнено(ВходящийИдентификаторЗапроса) Тогда
		
		Ошибки.Добавить("Не передан параметр url c идентификатором запроса");
										
		Ответ = аргмОтветыНаЗапросыА1.ОтветЗапросНеОбработан(400, Ошибки);
		аргмЛогированиеHttpA1.ЗакрытьЛогHTTPЗапроса(ЛогЗапроса, Ответ);

		Возврат Ответ;
	
	КонецЕсли;
	
	Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ВходящийИдентификаторЗапроса) Тогда
		ИдентификаторЗапроса = Новый УникальныйИдентификатор(ВходящийИдентификаторЗапроса);
		
	Иначе
		Ошибки.Добавить(СтрШаблон("Значение переданного идентификатора запроса %1 не соответствует формату uuid",
								ВходящийИдентификаторЗапроса));
										
		Ответ = аргмОтветыНаЗапросыА1.ОтветЗапросНеОбработан(400, Ошибки);
		аргмЛогированиеHttpA1.ЗакрытьЛогHTTPЗапроса(ЛогЗапроса, Ответ);

		Возврат Ответ;
	
	КонецЕсли;	
	
	Ответ = аргмОтветыНаЗапросыА1.ОтветРезультатОбработкиЗапроса(ИдентификаторЗапроса);
	аргмЛогированиеHttpA1.ЗакрытьЛогHTTPЗапроса(ЛогЗапроса, Ответ);
	
	Возврат Ответ;

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ОписаниеВходящегоЗапроса(HttpЗапрос, ПравилоОбработки, Клиент = Неопределено) Экспорт
	ОписаниеЗапроса = НовоеОписаниеВходящегоЗапроса();
	
	ЗаполнитьЗначенияСвойств(ОписаниеЗапроса, HttpЗапрос);
	
	ОписаниеЗапроса.КлючАпи = HttpЗапрос.Заголовки.Получить("X-API-Key");
	ОписаниеЗапроса.ПравилоОбработки = ПравилоОбработки;
	ОписаниеЗапроса.Тело = HttpЗапрос.ПолучитьТелоКакДвоичныеДанные();
	
	ОписаниеЗапроса.РазмерТелаЗапроса = ОписаниеЗапроса.Тело.Размер();
	
	// данные об отправителе запроса
	ОписаниеЗапроса.ТипЗапроса = ПравилоОбработки["ТипЗапроса"];
	ОписаниеЗапроса.Клиент = Клиент;

	Возврат ОписаниеЗапроса;
	
КонецФункции

Функция ИмяСобытияЖурналаРегистрации() Экспорт	
	Возврат аргмВходящиеЗапросыА1Переопределяемый.ИмяСобытияЖурналаРегистрации();
	
КонецФункции

// Рассчитать хеш для строки
// 
// Параметры:
//  СтрокаДляРасчетаХеша - Строка - Строка для расчета хеша
// Возвращаемое значение:
//  Строка - Описание
Функция ХешированиеДанныхSHA256(СтрокаДляРасчетаХеша, ФорматBase64 = Истина) Экспорт
	
	ХешированиеДанныхОбъект = Новый ХешированиеДанных(ХешФункция.SHA256);
	ХешированиеДанныхОбъект.Добавить(СтрокаДляРасчетаХеша);
	
	Если ФорматBase64 Тогда
		Возврат Base64Строка(ХешированиеДанныхОбъект.ХешСумма);
	Иначе
		Возврат ХешированиеДанныхОбъект.ХешСумма;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИдемпотентностьЗапроса

// Проверяет входящий запрос на предмет его идемпотентности через переданный заголовок
// "Idempotency-Key"
//
// Параметры:
//  КлючИдемпотентности	 - Строка - обычно получается из заголовка Idempotency-Key
//  Ресурс				 - Строка - Адрес ресурса, на который был отправлен запрос, напр /api/v1/orders 
//  Метод				 - Строка - Метод Http запроса (Post, Get и пр.) 
//  Клиент				 - СправочникСсылка.Контрагенты - Клиент, вызвавший метод

// 
// Возвращаемое значение:
//   - РезультатПроверки - Структура - см. ВходящиеЗапросыА1.НовыйРезультатПроверкиИдемпотентностиЗапроса
//
Функция РезультатПроверкиИдемпотентностиЗапроса(КлючИдемпотентности, Ресурс, Метод, Клиент = Неопределено) Экспорт
	
	РезультатПроверки = НовыйРезультатПроверкиИдемпотентностиЗапроса();
		
	Если Не ЗначениеЗаполнено(КлючИдемпотентности) Тогда
		
		РезультатПроверки.ТекстОшибки =
					"В заголовках отсутствует или не заполнен ключ идемпотентности ('Idempotency-Key') запроса";
		РезультатПроверки.ЕстьОшибкиПриПроверке = Истина;
		
		Возврат РезультатПроверки;
		
	КонецЕсли;
	
	РезультатПроверки.КлючИдемпотентности = КлючИдемпотентности;
	
	ДанныеЗапроса = РегистрыСведений.аргмЖурналВходящихHttpЗапросовА1.ЗапросПоКлючуИдемпотентности(КлючИдемпотентности,
																								Ресурс,
																								Метод,
																								Клиент);
																								
	Если ЗначениеЗаполнено(ДанныеЗапроса) Тогда
		РезультатПроверки.ЭтоПовторныйЗапрос = Истина;		
		РезультатПроверки.Данные = ДанныеЗапроса;
		
	Иначе
		РезультатПроверки.ЭтоПовторныйЗапрос = Ложь;
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции	

// Получает ключ идемпотентности из заголовка запроса
//
// Параметры:
//  ОписаниеЗапроса	 - Структура - см. ВходящиеЗапросыА1.НовоеОписаниеВходящегоЗапроса
// 
// Возвращаемое значение:
//   - Строка - значение ключа (когда ключ идемпотентности определен) или Неопределено
//   когда заголовок Idempotency-Key не определен или содержит пустое значение
//
Функция КлючИдемпотентностиЗапроса(ОписаниеЗапроса) Экспорт
	
	Заголовки = ОписаниеЗапроса.Заголовки;
	
	КлючИдемпотентности = Заголовки.Получить("Idempotency-Key");
	
	Если ЗначениеЗаполнено(КлючИдемпотентности) Тогда
		Возврат КлючИдемпотентности;
		
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти