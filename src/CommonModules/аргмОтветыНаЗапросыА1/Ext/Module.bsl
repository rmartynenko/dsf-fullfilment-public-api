#Область ПрограммныйИнтерфейс

Функция НовоеОписаниеОтвета() Экспорт
	ОписаниеОтвета = Новый Структура;
	ОписаниеОтвета.Вставить("КодСостояния", 200);
	ОписаниеОтвета.Вставить("Заголовки", Новый Соответствие);	
	ОписаниеОтвета.Вставить("Json", Неопределено);
	ОписаниеОтвета.Вставить("Данные", Неопределено);  
	ОписаниеОтвета.Вставить("РазмерТелаОтвета", 0);

	Возврат ОписаниеОтвета;
	
КонецФункции

// Функция - Описание ответа
//
// Параметры:
//  РезультатОбработкиЗапроса	 - Структура - см. ОбработкаВходящихЗапросовА1.НовыйРезультатОбработкиЗапроса()
// 
// Возвращаемое значение:
//   - Структура см. ОтветыНаЗапросыА1.НовоеОписаниеОтвета()
//
Функция ОписаниеОтвета(РезультатОбработкиЗапроса) Экспорт

	ОписаниеОтвета = НовоеОписаниеОтвета();
	РазмерТелаОтвета = 0; 
		
	ОписаниеОтвета.Заголовки.Вставить("Charset", "utf-8");

	ТипЗначенияДанных = ТипЗнч(РезультатОбработкиЗапроса.Данные);
	
	Если ТипЗначенияДанных = Тип("Структура") 
		Или ТипЗначенияДанных = Тип("Соответствие")
		Или ТипЗначенияДанных = Тип("Массив") Тогда
		
		ОписаниеОтвета.Json = РезультатОбработкиЗапроса.Данные;
		
		ОписаниеОтвета.Данные = аргмКоннекторHttpA1.ОбъектВJson(РезультатОбработкиЗапроса.Данные);
		
		ОписаниеОтвета.Заголовки.Вставить("Content-Type", "application/json");
		
		РазмерТелаОтвета = РазмерТекстовыхДанных(ОписаниеОтвета.Данные);

	ИначеЕсли ТипЗначенияДанных = Тип("Строка") Тогда
		ОписаниеОтвета.Данные = РезультатОбработкиЗапроса.Данные;
				
		Если ЗначениеЗаполнено(РезультатОбработкиЗапроса.ТипФайла) Тогда
			ОписаниеОтвета.Заголовки.Вставить("Content-Type", "text/" + РезультатОбработкиЗапроса.ТипФайла);
			
		Иначе
			ОписаниеОтвета.Заголовки.Вставить("Content-Type", "text/plain");
	
		КонецЕсли;
		
		РазмерТелаОтвета = РазмерТекстовыхДанных(ОписаниеОтвета.Данные);
		
	ИначеЕсли ТипЗначенияДанных = Тип("ДвоичныеДанные") Тогда
		
		ОписаниеОтвета.Данные = РезультатОбработкиЗапроса.Данные;
		
		Если ЗначениеЗаполнено(РезультатОбработкиЗапроса.ТипФайла) Тогда
			ОписаниеОтвета.Заголовки.Вставить("Content-Type", "application/" + РезультатОбработкиЗапроса.ТипФайла);
			
		Иначе
			ОписаниеОтвета.Заголовки.Вставить("Content-Type", "application/octet-stream");
			
		КонецЕсли;	
		
		РазмерТелаОтвета = XMLСтрока(ОписаниеОтвета.Данные.Размер());
		
	Иначе
		ВызватьИсключение "Недопустимый тип содержимого данных для ответа на входящий запрос";
		
	КонецЕсли;
	
	ОписаниеОтвета.РазмерТелаОтвета = РазмерТелаОтвета;
	ОписаниеОтвета.Заголовки.Вставить("Content-Length", XMLСтрока(РазмерТелаОтвета)); 
	
	// служебные заголовки
	Если ЗначениеЗаполнено(РезультатОбработкиЗапроса.ДатаОбработки) Тогда
		ОписаниеОтвета.Заголовки.Вставить("X-DSF-Timestamp", XMLСтрока(РезультатОбработкиЗапроса.ДатаОбработки));

	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатОбработкиЗапроса.ДатаУстаревания) Тогда
		ОписаниеОтвета.Заголовки.Вставить("X-DSF-Expired", XMLСтрока(РезультатОбработкиЗапроса.ДатаУстаревания));

	КонецЕсли;
	
	Если РезультатОбработкиЗапроса.Ошибки.Количество() > 0 
		Или РезультатОбработкиЗапроса.ОбработанУспешно = Ложь Тогда

		КодСостояния = 400;

	Иначе	
		Если РазмерТелаОтвета > 0 Тогда
			КодСостояния = 200;
			
		Иначе
			КодСостояния = 204;

		КонецЕсли;
	
	КонецЕсли;
	
	ОписаниеОтвета.КодСостояния = КодСостояния;
	
	// В некоторых алгоритмах описание ответа получают непосредственно из
	// РезультатОбработкиЗапроса, поэтому сохраняем ОписаниеОтвета и в
	// этой структуре
	// 
	РезультатОбработкиЗапроса.ОписаниеОтвета = ОписаниеОтвета;
	
	Возврат ОписаниеОтвета;
	
КонецФункции

Функция ОтветЗапросОбработанУспешно(КодОтвета = 200, ДанныеДляОтвета = Неопределено, Ошибки = Неопределено) Экспорт
	
	Ответ = Новый HTTPСервисОтвет(КодОтвета);
	
	ДобавитьЗаголовкиПоУмолчанию(Ответ); 
	
	ЗаголовкиHTTP = Ответ.Заголовки;

	ТелоОтвета = "";
	ТипЗначенияДанныхОтвета = ТипЗнч(ДанныеДляОтвета);
	
	Если ТипЗначенияДанныхОтвета = Тип("Структура") Тогда
		// ответ в json
		СодержимоеОтвета = Новый Структура;
		СодержимоеОтвета.Вставить("data", ДанныеДляОтвета);
		
		Если ЗначениеЗаполнено(Ошибки) Тогда
			СодержимоеОтвета.Вставить("errors", Ошибки);
	
		КонецЕсли;
				
		ТелоОтвета = аргмКоннекторHttpA1.ОбъектВJson(СодержимоеОтвета);
		Ответ.УстановитьТелоИзСтроки(ТелоОтвета);
		
		ЗаголовкиHTTP.Вставить("Content-Type", "application/json; charset=utf-8");
		
	ИначеЕсли ТипЗначенияДанныхОтвета = Тип("Строка") Тогда
		ТелоОтвета = ДанныеДляОтвета;
		Ответ.УстановитьТелоИзСтроки(ТелоОтвета); 
		
		ЗаголовкиHTTP.Вставить("Content-Type", "text/plain; charset=utf-8");

	ИначеЕсли ТипЗначенияДанныхОтвета = Тип("ДвоичныеДанные") Тогда
		
		ТелоОтвета = ДанныеДляОтвета;
		Ответ.УстановитьТелоИзДвоичныхДанных(ТелоОтвета);
		
		ЗаголовкиHTTP.Вставить("Content-Type", "application/octet-stream");

	КонецЕсли;
	
	ДобавитьРазмерДанныхВЗаголовкиЗапроса(ЗаголовкиHTTP, ТелоОтвета); 
	
	Возврат Ответ;
	
КонецФункции 

Функция ОтветЗапросНеОбработан(КодОтвета = 400, Ошибки = Неопределено) Экспорт
	
	Ответ = Новый HTTPСервисОтвет(КодОтвета);
	
	ЗаголовкиHTTP = Ответ.Заголовки;
	
	ЗаголовкиHTTP.Вставить("X-App-Error", "Request processing error");
	
	// при отсутствии ошибок добавляем принудительно одну, чтобы сервер не стал возвращать
	// содержимое тела запроса по умолчанию для 400-й ошибки
	Если Не ЗначениеЗаполнено(Ошибки) Тогда
		Ошибки.Добавить("Unidentified request processing error");
		
	КонецЕсли;
	
	СодержимоеОтвета = Новый Структура;
	СодержимоеОтвета.Вставить("errors", Ошибки);

	ТелоОтвета = аргмКоннекторHttpA1.ОбъектВJson(СодержимоеОтвета);
	Ответ.УстановитьТелоИзСтроки(ТелоОтвета);

	ЗаголовкиHTTP.Вставить("Content-Type", "application/json; charset=utf-8");
	
	ДобавитьРазмерДанныхВЗаголовкиЗапроса(ЗаголовкиHTTP, ТелоОтвета); 
		
	Возврат Ответ;
	
КонецФункции 

Функция ОтветИсключениеВоВремяОбработкиЗапроса(Ошибки = Неопределено) Экспорт
	
	КодОтвета = 400;
	
	Ответ = Новый HTTPСервисОтвет(КодОтвета); 
	ДобавитьЗаголовкиПоУмолчанию(Ответ);
	
	ЗаголовкиHTTP = Ответ.Заголовки;
	
	ЗаголовкиHTTP.Вставить("X-DSF-Error", "Exception during request processing");
	
	Если ЗначениеЗаполнено(Ошибки) Тогда
		СодержимоеОтвета = Новый Структура;
		СодержимоеОтвета.Вставить("errors", Ошибки);
		
		ТелоОтвета = аргмКоннекторHttpA1.ОбъектВJson(СодержимоеОтвета);
		Ответ.УстановитьТелоИзСтроки(ТелоОтвета);
		
		ЗаголовкиHTTP.Вставить("Content-Type", "application/json; charset=utf-8");
		ДобавитьРазмерДанныхВЗаголовкиЗапроса(ЗаголовкиHTTP, ТелоОтвета);
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция ОтветСостояниеОбработкиНеидемпотентногоЗапроса(ИдентификаторЗапроса,
													СостояниеОбработкиЗапроса,
													БазовыйURL,
													КодСостояния = 200) Экспорт
														
	Ответ = Новый HTTPСервисОтвет(КодСостояния);
	
	ДобавитьЗаголовкиПоУмолчанию(Ответ);
	
	ЗаголовкиHTTP = Ответ.Заголовки;
	
	АдресПолученияСтатуса = UrlПолученияСтатусаОбработкиЗапроса(ИдентификаторЗапроса, БазовыйURL);

	СодержимоеОтвета = Новый Структура;
	СодержимоеОтвета.Вставить("request_id", XMLСтрока(ИдентификаторЗапроса));
	СодержимоеОтвета.Вставить("status", ПредставлениеСостоянияОбработкиЗапроса(СостояниеОбработкиЗапроса));
	СодержимоеОтвета.Вставить("status_url", АдресПолученияСтатуса);

	ТелоОтвета = аргмКоннекторHttpA1.ОбъектВJson(СодержимоеОтвета);
	Ответ.УстановитьТелоИзСтроки(ТелоОтвета);
	
	ЗаголовкиHTTP.Вставить("Content-Type", "application/json; charset=utf-8");
	ДобавитьРазмерДанныхВЗаголовкиЗапроса(ЗаголовкиHTTP, ТелоОтвета);
		
	Возврат Ответ;
	
КонецФункции

Функция ОтветСостояниеНовогоЗапроса(ИдентификаторЗапроса, БазовыйURL) Экспорт
														
	АдресПолученияСтатуса = UrlПолученияСтатусаОбработкиЗапроса(ИдентификаторЗапроса, БазовыйURL);
	
	СодержимоеОтвета = Новый Структура;
	СодержимоеОтвета.Вставить("request_id", XMLСтрока(ИдентификаторЗапроса));
	СодержимоеОтвета.Вставить("status",
							ПредставлениеСостоянияОбработкиЗапроса(Перечисления.аргмСостоянияВходящихЗапросовА1.Принят));
	СодержимоеОтвета.Вставить("status_url", АдресПолученияСтатуса);
	
	Ответ = Новый HTTPСервисОтвет(202);
	ДобавитьЗаголовкиПоУмолчанию(Ответ);
	
	ТелоОтвета = аргмКоннекторHttpA1.ОбъектВJson(СодержимоеОтвета);
	
	Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	ДобавитьРазмерДанныхВЗаголовкиЗапроса(Ответ.Заголовки, ТелоОтвета);
	
	Ответ.УстановитьТелоИзСтроки(ТелоОтвета);

	Возврат Ответ;
	
КонецФункции

// Функция - Ответ состояние обработки запроса
//
// Параметры:
//  ИдентификаторЗапроса - УникальныйИдентификатор - 
// 
// Возвращаемое значение:
//   - 
//
Функция ОтветСостояниеОбработкиЗапроса(ИдентификаторЗапроса) Экспорт
														
	ЗаписьЖурнала = РегистрыСведений.аргмЖурналВходящихHttpЗапросовА1.ЗапросПоИдентификатору(ИдентификаторЗапроса);
	
	Если ЗаписьЖурнала = Неопределено Тогда
		
		Ошибки = Новый Массив;
		Ошибки.Добавить(СтрШаблон("Запрос с request_id %1 не зарегистрирован",
									XMLСтрока(ИдентификаторЗапроса)));
									
		Возврат ОтветЗапросНеОбработан(400, Ошибки);
		
	КонецЕсли;
	
	СостояниеОбработкиЗапроса = ЗаписьЖурнала.Состояние;
	БазовыйURL = ЗаписьЖурнала.БазовыйURL;

	АдресПолученияСтатуса = UrlПолученияСтатусаОбработкиЗапроса(ИдентификаторЗапроса, ЗаписьЖурнала.БазовыйURL);
	
	СодержимоеОтвета = Новый Структура;
	СодержимоеОтвета.Вставить("request_id", XMLСтрока(ИдентификаторЗапроса));
	СодержимоеОтвета.Вставить("status", ПредставлениеСостоянияОбработкиЗапроса(СостояниеОбработкиЗапроса));
	СодержимоеОтвета.Вставить("status_url", АдресПолученияСтатуса);
	
	Если СостояниеОбработкиЗапроса = Перечисления.аргмСостоянияВходящихЗапросовА1.Завершен
		Или СостояниеОбработкиЗапроса = Перечисления.аргмСостоянияВходящихЗапросовА1.ОшибкаВыполнения Тогда
		
		Ответ = Новый HTTPСервисОтвет(302); // перенаправление для получения результата
		ДобавитьЗаголовкиПоУмолчанию(Ответ);

		АдресПолученияРезультата = UrlПолученияРезультатаОбработкиЗапроса(ИдентификаторЗапроса, БазовыйURL);

		СодержимоеОтвета.Вставить("response_url", АдресПолученияРезультата);
		
		Ответ.Заголовки.Вставить("Location", АдресПолученияРезультата);
		
	Иначе
		Ответ = Новый HTTPСервисОтвет(200);
		ДобавитьЗаголовкиПоУмолчанию(Ответ);

	КонецЕсли;
	
	ТелоОтвета = аргмКоннекторHttpA1.ОбъектВJson(СодержимоеОтвета);
	
	Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	ДобавитьРазмерДанныхВЗаголовкиЗапроса(Ответ.Заголовки, ТелоОтвета);
	
	Ответ.УстановитьТелоИзСтроки(ТелоОтвета);

	Возврат Ответ;
	
КонецФункции

Функция ОтветРезультатОбработкиЗапроса(ИдентификаторЗапроса) Экспорт
														
	ЗаписьЖурнала = РегистрыСведений.аргмЖурналВходящихHttpЗапросовА1.ЗапросПоИдентификатору(ИдентификаторЗапроса);
	
	Если ЗаписьЖурнала = Неопределено Тогда
		
		Ошибки = Новый Массив;
		Ошибки.Добавить(СтрШаблон("Запрос с request_id %1 не зарегистрирован",
									XMLСтрока(ИдентификаторЗапроса)));
									
		Возврат ОтветЗапросНеОбработан(400, Ошибки);
		
	КонецЕсли;
	
	СостояниеОбработкиЗапроса = ЗаписьЖурнала.ИдентификаторЗапроса;
	СостояниеОбработкиЗапроса = ЗаписьЖурнала.Состояние;
	ОписаниеОтвета = ЗаписьЖурнала.Ответ.Получить();
	
	Ответ = ОтветРезультатОбработкиЗапросаПоОписанию(ОписаниеОтвета,
												ИдентификаторЗапроса,
												СостояниеОбработкиЗапроса);
												
	Возврат Ответ;
	
КонецФункции

Функция ОтветРезультатОбработкиЗапросаПоОписанию(ОписаниеОтвета,
												ИдентификаторЗапроса,
												СостояниеОбработкиЗапроса) Экспорт
		
	Если СостояниеОбработкиЗапроса = Перечисления.аргмСостоянияВходящихЗапросовА1.Принят
		Или СостояниеОбработкиЗапроса = Перечисления.аргмСостоянияВходящихЗапросовА1.Обрабатывается Тогда
	
		Ошибки = Новый Массив;
		Ошибки.Добавить(СтрШаблон("Запрос с request_id %1 находится в состоянии %2, получение результата невозможно",
									XMLСтрока(ИдентификаторЗапроса),
									ПредставлениеСостоянияОбработкиЗапроса(СостояниеОбработкиЗапроса)));
									
		Возврат ОтветЗапросНеОбработан(400, Ошибки);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОписаниеОтвета) Тогда
		Ошибки = Новый Массив;
		Ошибки.Добавить(СтрШаблон("Невозможно получить результат обработки по запросу с request_id %1",
									XMLСтрока(ИдентификаторЗапроса)));
									
		Возврат ОтветЗапросНеОбработан(400, Ошибки);
		
	КонецЕсли;	
	
	Ответ = Новый HTTPСервисОтвет(ОписаниеОтвета.КодСостояния);
	ДобавитьЗаголовкиПоУмолчанию(Ответ);
	
	ДополнитьКоллекцию(Ответ.Заголовки, ОписаниеОтвета.Заголовки); 
	
	Если ТипЗнч(ОписаниеОтвета.Данные) = Тип("ДвоичныеДанные") Тогда
		Ответ.УстановитьТелоИзДвоичныхДанных(ОписаниеОтвета.Данные);
		
	Иначе			
		Ответ.УстановитьТелоИзСтроки(ОписаниеОтвета.Данные, 
									КодировкаТекста.UTF8,
									ИспользованиеByteOrderMark.НеИспользовать);
	КонецЕсли;

	Возврат Ответ;
	
КонецФункции

// Формирует ответ на запрос, у которого ключ идемпотентности совпадает с уже зарегистрированнм 
// в журнале запросов
// Параметры:
//  ЗаписьЖурналаЗапросов	 - Структура - Данные записи из регистра сведений ЖурналВходящихHttpЗапросовА1
// 
// Возвращаемое значение:
//   - HTTPСервисОтвет - возвращаемый ответ на запрпос, признанный неидемпотентным
//
Функция ОтветНаПовторныйЗапрос(ЗаписьЖурналаЗапросов) Экспорт
	
	СостояниеОбработкиЗапроса = ЗаписьЖурналаЗапросов.Состояние;
	БазовыйURL				  = ЗаписьЖурналаЗапросов.БазовыйURL;
	ИдентификаторЗапроса 	  = ЗаписьЖурналаЗапросов.ИдентификаторЗапроса;
	
	Если СостояниеОбработкиЗапроса = Перечисления.аргмСостоянияВходящихЗапросовА1.Завершен
		Или СостояниеОбработкиЗапроса = Перечисления.аргмСостоянияВходящихЗапросовА1.ОшибкаВыполнения Тогда
		// запрос обработан, можно вернуть результат		
		ОписаниеОтвета = ЗаписьЖурналаЗапросов.Ответ.Получить();
		Ответ = ОтветРезультатОбработкиЗапросаПоОписанию(ОписаниеОтвета,
												ИдентификаторЗапроса,
												СостояниеОбработкиЗапроса);

	Иначе
		// запрос в обработке, возвращаем адрес запроса статуса
		Если ЗаписьЖурналаЗапросов.Асинхронный Тогда
			Ответ = ОтветСостояниеОбработкиНеидемпотентногоЗапроса(ИдентификаторЗапроса,
																	СостояниеОбработкиЗапроса,
																	БазовыйURL);
			
		Иначе
			КодСостояния = 409; // конфликт запросов
			Ответ = ОтветСостояниеОбработкиНеидемпотентногоЗапроса(ИдентификаторЗапроса,
																	СостояниеОбработкиЗапроса,
																	БазовыйURL,
																	КодСостояния);

		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция - Url получения статуса обработки запроса
//
// Параметры:
//  ИдентификаторЗапроса - УникальныйИдентификато - ИдентификаторЗапроса
//  БазовыйURL			 - Строка - базовая частб адреса для получения сведений и статусе
//									обработки запроса
// 
// Возвращаемое значение:
//   - Строка с полным адресом для выполнения запроса о состоянии заказа по его иденифтикатору
//		Пример: https://www.example.com/api/status/51ff44e9-bc2b-4591-a044-d03d5a36dafa
//
Функция UrlПолученияСтатусаОбработкиЗапроса(ИдентификаторЗапроса, БазовыйURL) Экспорт
	
	Возврат СтрШаблон("%1/%2/%3",
						БазовыйURL,
						РесурсПолученияСтатусаОбработкиЗапроса(),
						XMLСтрока(ИдентификаторЗапроса));
	
КонецФункции
					
Функция UrlПолученияРезультатаОбработкиЗапроса(ИдентификаторЗапроса, БазовыйURL) Экспорт
	
	Возврат СтрШаблон("%1/%2/%3",
						БазовыйURL,
						РесурсПолученияРезультатаОбработкиЗапроса(),
						XMLСтрока(ИдентификаторЗапроса));
	
КонецФункции					

Функция РесурсПолученияСтатусаОбработкиЗапроса() Экспорт
	Возврат "api/status";
	
КонецФункции

Функция РесурсПолученияРезультатаОбработкиЗапроса() Экспорт
	Возврат "api/result";
	
КонецФункции

// Функция - Представление состояния обработки запроса
//
// Параметры:
//  СостояниеОбработкиЗапроса	 - ПеречислениеСсылка.СостоянияВходящихЗапросовА1 - 
// 
// Возвращаемое значение:
//   - Строка со строковым представлением состояния обработки запроса
//
Функция ПредставлениеСостоянияОбработкиЗапроса(СостояниеОбработкиЗапроса) Экспорт
	
	ПредставлениеСостояния = "";
	
	Если СостояниеОбработкиЗапроса = Перечисления.аргмСостоянияВходящихЗапросовА1.Принят Тогда
		ПредставлениеСостояния = "accepted"; 
	
	ИначеЕсли СостояниеОбработкиЗапроса = Перечисления.аргмСостоянияВходящихЗапросовА1.Обрабатывается Тогда
		ПредставлениеСостояния = "processing"; 
		
	ИначеЕсли СостояниеОбработкиЗапроса = Перечисления.аргмСостоянияВходящихЗапросовА1.Завершен Тогда
		ПредставлениеСостояния = "completed";
		
	ИначеЕсли СостояниеОбработкиЗапроса = Перечисления.аргмСостоянияВходящихЗапросовА1.ОшибкаВыполнения Тогда
		ПредставлениеСостояния = "failed";
	
	Иначе
		ПредставлениеСостояния = "undefined";
		
	КонецЕсли;
	
	Возврат ПредставлениеСостояния;
		
КонецФункции

Процедура ДобавитьЗаголовкиПоУмолчанию(HTTPСервисОтвет) Экспорт
		
	Заголовки = Новый Соответствие;
#Если МобильноеПриложениеСервер Тогда
	Заголовки.Вставить("Accept-Encoding", "identity");
#Иначе
	Заголовки.Вставить("Accept-Encoding", "gzip");
#КонецЕсли
	Заголовки.Вставить("Accept", "*/*");
	Заголовки.Вставить("Accept-Charset", "utf-8");
	Заголовки.Вставить("Connection", "keep-alive");
	Заголовки.Вставить("Cache-Control", "no-cache");

	HTTPСервисОтвет.Заголовки = Заголовки;

КонецПроцедуры

Процедура ДобавитьРазмерДанныхВЗаголовкиЗапроса(Заголовки, Знач Данные) Экспорт
	Если ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
		Заголовки.Вставить("Content-Length", XMLСтрока(Данные.Размер()));
		
	ИначеЕсли ТипЗнч(Данные) = Тип("Строка") Тогда
		Кодировка = КодировкаТекста.UTF8;
		Заголовки.Вставить(
			"Content-Length", XMLСтрока(РазмерТекстовыхДанных(Данные, Кодировка))
		);
	Иначе
		ВызватьИсключение "Неизвестный тип данных: " + ТипЗнч(Данные);
		
	КонецЕсли;
	
КонецПроцедуры

Функция РазмерТекстовыхДанных(Знач Текст, Знач Кодировка = Неопределено) Экспорт
	Кодировка = ?(Кодировка = Неопределено, КодировкаТекста.UTF8, Кодировка);
	
	Возврат ПолучитьДвоичныеДанныеИзСтроки(Текст, Кодировка).Размер(); 
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Процедура ДополнитьКоллекцию(Приемник, Источник)
	
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементИсточника Из Источник Цикл
		ПараметрНайден = Ложь;
		
		Если ТипЗнч(Приемник) = Тип("Соответствие") Тогда
			ПараметрНайден = Приемник.Получить(ЭлементИсточника.Ключ) <> Неопределено;
		КонецЕсли;
		
		Если ТипЗнч(Приемник) = Тип("Структура") Тогда
			ПараметрНайден = Приемник.Свойство(ЭлементИсточника.Ключ);
		КонецЕсли;
		
		Если Не ПараметрНайден ИЛИ ПараметрНайден И ЭлементИсточника.Значение <> Неопределено Тогда
			Приемник.Вставить(ЭлементИсточника.Ключ, ЭлементИсточника.Значение);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти