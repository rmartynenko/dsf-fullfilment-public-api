#Область ПрограммныйИнтерфейс

Функция НоваяОшибкаПриВыполненииЗапроса() Экспорт
	
	ОписаниеОшибки = Новый Структура;
	
	ОписаниеОшибки.Вставить("code", 0);
	ОписаниеОшибки.Вставить("message", "");
	ОписаниеОшибки.Вставить("description", "");
	
	Возврат ОписаниеОшибки;
	
КонецФункции

Функция СервисНедоступенОшибка() Экспорт
	
	ОписаниеОшибки = НоваяОшибкаПриВыполненииЗапроса();
	
	ОписаниеОшибки.code = 1000;
	ОписаниеОшибки.message = "Сервис недоступен";
	ОписаниеОшибки.description = "";
	
	Возврат ОписаниеОшибки;
	
КонецФункции

Функция НеверныйТокенАвторизацииОшибка() Экспорт
	
	ОписаниеОшибки = НоваяОшибкаПриВыполненииЗапроса();
	
	ОписаниеОшибки.code = 1100;
	ОписаниеОшибки.message = "Неверный токен авторизации";
	ОписаниеОшибки.description = "В запросе передан недействительный токен авторизации";

	Возврат ОписаниеОшибки;
	
КонецФункции

Функция СинтаксическаяОшибкаXML() Экспорт
	
	ОписаниеОшибки = НоваяОшибкаПриВыполненииЗапроса();
	
	ОписаниеОшибки.code = 2000;
	ОписаниеОшибки.message = "Синтаксическая ошибка XML";
	ОписаниеОшибки.description = "";

	Возврат ОписаниеОшибки;
	
КонецФункции

Функция ТипДанныхНеНайденОшибка() Экспорт
	
	ОписаниеОшибки = НоваяОшибкаПриВыполненииЗапроса();
	
	ОписаниеОшибки.code = 9404;
	ОписаниеОшибки.message = "Тип данных не найден";
	ОписаниеОшибки.description = "";

	Возврат ОписаниеОшибки;
	
КонецФункции

Функция НевозможноОбработатьЗапрос() Экспорт
	
	ОписаниеОшибки = НоваяОшибкаПриВыполненииЗапроса();
	
	ОписаниеОшибки.code = 4000;
	ОписаниеОшибки.message = "Запрос выполнить невозможно";
	ОписаниеОшибки.description = "";

	Возврат ОписаниеОшибки;
	
КонецФункции

// Функция - Возвращает XDTO объект с данными об ошибках
// при выполнении входящего запроса от Яндекс Маркет
//
// Параметры:
//  Ошибки	 - Массив - Массив структур с описанием ошибок, см. dsf_ОбработкаОшибок.НоваяОшибкаПриВыполненииЗапросаЯндексМаркет
// 
// Возвращаемое значение:
//  СведенияОбОшибках - ОбъектXdto
//
Функция ОшибкиОбработкиЗапросаВXdtoОбъект(Ошибки = Неопределено) Экспорт
	
	Если Ошибки = Неопределено Тогда
		Ошибки = Новый Массив;
		
	КонецЕсли;
	
	ТипОбъектаОшибкиПриВыполнении = ФабрикаXDTO.Тип("http://www.dsf-yandex-market.kz", "requestState");
	ТипОбъектаСписокОшибок = ФабрикаXDTO.Тип("http://www.dsf-yandex-market.kz", "errorCodes");
	ТипОбъектаОшибка = ФабрикаXDTO.Тип("http://www.dsf-yandex-market.kz", "ErrorPair");

	СведенияОбОшибках = ФабрикаXDTO.Создать(ТипОбъектаОшибкиПриВыполнении);
	
	Если ЗначениеЗаполнено(Ошибки) Тогда
		
		СписокОшибок = ФабрикаXDTO.Создать(ТипОбъектаСписокОшибок);
		Для каждого ТекОшибка Из Ошибки Цикл
			Ошибка = ФабрикаXDTO.Создать(ТипОбъектаОшибка);
			
			ЗаполнитьЗначенияСвойств(Ошибка, ТекОшибка);
			СписокОшибок.errorCode.Добавить(Ошибка);
			
		КонецЦикла;
		
		СведенияОбОшибках.errorCodes = СписокОшибок;
		СведенияОбОшибках.isError = Истина;
		
	Иначе
		СведенияОбОшибках.isError = Ложь;
	
	КонецЕсли;
	
	Возврат СведенияОбОшибках;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
// Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Код процедур и функций
#КонецОбласти