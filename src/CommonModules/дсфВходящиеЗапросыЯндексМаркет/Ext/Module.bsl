#Область ПрограммныйИнтерфейс

Функция НовоеОписаниеВходящегоЗапроса() Экспорт
	ОписаниеВходящегоЗапроса = аргмВходящиеЗапросыА1.НовоеОписаниеВходящегоЗапроса();

	Возврат ОписаниеВходящегоЗапроса;
	
КонецФункции

Функция СлужебныеПараметрыВходящегоЗапроса() Экспорт
	СлужебныеПараметры = Новый Структура;
	
	СлужебныеПараметры.Вставить("ТокенАвторизации", "");
	СлужебныеПараметры.Вставить("ИдентификаторЗапроса", "undefined"); 
	СлужебныеПараметры.Вставить("ТипЗапроса", "undefined");

	Возврат СлужебныеПараметры;
	
КонецФункции

Функция HttpОтветНаВходящийЗапрос(Запрос, ТипЗапроса = "", ОбрабатыватьАсинхронно = Ложь) Экспорт
	
	ТелоЗапросаСтрокой = Запрос.ПолучитьТелоКакСтроку();
	
	Ошибки = Новый Массив;

	// 0. Проверка типа запроса, если не указан то проверка будет выполняться уже на уровне пакета
	Если ЗначениеЗаполнено(ТипЗапроса) Тогда
		// при несоответствии - отказ
		// пример строки поиска для запроса с типом putInbound
		// <request type="putInbound">
		
		СтрокаПоиска = СтрШаблон("<request type=""%1"">", ТипЗапроса);
		
		Если СтрНайти(ТелоЗапросаСтрокой, СтрокаПоиска) = 0 Тогда
			
			Ошибка = дсфОбработкаОшибокЯндексМаркет.НевозможноОбработатьЗапрос();
			Ошибка.description = СтрШаблон("Метод для %1 не соответствует типу, указанному в запросе.",
										ТипЗапроса);
		
			Ошибки.Добавить(Ошибка);

			ОтветНаЗапрос = дсфФормированиеОтветовЯндексМаркет.ОшибкаНесоответствияТипаЗапросаВызываемомуUrl(Ошибки);
			ОтветНаЗапрос.КодОтвета = 400;
			
			Возврат НовыйHttpОтветНаЗапрос(ОтветНаЗапрос);
		
		КонецЕсли;
		
	КонецЕсли;
	
	ЛогЗапроса = аргмЛогированиеHttpA1.ОткрытьЛогHTTPЗапроса(Запрос.БазовыйURL + Запрос.ОтносительныйURL);
	аргмЛогированиеHttpA1.УстановитьМетодHTTPЗапроса(ЛогЗапроса, Запрос.HTTPМетод);
	аргмЛогированиеHttpA1.УстановитьЗаголовкиИсх(ЛогЗапроса, Запрос.Заголовки);
	аргмЛогированиеHttpA1.УстановитьURLИзВхЗапроса(ЛогЗапроса, Запрос);
	аргмЛогированиеHttpA1.УстановитьТелоЗапроса(ЛогЗапроса, ТелоЗапросаСтрокой);
	
	аргмЛогированиеHttpA1.НачатьЗамерВремени(ЛогЗапроса);
	
	ОписаниеЗапроса = ОписаниеВходящегоЗапроса(Запрос, ТипЗапроса);
		
	// 1. Разбор пакета
	ОбъектXdto = дсфОбменДаннымиXDTOЯндексМаркет.ОбъектXdtoПоДаннымВходящегоЗапроса(ТелоЗапросаСтрокой, Ошибки);
	
	Если ОбъектXdto = Неопределено Тогда // ошибка разбора пакета
		
		ВременныйОбъектXdto = дсфОбменДаннымиXDTOЯндексМаркет.ОбъектXdtoПоДаннымЗапросаСлужебный(ТелоЗапросаСтрокой);
		
		СлужебныеПараметры = дсфОбменДаннымиXDTOЯндексМаркет.СлужебныеПараметрыВходящегоЗапросаИзXdto(ВременныйОбъектXdto);
		ОтветНаЗапрос = дсфФормированиеОтветовЯндексМаркет.ОшибкаРазбораСодержимогоВходящегоЗапроса(СлужебныеПараметры, Ошибки);
		
		HttpОтвет = НовыйHttpОтветНаЗапрос(ОтветНаЗапрос);
	
		аргмЛогированиеHttpA1.ЗакрытьЛогHTTPЗапроса(ЛогЗапроса, HttpОтвет);
	
		Возврат HttpОтвет;

	Иначе
		СлужебныеПараметры = дсфОбменДаннымиXDTOЯндексМаркет.СлужебныеПараметрыВходящегоЗапросаИзXdto(ОбъектXdto);

	КонецЕсли; 
	
	ОписаниеЗапроса.ТипЗапроса = СлужебныеПараметры["ТипЗапроса"];
	ОписаниеЗапроса.ИдентификаторЗапроса = СлужебныеПараметры["ИдентификаторЗапроса"];
	
	// 1.1 Проверка максимально возможной длины входящего идентификатора запроса
	// Через пакет Xdto ограничения не определяются, т.к. будут проблемы при формировнии
	// пакета для отправки - идентификатор должен быть возвращен без изменений
	ДлинаИдентификатораВходящегоЗапроса = СтрДлина(СлужебныеПараметры["ИдентификаторЗапроса"]);
	Если ДлинаИдентификатораВходящегоЗапроса > 36 Тогда
	
		Ошибка = дсфОбработкаОшибокЯндексМаркет.НевозможноОбработатьЗапрос();
		Ошибка.description = СтрШаблон("Длина 'uniq' составляет %1 символов, что превышает максимально допустимые %2",
										ДлинаИдентификатораВходящегоЗапроса,
										36);
		
		Ошибки.Добавить(Ошибка);
		ОтветНаЗапрос = дсфФормированиеОтветовЯндексМаркет.ОшибкаПроверкиИдемпотентностиЗапроса(СлужебныеПараметры, Ошибки);

		HttpОтвет = НовыйHttpОтветНаЗапрос(ОтветНаЗапрос);
	
		аргмЛогированиеHttpA1.ЗакрытьЛогHTTPЗапроса(ЛогЗапроса, HttpОтвет);
	
		Возврат HttpОтвет;

	КонецЕсли;

	// 2. Проверка авторизационного токена
	// TODO: Переделать на универсальный механизм через дсфНастройкиДоступаКАпи
	Если Не дсфЗащищенныеФункцииСлужебный.АвторизацияПоТокенуДляВходящегоЗапросаВыполнена(СлужебныеПараметры["ТокенАвторизации"]) Тогда
		ОтветНаЗапрос = дсфФормированиеОтветовЯндексМаркет.ОшибкаАвторизацииПоТокенуДоступа(СлужебныеПараметры); 
		
		HttpОтвет = НовыйHttpОтветНаЗапрос(ОтветНаЗапрос);
	
		аргмЛогированиеHttpA1.ЗакрытьЛогHTTPЗапроса(ЛогЗапроса, HttpОтвет);
	
		Возврат HttpОтвет;

	КонецЕсли;
	
	Ресурс = ОписаниеЗапроса.ОтносительныйURL;
	Метод  = ОписаниеЗапроса.HTTPМетод;
	ТипЗапроса = ОписаниеЗапроса.ТипЗапроса;
	Клиент = ОписаниеЗапроса.Клиент;

	// 3. Проверка идемпотентности запроса
	КлючИдемпотентностиДляЖурнала = "";
	
	РезультатПроверкиНаИдемпотентность =
			аргмВходящиеЗапросыА1.РезультатПроверкиИдемпотентностиЗапроса(ОписаниеЗапроса.ИдентификаторЗапроса,
																			Ресурс,
																			Метод,
																			Клиент);
	
	Если РезультатПроверкиНаИдемпотентность.ЕстьОшибкиПриПроверке Тогда
		
		Ошибка = дсфОбработкаОшибокЯндексМаркет.НевозможноОбработатьЗапрос();
		Ошибка.description = РезультатПроверкиНаИдемпотентность.ТекстОшибки;
		
		Ошибки.Добавить(Ошибка);
		ОтветНаЗапрос = дсфФормированиеОтветовЯндексМаркет.ОшибкаПроверкиИдемпотентностиЗапроса(СлужебныеПараметры, Ошибки);

		HttpОтвет = НовыйHttpОтветНаЗапрос(ОтветНаЗапрос);
	
		аргмЛогированиеHttpA1.ЗакрытьЛогHTTPЗапроса(ЛогЗапроса, HttpОтвет);
	
		Возврат HttpОтвет;
		
	КонецЕсли;
		
	Если РезультатПроверкиНаИдемпотентность.ЭтоПовторныйЗапрос Тогда
		
//		Ответ = ОтветыНаЗапросыА1.ОтветНаПовторныйЗапрос(РезультатПроверкиНаИдемпотентность.Данные);

		// пока результат для повторного запроса не  возвращаем
		Ошибка = дсфОбработкаОшибокЯндексМаркет.НевозможноОбработатьЗапрос();
		Ошибка.description = "Возможность повторного получения результата запроса в данный момент недоступна";
		
		Ошибки.Добавить(Ошибка);
		ОтветНаЗапрос = дсфФормированиеОтветовЯндексМаркет.ОшибкаПроверкиИдемпотентностиЗапроса(СлужебныеПараметры, Ошибки);

		HttpОтвет = НовыйHttpОтветНаЗапрос(ОтветНаЗапрос);
	
		аргмЛогированиеHttpA1.ЗакрытьЛогHTTPЗапроса(ЛогЗапроса, HttpОтвет);
	
		Возврат HttpОтвет;

	КонецЕсли;
	
	КлючИдемпотентностиДляЖурнала = РезультатПроверкиНаИдемпотентность.КлючИдемпотентности;

	// 4. Обработка запроса

	Ресурс = ОписаниеЗапроса.ОтносительныйURL;
	Метод  = ОписаниеЗапроса.HTTPМетод;
	ТипЗапроса = ОписаниеЗапроса.ТипЗапроса;
	
	ИдентификаторЗапроса = Новый УникальныйИдентификатор;
	Если Не ЗначениеЗаполнено(КлючИдемпотентностиДляЖурнала) Тогда
		КлючИдемпотентностиДляЖурнала = XMLСтрока(ИдентификаторЗапроса);	
		
	КонецЕсли;
	
	// обработка запроса и формирование ответа
	ВозниклоИсключениеПриОбработке = Ложь;

	НачатьТранзакцию();
	Попытка
		// запись в журнал запросов, статус задания "Принят"
		НоваяЗапись = РегистрыСведений.аргмЖурналВходящихHttpЗапросовА1.НоваяЗаписьЖурнала();
	
		НоваяЗапись["ИдентификаторЗапроса"] = ИдентификаторЗапроса;
		НоваяЗапись["Ресурс"] = Ресурс;
		НоваяЗапись["Метод"] = Метод;
		НоваяЗапись["Клиент"] = ОписаниеЗапроса.Клиент;
		НоваяЗапись["КлючИдемпотентности"] = КлючИдемпотентностиДляЖурнала;
		НоваяЗапись["Запрос"] = ОписаниеЗапроса;
		НоваяЗапись["Асинхронный"] = ОбрабатыватьАсинхронно;
		НоваяЗапись["БазовыйURL"] = ОписаниеЗапроса.БазовыйURL;
		НоваяЗапись["ТипЗапроса"] = ОписаниеЗапроса.ТипЗапроса;
		
		РегистрыСведений.аргмЖурналВходящихHttpЗапросовА1.ДобавитьЗаписьВЖурнал(НоваяЗапись);
		
		ОтветНаЗапрос = ОтветНаЗапрос(ОбъектXdto, СлужебныеПараметры, ОбрабатыватьАсинхронно);

		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(),
								УровеньЖурналаРегистрации.Ошибка,
								Метаданные.HTTPСервисы.дсфFulfillmentYandexMarket,,
								ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
								
		ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		
		Ошибка = дсфОбработкаОшибокЯндексМаркет.НевозможноОбработатьЗапрос();
		Ошибка.description = ТекстОшибки;
		
		Ошибки.Добавить(Ошибка);
		ОтветНаЗапрос = дсфФормированиеОтветовЯндексМаркет.ОшибкаОбработкиЗапроса(СлужебныеПараметры, Ошибки);
		
		ВозниклоИсключениеПриОбработке = Истина;

	КонецПопытки;
	
	HttpОтвет = НовыйHttpОтветНаЗапрос(ОтветНаЗапрос);
	
	аргмЛогированиеHttpA1.ЗакрытьЛогHTTPЗапроса(ЛогЗапроса, HttpОтвет);
	
	Возврат HttpОтвет;

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ОписаниеВходящегоЗапроса(HttpЗапрос, ТипЗапроса = "", ИдентификаторЗапроса = "") Экспорт
	ОписаниеЗапроса = НовоеОписаниеВходящегоЗапроса();
	
	ЗаполнитьЗначенияСвойств(ОписаниеЗапроса, HttpЗапрос);
	
	ОписаниеЗапроса.ТипЗапроса = ТипЗапроса;
	ОписаниеЗапроса.ИдентификаторЗапроса = ИдентификаторЗапроса;
	
	// TODO
	// переделать на определение через дсфНастройкиДоступаКАпи 
	ОписаниеЗапроса.Клиент = дсфОбщегоНазначенияЯндексМаркет.ПоклажедательПоУмолчанию();
	
	ОписаниеЗапроса.Тело = HttpЗапрос.ПолучитьТелоКакДвоичныеДанные(); 
	
	ОписаниеЗапроса.РазмерТелаЗапроса = ОписаниеЗапроса.Тело.Размер();

	Возврат ОписаниеЗапроса;
	
КонецФункции

Функция ОтветНаЗапрос(ОбъектXdto, СлужебныеПараметры, ОбрабатыватьАсинхронно) Экспорт
	
	Ошибки = Новый Массив;
	
	// определение метода, отвечающего за обработку запроса и его вызов
	ТипЗапроса = СлужебныеПараметры["ТипЗапроса"];
	
	РезультатОбработки = дсфОбработкаЗапросовЯндексМаркет.РезультатОбработкиВходящегоЗапроса(ОбъектXdto, ТипЗапроса);
			
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Ошибки, РезультатОбработки.Ошибки);
	
	Если РезультатОбработки.Данные <> Неопределено Тогда
		ОтветНаЗапрос = дсфФормированиеОтветовЯндексМаркет.ОтветНаЗапрос(РезультатОбработки["Данные"],
																		СлужебныеПараметры,
																		Ошибки);
	
	Иначе	
		ОтветНаЗапрос = дсфФормированиеОтветовЯндексМаркет.ОшибкаОбработкиЗапроса(СлужебныеПараметры, Ошибки);
		
	КонецЕсли;

	Возврат ОтветНаЗапрос;

КонецФункции 

Функция ИмяСобытияЖурналаРегистрации() Экспорт	
	Возврат НСтр("ru = 'YandexMarket.HTTP'");
	
КонецФункции

#Область Http
Процедура ДобавитьЗаголовкиПоУмолчанию(HTTPСервисОтвет) Экспорт
	аргмОтветыНаЗапросыА1.ДобавитьЗаголовкиПоУмолчанию(HTTPСервисОтвет);
	
КонецПроцедуры

Процедура ДобавитьРазмерДанныхВЗаголовкиЗапроса(Заголовки, Знач Данные) Экспорт
	Если ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
		Заголовки.Вставить("Content-Length", XMLСтрока(Данные.Размер()));
		
	ИначеЕсли ТипЗнч(Данные) = Тип("Строка") Тогда
		Кодировка = КодировкаТекста.UTF8;
		Заголовки.Вставить(
			"Content-Length", XMLСтрока(РазмерТекстовыхДанных(Данные, Кодировка))
		);
	Иначе
		ВызватьИсключение "Неизвестный тип данных: " + ТипЗнч(Данные);
		
	КонецЕсли;
	
КонецПроцедуры

Функция РазмерТекстовыхДанных(Знач Текст, Знач Кодировка = Неопределено) Экспорт
	Кодировка = ?(Кодировка = Неопределено, КодировкаТекста.UTF8, Кодировка);
	
	Возврат ПолучитьДвоичныеДанныеИзСтроки(Текст, Кодировка).Размер(); 
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


// Функция - Http ответ на запрос
//
// Параметры:
//  СведенияДляОтвета	 - Структура - см. dsf_ФормированиеОтветовЯндексМаркет.НовыйОтветНаВходящийЗапрос
//  КодОтвета			 - Число - 
// 
// Возвращаемое значение:
//   - HTTPСервисОтвет
//
Функция НовыйHttpОтветНаЗапрос(СведенияДляПодготовкиОтвета) Экспорт
	
	СодержимоеОтвета = СведенияДляПодготовкиОтвета.СодержимоеОтвета;
	ЗаголовкиДополнительные = СведенияДляПодготовкиОтвета.Заголовки;
	
	Ответ = Новый HTTPСервисОтвет(СведенияДляПодготовкиОтвета.КодОтвета);
	
	ДобавитьЗаголовкиПоУмолчанию(Ответ); 
	
	ЗаголовкиHTTP = Ответ.Заголовки;
	
	Объединить(ЗаголовкиHTTP, ЗаголовкиДополнительные);

	ДобавитьРазмерДанныхВЗаголовкиЗапроса(ЗаголовкиHTTP, СодержимоеОтвета);
	
	Ответ.УстановитьТелоИзСтроки(СодержимоеОтвета);

	Возврат Ответ;
	
КонецФункции

Функция Объединить(ГлавныйИсточник, ДополнительныйИсточник)

	Результат = ГлавныйИсточник;
	Дополнить(ГлавныйИсточник, ДополнительныйИсточник);
	Возврат Результат;

КонецФункции

Функция Скопировать(Источник)

	#Если МобильноеПриложениеСервер Тогда
		ПараметрыПреобразования = Неопределено;
		Если ТипЗнч(Источник) =  Тип("Структура") Тогда
			ПараметрыПреобразования = Новый Структура("ПрочитатьВСоответствие", Ложь);	
		КонецЕсли;
		Возврат JsonВОбъект(ОбъектВJson(Источник),, ПараметрыПреобразования);
	#Иначе
		Возврат ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(Источник));
	#КонецЕсли

КонецФункции

Процедура Дополнить(Приемник, Источник)
	
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементИсточника Из Источник Цикл
		ПараметрНайден = Ложь;
		
		Если ТипЗнч(Приемник) = Тип("Соответствие") Тогда
			ПараметрНайден = Приемник.Получить(ЭлементИсточника.Ключ) <> Неопределено;
		КонецЕсли;
		
		Если ТипЗнч(Приемник) = Тип("Структура") Тогда
			ПараметрНайден = Приемник.Свойство(ЭлементИсточника.Ключ);
		КонецЕсли;
		
		Если Не ПараметрНайден ИЛИ ПараметрНайден И ЭлементИсточника.Значение <> Неопределено Тогда
			Приемник.Вставить(ЭлементИсточника.Ключ, ЭлементИсточника.Значение);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти