#Область ПрограммныйИнтерфейс

Функция ОбъектXDTOВСтруктуру(ОбъектXDTO, ПараметрыПреобразования = Неопределено) Экспорт
	
	Структура      = Новый Структура;
	ТипОбъектаXDTO = ОбъектXDTO.Тип();
	
	Для Каждого Свойство Из ОбъектXDTO.Свойства() Цикл
		
		ИмяСвойства      = Свойство.Имя;
		ЗначениеСвойства = ОбъектXDTO[ИмяСвойства];
		
		Если ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
			
			Структура.Вставить(ИмяСвойства, ОбъектXDTOВСтруктуру(ЗначениеСвойства, ПараметрыПреобразования));
			
		ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("СписокXDTO") Тогда
			
			Структура.Вставить(ИмяСвойства, Новый Массив);
			Для Индекс = 0 По ЗначениеСвойства.Количество() - 1 Цикл
				
				ЭлементСписка = ЗначениеСвойства.Получить(Индекс);
				Если ТипЗнч(ЭлементСписка) = Тип("ОбъектXDTO") Тогда
					Структура[ИмяСвойства].Добавить(ОбъектXDTOВСтруктуру(ЭлементСписка, ПараметрыПреобразования));
				Иначе
					Структура[ИмяСвойства].Добавить(ЭлементСписка);
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Структура.Вставить(ИмяСвойства, ЗначениеСвойства);
			
			Если ПараметрыПреобразования <> Неопределено
				И ПараметрыПреобразования.НайтиИдентификаторы
				И Свойство.Тип = ПараметрыПреобразования.ТипUUID Тогда
				
				РезультатПоиска = ПараметрыПреобразования.ТипыИдентификаторов[ТипОбъектаXDTO];
				Если РезультатПоиска <> Неопределено
					И РезультатПоиска.ИмяПоля = ИмяСвойства Тогда
					ПараметрыПреобразования.Идентификаторы[РезультатПоиска.ИмяТаблицы].Вставить(ЗначениеСвойства, РезультатПоиска.ПустоеЗначение);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

Функция ОбъектXDTOВJson(ОбъектXDTO, ЯвноеНазначениеТипаXML = Ложь) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	
	ЗаписьJSON.УстановитьСтроку();
	
	Если ЯвноеНазначениеТипаXML Тогда
		ФабрикаXDTO.ЗаписатьJSON(ЗаписьJSON, ОбъектXDTO, НазначениеТипаXML.Явное);
		
	Иначе
		ФабрикаXDTO.ЗаписатьJSON(ЗаписьJSON, ОбъектXDTO, НазначениеТипаXML.Неявное);

	КонецЕсли;
	
	JSONСтрока = ЗаписьJSON.Закрыть();

	Возврат JSONСтрока;

КонецФункции

// Функция - Объект xdto по данным входящего запроса
//
// Параметры:
//  ТелоЗапроса	 - Строка - 
//  Ошибки	 - 	 - 
// 
// Возвращаемое значение:
//   - 
// 
//	Пример структуры входящего запроса
//	POST {путь к папке} HTTP/1.1
//	Host: {название хоста}  
//	Content-Type: text/xml; charset="utf-8"
//	...
//	<?xml version="{версия языка}" encoding="UTF-8"?>
//	<root>
//	  <token>{string}</token>
//	  <uniq>{string}</uniq>
//	  <request type="{string}">
//	    <!-- Входные данные метода API (если есть) -->  
//	    ... 
//	  </request>
//	</root> 
//
Функция ОбъектXdtoПоДаннымВходящегоЗапроса(ТелоЗапроса, Ошибки = Неопределено) Экспорт
							  
	Если Ошибки = Неопределено Тогда
		Ошибки = Новый Массив;
		
	КонецЕсли;
	СтрокаXML = ТелоЗапроса;
	
	Если СтрДлина(СтрокаXML) = 0 Тогда
		
		ОписаниеОшибки = дсфОбработкаОшибокЯндексМаркет.СинтаксическаяОшибкаXML();
		ОписаниеОшибки.description = "Отсутствует тело запроса";
		
		Ошибки.Добавить(ОписаниеОшибки);
		
		Возврат Неопределено;

	КонецЕсли;
	
	// принудительная установка пространства имен для проверки соответствия данных пакета
	// требуемому формату
	СимволКавычки = Символ(34);
	ПространстваИмен = "xmlns=" + СимволКавычки + "http://www.dsf-yandex-market.kz" + СимволКавычки
					+ " xmlns:xs=" + СимволКавычки + "http://www.w3.org/2001/XMLSchema" + СимволКавычки;
	
	СтрокаXML = СтрЗаменить(СтрокаXML, "<root>", "<root " + ПространстваИмен + ">");
							
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);

	ТипXDTO = ФабрикаXDTO.Тип("http://www.dsf-yandex-market.kz", "root");
	
	Попытка
		НовОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипXDTO);
		
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ОписаниеОшибки = дсфОбработкаОшибокЯндексМаркет.СинтаксическаяОшибкаXML();
		ОписаниеОшибки.description = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		
		Ошибки.Добавить(ОписаниеОшибки);

		Возврат Неопределено;
		
	КонецПопытки;
	
	НовОбъектXDTO.Проверить();
	
	Возврат НовОбъектXDTO;
	
КонецФункции

// Функция - Объект xdto по данным запроса служебный
//
// Параметры:
//  Запрос	 - HttpСервисЗапрос - Входящий запрос, из тела которого будет производиться попытка 
//									чтения xml
// 
// Возвращаемое значение:
//   - ОбъектXdto или Неопределено
//
Функция ОбъектXdtoПоДаннымЗапросаСлужебный(ТелоЗапроса) Экспорт

	СтрокаXML = ТелоЗапроса;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	Попытка
		НовОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		
	Исключение
		НовОбъектXDTO = Неопределено;
		
	КонецПопытки;
		
	Возврат НовОбъектXDTO;
	
КонецФункции

// Функция - Возвращает структуру, содержащую ключевые параметры входящего запроса
//
// Параметры:
//  ОбъектXdto	 - ОбъектXdto - Из которого будет произведена попытка получения значений параметров
// 
// Возвращаемое значение:
//  СлужебныеПараметры - Структура - см. dsf_ВходящиеЗапросыЯндексМаркет.СлужебныеПараметрыВходящегоЗапроса
//	* ТокенАвторизации	
//	* ИдентификаторЗапроса
//	* ТипЗапроса
//
Функция СлужебныеПараметрыВходящегоЗапросаИзXdto(ОбъектXdto) Экспорт

	СлужебныеПараметры = дсфВходящиеЗапросыЯндексМаркет.СлужебныеПараметрыВходящегоЗапроса();
	
	Если ТипЗнч(ОбъектXdto) <> Тип("ОбъектXDTO") Тогда
		Возврат СлужебныеПараметры;
		
	КонецЕсли;
	
	Свойства = ОбъектXDTO.Свойства();
	
	Если Не Свойства.Получить("token") = Неопределено Тогда
		СлужебныеПараметры["ТокенАвторизации"] = ОбъектXDTO["token"]
		
	КонецЕсли;
	
	Если Не Свойства.Получить("uniq") = Неопределено Тогда
		СлужебныеПараметры["ИдентификаторЗапроса"] = ОбъектXDTO["uniq"]
		
	КонецЕсли;
	
	Если Не Свойства.Получить("request") = Неопределено Тогда
		ДанныеЗапросаОбъектXDTO = ОбъектXDTO["request"];
		
		Если ТипЗнч(ДанныеЗапросаОбъектXDTO) = Тип("ОбъектXDTO") Тогда
			ДанныеЗапросаСвойства = ДанныеЗапросаОбъектXDTO.Свойства();
			
			Если Не ДанныеЗапросаСвойства.Получить("type") = Неопределено Тогда
				СлужебныеПараметры["ТипЗапроса"] = ДанныеЗапросаОбъектXDTO["type"]
		
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;

	Возврат СлужебныеПараметры;
	
КонецФункции

Функция КорневойЭлементСодержимогоОтвета(ИдентификаторЗапроса) Экспорт

	ТипКорневогоОбъекта = ФабрикаXDTO.Тип("http://www.dsf-yandex-market.kz", "root");
	
	КорневойЭлемент = ФабрикаXDTO.Создать(ТипКорневогоОбъекта);
	КорневойЭлемент.uniq = ИдентификаторЗапроса;
	
	Возврат КорневойЭлемент;

КонецФункции

Функция ПустойОтвет(ТипЗапроса) Экспорт

	ТипОбъектаОтвет = ФабрикаXDTO.Тип("http://www.dsf-yandex-market.kz", "response");
	
	ДанныеОтвета = ФабрикаXDTO.Создать(ТипОбъектаОтвет);
	ДанныеОтвета.type = ТипЗапроса;
	
	Возврат ДанныеОтвета;

КонецФункции

Функция ИдентификаторРесурсаИзОбъектаXdto(ОбъектXDTO) Экспорт

	ИдентификаторРесурса = Новый Структура("yandexId,partnerId", "", "");	
	
	ЗаполнитьЗначенияСвойств(ИдентификаторРесурса, ОбъектXDTO);
	
	Возврат ИдентификаторРесурса;

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция - Описание элемента списка товаров в реестре
//
// Параметры:
//  ОбъектXdto	 - ОбъектXdto - дсфFulfillmentYandexMarket.RegistryItem
// 
// Возвращаемое значение:
//  ОписаниеЭлемента - Структура см. дсфСозданиеОбновлениеДанныхЯндексМаркет.НовоеОписаниеЭлементаСпискаТоваровВРеестре()
//
Функция ОписаниеЭлементаСпискаТоваровВРеестре(ОбъектXdto) Экспорт

	ОписаниеЭлемента = дсфСозданиеОбновлениеДанныхЯндексМаркет.НовоеОписаниеЭлементаСпискаТоваровВРеестре();
	
	ОписаниеЭлемента.Наименование = ОбъектXdto["name"];

	ОписаниеЭлемента.Цена = ОбъектXdto["price"];
	ОписаниеЭлемента.КоличествоЕдиницТовараВУпаковке = ОбъектXdto["boxCapacity"];
	ОписаниеЭлемента.КоличествоКоробокДляЕдиницыТовара = ОбъектXdto["boxCount"];
	
	ТипыТовараСписокXdto = ОбъектXdto["cargoTypes"]["cargoType"];
	Для каждого ТипТовараЗначение Из ТипыТовараСписокXdto Цикл
		ОписаниеЭлемента.ТипыТовара.Добавить(ТипТовараЗначение);
		
	КонецЦикла;
	
	ШтрихкодыСписокXdto = ОбъектXdto["barcodes"]["barcode"];
	Для каждого ОписаниеШтрихкодаXdto Из ШтрихкодыСписокXdto Цикл
		
		ОписаниеШтрихкода = дсфСозданиеОбновлениеДанныхЯндексМаркет.НовоеОписаниеШтрихкода();
		
		ОписаниеШтрихкода.Штрихкод = дсфОбщегоНазначенияЯндексМаркет.ЗначениеСвойстваXdto(ОписаниеШтрихкодаXdto, "code", "");
		ОписаниеШтрихкода.Тип = дсфОбщегоНазначенияЯндексМаркет.ЗначениеСвойстваXdto(ОписаниеШтрихкодаXdto, "type", "");
		ОписаниеШтрихкода.Источник = дсфОбщегоНазначенияЯндексМаркет.ЗначениеСвойстваXdto(ОписаниеШтрихкодаXdto, "source", "");
		
		ОписаниеЭлемента.Штрихкоды.Добавить(ОписаниеШтрихкода);
		
	КонецЦикла;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектXdto, "unitInfo") Тогда
		ИнформацияОЕдиницеТовара = ОбъектXdto["unitInfo"];
		
		// количество
		ДанныеОКоличествеXdto = ИнформацияОЕдиницеТовара["counts"];
		Если ДанныеОКоличествеXdto <> Неопределено Тогда
			ДанныеОКоличествеСписокXdto = ДанныеОКоличествеXdto["count"];
			
			Для каждого ОписаниеКоличестваXdto Из ДанныеОКоличествеСписокXdto Цикл
			
				СтатусЕдиницТовара = дсфОбщегоНазначенияЯндексМаркет.СтатусЕдиницыТовараПоНазванию(ОписаниеКоличестваXdto["countType"]);
				Количество = ОписаниеКоличестваXdto["quantity"];
			
				ОписаниеЭлемента.СведенияОКоличестве.Вставить(СтатусЕдиницТовара, Количество);
		
			КонецЦикла;

		КонецЕсли;
		
		// Идентификаторы
		ИдентификаторыXdto = ИнформацияОЕдиницеТовара["compositeId"];
		ИдентификаторыСписокXdto = ИдентификаторыXdto["partialIds"]["partialId"];
		
		Для каждого ОписаниеИдентификатораXdto Из ИдентификаторыСписокXdto Цикл
			
			ТипИдентификатора = дсфОбщегоНазначенияЯндексМаркет.ТипИдентификатораПоНазванию(ОписаниеИдентификатораXdto["idType"]);
			ЗначениеИдентификатора = ОписаниеИдентификатораXdto["value"];
			
			ОписаниеЭлемента.Идентификаторы.Вставить(ТипИдентификатора, ЗначениеИдентификатора);
		
		КонецЦикла;
		
		// весогабаритные характеристики
		ОбъектXdtoВГХ = ИнформацияОЕдиницеТовара["korobyte"];
		Если ОбъектXdtoВГХ <> Неопределено Тогда
			ОписаниеЭлемента.ВГХ.ШиринаСм = ОбъектXdtoВГХ["width"];
			ОписаниеЭлемента.ВГХ.ВысотаСм = ОбъектXdtoВГХ["height"];
			ОписаниеЭлемента.ВГХ.ДлинаСм = ОбъектXdtoВГХ["length"];
			ОписаниеЭлемента.ВГХ.ВесБруттоКг = ОбъектXdtoВГХ["weightGross"];
			ОписаниеЭлемента.ВГХ.ВесНеттоКг = ОбъектXdtoВГХ["weightNet"];
			ОписаниеЭлемента.ВГХ.ВесУпаковкиКг = ОбъектXdtoВГХ["weightTare"];

		КонецЕсли;
		
		// Описание
		ОписаниеЭлемента.Описание = ИнформацияОЕдиницеТовара["description"]; 
		
	КонецЕсли;
	
	Возврат ОписаниеЭлемента;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Код процедур и функций
#КонецОбласти