#Область ПрограммныйИнтерфейс

Функция НовыйРезультатОбработкиЗапроса() Экспорт
	РезультатОбработки = Новый Структура;
	
	РезультатОбработки.Вставить("Состояние", Перечисления.аргмСостоянияВходящихЗапросовА1.Принят);
	РезультатОбработки.Вставить("ОбработанУспешно", Истина);
	РезультатОбработки.Вставить("Данные", Неопределено); 
	РезультатОбработки.Вставить("ОписаниеОтвета", Неопределено);
	РезультатОбработки.Вставить("Ошибки", Новый Массив);
	РезультатОбработки.Вставить("ТипФайла", "");
	РезультатОбработки.Вставить("ИмяФайла", "");
	РезультатОбработки.Вставить("ДатаОбработки", Неопределено);
	РезультатОбработки.Вставить("ДатаУстаревания", Неопределено); 

	Возврат РезультатОбработки;
	
КонецФункции

Функция РезультатОбработкиЗапроса(ОписаниеЗапроса) Экспорт
	
	Ошибки = Новый Массив;
	РезультатОбработки = НовыйРезультатОбработкиЗапроса();
	
	ПроверятьНаличиеТелаЗапроса = ОписаниеЗапроса["ПравилоОбработки"]["ПроверятьНаличиеТелаЗапроса"];

	Если ПроверятьНаличиеТелаЗапроса И ОписаниеЗапроса["РазмерТелаЗапроса"] = 0 Тогда
		
		РезультатОбработки.ОбработанУспешно = Ложь;
		
		Ошибки.Добавить("Отсутствует тело запроса");
		
		РезультатОбработки.Ошибки = Ошибки;
		
		Возврат РезультатОбработки;
		
	КонецЕсли;
	
	ИмяМетода = ОписаниеЗапроса["ПравилоОбработки"]["ИмяМетода"];
		
	Параметры = Новый Массив;
	Параметры.Добавить(ОписаниеЗапроса);
	Параметры.Добавить(РезультатОбработки);
	
	Попытка
		ОбщегоНазначения.ВыполнитьМетодКонфигурации(ИмяМетода, Параметры); 
		
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(аргмВходящиеЗапросыА1.ИмяСобытияЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Ошибка,
									,
									,
									ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
								
		РезультатОбработки.Ошибки.Добавить(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));

		РезультатОбработки.Состояние = Перечисления.аргмСостоянияВходящихЗапросовА1.ОшибкаВыполнения;
		РезультатОбработки.ОбработанУспешно = Ложь;
		
		ВызватьИсключение ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		
	КонецПопытки;
	
	//	
	СрокУстареванияРезультата = ОписаниеЗапроса["ПравилоОбработки"]["СрокУстареванияРезультата"];
	
	Если СрокУстареванияРезультата > 0 И РезультатОбработки.ОбработанУспешно Тогда
		РезультатОбработки.ДатаУстаревания = РезультатОбработки.ДатаОбработки + СрокУстареванияРезультата;
		
	КонецЕсли;	
		
	Возврат РезультатОбработки;
	
КонецФункции	

#Область РегламентныеОперации

Процедура ЗапуститьОбработкуАсихронныхЗапросов() Экспорт
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.аргмОбработкаАсинхронныхЗапросовА1);
	
	РегистрыСведений.аргмЖурналВходящихHttpЗапросовА1.ОбработкаАсихронныхЗапросов();
	
КонецПроцедуры

Процедура УдалитьУстаревшиеЗаписиЖурналаВходящихЗапросов() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.аргмУдалениеЗаписейЖурналаВходящихЗапросовА1);
	
	СрокХраненияЗаписей = Константы.аргмСрокХраненияВходящихЗапросовА1.Получить();
	
	РегистрыСведений.аргмЖурналВходящихHttpЗапросовА1.УдалитьУстаревшиеЗаписи(СрокХраненияЗаписей);
	
КонецПроцедуры

#КонецОбласти

#Область ФоновыеЗадания

Процедура ЗапуститьОбработкуЗапроса(ЗаписьЖурналаЗапросов, ОписаниеЗапроса) Экспорт
	
	ЛимитПоКоличествуЗаданий = 25;
	ИмяМетода = "аргмОбработкаВходящихЗапросовА1.ОбработатьЗапрос";
	
	НаименованиеФоновогоЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												НСтр("ru = 'Обработка входящего запроса: id %1 (%2 %3)'"),
												ЗаписьЖурналаЗапросов.ИдентификаторЗапроса,
												ЗаписьЖурналаЗапросов.Метод,
												ЗаписьЖурналаЗапросов.Ресурс);
												
	Отбор = Новый Структура;
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	Отбор.Вставить("ИмяМетода", ИмяМетода);
	
	ФоновыеЗаданияОбработкиЗапросов = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если ФоновыеЗаданияОбработкиЗапросов.Количество() > ЛимитПоКоличествуЗаданий Тогда
		ОжидатьЗавершенияОбработкиЗапросов(ФоновыеЗаданияОбработкиЗапросов, ЛимитПоКоличествуЗаданий);	
			
	КонецЕсли;
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(ЗаписьЖурналаЗапросов);
	ПараметрыЗадания.Добавить(ОписаниеЗапроса);
	
	ФоновыеЗадания.Выполнить(ИмяМетода, ПараметрыЗадания,, НаименованиеФоновогоЗадания);

КонецПроцедуры

Процедура ОжидатьЗавершенияОбработкиЗапросов(Задания, МаксимальноеКоличествоЗапущенныхЗаданий = 25) Экспорт
	
	Таймаут = 5; // сек.

	Пока Истина Цикл
		
		Задания = ФоновыеЗадания.ОжидатьЗавершенияВыполнения(Задания, Таймаут);
		НомерЗадания = Задания.Количество();
		
		Если НомерЗадания < МаксимальноеКоличествоЗапущенныхЗаданий Тогда
			Прервать;
			
		КонецЕсли;
		
		ЗавершенныеЗадания = Новый Массив;
		
		Пока НомерЗадания > 0 Цикл
			
			НомерЗадания = НомерЗадания - 1;
			Задание = Задания[НомерЗадания];
			
			Если Задание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
				Задания.Удалить(НомерЗадания);
				
			КонецЕсли;
					
			Если Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно 
				Или Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
				
				 ЗавершенныеЗадания.Добавить(НомерЗадания);
			КонецЕсли;
			
		КонецЦикла;
				
		Для Каждого НомерЗадания Из ЗавершенныеЗадания Цикл
			Задание = Задания[НомерЗадания];
			Задания.Удалить(НомерЗадания);
			Задание.Отменить();
			
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(Задания) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьЗапрос(ЗаписьЖурналаЗапросов, ОписаниеЗапроса) Экспорт
	
	РегистрыСведений.аргмЖурналВходящихHttpЗапросовА1.ОбработатьЗапрос(ЗаписьЖурналаЗапросов, ОписаниеЗапроса);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ПроцедурыНачалаОбработкиВходящихЗапросов

Процедура ОтветитьНаНеобрабатываемыйЗапрос(ОписаниеЗапроса, РезультатОбработкиЗапроса) Экспорт
	
	ТекстОшибки = "The processing scenario could not be determined or the message format does not meet the requirements";
	
	РезультатОбработкиЗапроса.Ошибки.Добавить(ТекстОшибки);
	
	РезультатОбработкиЗапроса.Данные = Новый Структура("errors", РезультатОбработкиЗапроса.Ошибки);
	РезультатОбработкиЗапроса.Состояние = Перечисления.аргмСостоянияВходящихЗапросовА1.ОшибкаВыполнения;
			
	РезультатОбработкиЗапроса.ДатаОбработки = ТекущаяДатаСеанса();

КонецПроцедуры

Процедура ПроверкаРаботоспособности(ОписаниеЗапроса, РезультатОбработкиЗапроса) Экспорт

	// разбор данных
	ПараметрыПреобразования = Новый Структура;
	ПараметрыПреобразования.Вставить("ИменаСвойствСоЗначениямиДата",
									ОписаниеЗапроса["ПравилоОбработки"]["ИменаСвойствСоЗначениямиДата"]);

	ДанныеЗапроса = аргмКоннекторHttpA1.JsonВОбъект(ОписаниеЗапроса.Тело, "utf-8", ПараметрыПреобразования);
	
	Ошибки = РезультатОбработкиЗапроса.Ошибки;
	Результат = ПроверкаРаботоспособностиРезультат(ДанныеЗапроса, Ошибки);
	
	Если ЗначениеЗаполнено(Результат) Тогда
		РезультатОбработкиЗапроса.Вставить("Данные", Результат);
		РезультатОбработкиЗапроса.Состояние = Перечисления.аргмСостоянияВходящихЗапросовА1.Завершен;

	Иначе
		РезультатОбработкиЗапроса.Ошибки = Ошибки;
		РезультатОбработкиЗапроса.Данные = Новый Структура("errors", Ошибки);
		РезультатОбработкиЗапроса.Состояние = Перечисления.аргмСостоянияВходящихЗапросовА1.ОшибкаВыполнения;
		
	КонецЕсли;
	
	РезультатОбработкиЗапроса.ДатаОбработки = ТекущаяДатаСеанса();

КонецПроцедуры

Функция ПроверкаРаботоспособностиРезультат(ДанныеДляПроверки, Ошибки) Экспорт
	
	ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	СлучайноеЧисло = ГСЧ.СлучайноеЧисло(0, 10000);
	
	Если СлучайноеЧисло % 2 > 0 Тогда
		Возврат ДанныеДляПроверки;
		
	Иначе
		Ошибки.Добавить(СтрШаблон("Пример сообщения об ошибке. Код ошибки %1", XMLСтрока(СлучайноеЧисло * 3)));
		Возврат Неопределено;
		
	КонецЕсли;	
	
КонецФункции


#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Код процедур и функций
#КонецОбласти