#Область ПрограммныйИнтерфейс

Функция АвторизацияПоТокенуДляВходящегоЗапросаВыполнена(ВходящийТокенАвторизации) Экспорт
	
	Возврат ВходящийТокенАвторизации = ТокенАвторизацииДляВходящихЗапросов();
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ТокенАвторизацииДляВходящихЗапросов() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТокенДоступа = 
		ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ИдентификаторТокенаАвторизацииДляВходящихЗапросовСлужебный());
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТокенДоступа;
	
КонецФункции

Процедура ЗаписатьТокенАвторизацииДляВходящихЗапросов(Токен) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ИдентификаторТокенаАвторизацииДляВходящихЗапросовСлужебный(), Токен);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИдентификаторТокенаАвторизацииДляВходящихЗапросовСлужебный()

	Возврат "30def951-6727-404a-bc1f-be7fbe14b3a5";

КонецФункции

#КонецОбласти