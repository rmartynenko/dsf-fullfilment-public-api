#Область ПрограммныйИнтерфейс

Функция НовоеВходящееОписаниеНоменклатуры() Экспорт
	ОписаниеНоменклатуры = Новый Структура;
	
	ОписаниеНоменклатуры.Вставить("Артикул", "");
	ОписаниеНоменклатуры.Вставить("Наименование", "");
	ОписаниеНоменклатуры.Вставить("НаименованиеПолное", "");
	ОписаниеНоменклатуры.Вставить("Поклажедатель", Неопределено);
	ОписаниеНоменклатуры.Вставить("ПрефиксКода", "");
	ОписаниеНоменклатуры.Вставить("ЕдиницаИзмерения", дсфОбщегоНазначенияАпиПовтИсп.ЕдиницаИзмеренияШтук());
	ОписаниеНоменклатуры.Вставить("ВесБазовойЕдиницы", 0);
	ОписаниеНоменклатуры.Вставить("ВГХ", НовоеОписаниеВГХОбъекта()); // см. НовоеОписаниеВГХОбъекта()
	ОписаниеНоменклатуры.Вставить("КоличествоЕдиницТовараВУпаковке", 1);

	ОписаниеНоменклатуры.Вставить("Штрихкоды", Новый Массив); // массив структур, см. дсфНоменклатураАпи.НовоеОписаниеШтрихкода
	
	ОписаниеНоменклатуры.Вставить("СрокХраненияДней", 0);
	ОписаниеНоменклатуры.Вставить("ТорговаяМарка", "");
	
	ОписаниеНоменклатуры.Вставить("Цена", 0);
	
	Возврат ОписаниеНоменклатуры;
	
КонецФункции

Функция НовоеОписаниеВГХОбъекта() Экспорт
	ВГХОбъекта = Новый Структура;
	
	ВГХОбъекта.Вставить("ШиринаСм", 0);
	ВГХОбъекта.Вставить("ВысотаСм", 0);
	ВГХОбъекта.Вставить("ДлинаСм", 0);
	ВГХОбъекта.Вставить("ВесБруттоКг", 0);
	ВГХОбъекта.Вставить("ВесНеттоКг", 0);
	ВГХОбъекта.Вставить("ВесУпаковкиКг", 0);
	
	Возврат ВГХОбъекта;

КонецФункции

Функция НовоеОписаниеШтрихкода() Экспорт
	ОписаниеШтрихкода = Новый Структура;
	
	ОписаниеШтрихкода.Вставить("Штрихкод", "");
	ОписаниеШтрихкода.Вставить("Тип", "");
	ОписаниеШтрихкода.Вставить("Источник", "");
	
	Возврат ОписаниеШтрихкода;

КонецФункции

Процедура ЗаполнитьВходящееОписаниеНоменклатуры(ИсходныеДанные, ОписаниеНоменклатуры, Ошибки = Неопределено) Экспорт
	Если Ошибки = Неопределено Тогда
		Ошибки = Новый Массив;
		
	КонецЕсли;
	
	// Важно. Поля ПрефиксКода и Поклажедатель устанавливаются вне этой процедуры
	//
	ОписаниеНоменклатуры["Артикул"] = ИсходныеДанные["sku"];
	ОписаниеНоменклатуры["Наименование"] = ИсходныеДанные["name"];
	ОписаниеНоменклатуры["НаименованиеПолное"] = ИсходныеДанные["full_name"];
	
	ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(ИсходныеДанные["unit"]);
	Если ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка() Тогда
		ТекстОшибки = СтрШаблон("Ошибка определения единицы измерения для sku: %1. Ед.изм. %2",
								ИсходныеДанные["sku"],
								ИсходныеДанные["unit"]);
								
	Иначе	
		ОписаниеНоменклатуры["ЕдиницаИзмерения"] = ЕдиницаИзмерения;
		
	КонецЕсли;
	
	ОписаниеНоменклатуры["ВесБазовойЕдиницы"] = 
										ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсходныеДанные, "weight", 0);
										
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсходныеДанные, "dimensions") Тогда
		ГабаритыБазовойЕдиницы = ИсходныеДанные["dimensions"];
		ВысотаСм = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ГабаритыБазовойЕдиницы, "height", 0);
		ДлинаСм = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ГабаритыБазовойЕдиницы, "length", 0);
		ШиринаСм = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ГабаритыБазовойЕдиницы, "width", 0);
		
		ОписаниеНоменклатуры["ВГХ"]["ВысотаСм"] = ВысотаСм;
		ОписаниеНоменклатуры["ВГХ"]["ДлинаСм"] = ДлинаСм;
		ОписаниеНоменклатуры["ВГХ"]["ШиринаСм"] = ШиринаСм;
		
		ОписаниеНоменклатуры["ВГХ"]["ВесНеттоКг"] = ОписаниеНоменклатуры["ВесБазовойЕдиницы"];
		ОписаниеНоменклатуры["ВГХ"]["ВесБруттоКг"] = ОписаниеНоменклатуры["ВесБазовойЕдиницы"];
		
	КонецЕсли;
	
	ОписаниеНоменклатуры["КоличествоЕдиницТовараВУпаковке"] = 
					ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсходныеДанные, "package_quantity", 1);

	Штрихкоды = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсходныеДанные, "barcodes", Неопределено);
	
	Если ЗначениеЗаполнено(Штрихкоды) И ТипЗнч(Штрихкоды) = Тип("Массив") Тогда
		Для каждого ТекШтрихкод Из Штрихкоды Цикл
			
			ОписаниеШтрихкода = дсфНоменклатураАпи.НовоеОписаниеШтрихкода();
			ОписаниеШтрихкода.Штрихкод = ТекШтрихкод;
			ОписаниеНоменклатуры["Штрихкоды"].Добавить(ОписаниеШтрихкода);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОписаниеНоменклатуры["СрокХраненияДней"] =
								ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсходныеДанные, "shelf_life_days", 0);
								
	ОписаниеНоменклатуры["ТорговаяМарка"] =
								ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсходныеДанные, "brand", "");
								
	ОписаниеНоменклатуры["Цена"] = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсходныеДанные, "price", "");
	
КонецПроцедуры

Функция СведенияОПозицииНоменклатуры(НоменклатураСсылка) Экспорт
	
	РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоменклатураСсылка, "Артикул,Наименование");
	СведенияОНоменклатуре = Новый Структура;
	СведенияОНоменклатуре.Вставить("id", XMLСтрока(НоменклатураСсылка));
	СведенияОНоменклатуре.Вставить("sku", РеквизитыНоменклатуры.Артикул);
	СведенияОНоменклатуре.Вставить("name", РеквизитыНоменклатуры.Наименование);

	Возврат СведенияОНоменклатуре;
	
КонецФункции

Функция НоменклатураПоклажедателяПоАртикулу(Поклажедатель, Артикул) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Организация = &Поклажедатель
	|	И Номенклатура.Артикул = &Артикул";
	
	Запрос.УстановитьПараметр("Поклажедатель", Поклажедатель);
	Запрос.УстановитьПараметр("Артикул", Артикул);

	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Справочники.Номенклатура.ПустаяСсылка();

	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
		
	КонецЦикла;

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция НоваяНоменклатураПоОписанию(ОписаниеТовара, Ошибки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	АртикулНоменклатуры = ОписаниеТовара.Артикул;
	Если ПустаяСтрока(АртикулНоменклатуры) Тогда
		Ошибки.Добавить(СтрШаблон("Для товара %1 не указано значение sku", ОписаниеТовара.Наименование));
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	НаименованиеНоменклатуры = ОписаниеТовара.Наименование;
	Если ПустаяСтрока(НаименованиеНоменклатуры) Тогда
		Ошибки.Добавить(СтрШаблон("Для товара с sku 1% не указано наименование", ОписаниеТовара.Артику));
		
		Возврат Неопределено;
		
	КонецЕсли;

	КоэффициентПересчетаОбъема = Константы.КоэффициентПересчетаЛинейныхГабаритовВОбъем.Получить();

	НачатьТранзакцию();
	Попытка
		ИдентификаторНоменклатуры = Новый УникальныйИдентификатор;
				
		СсылкаНаНовый = Справочники.Номенклатура.ПолучитьСсылку(ИдентификаторНоменклатуры);

		НоваяНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
		НоваяНоменклатура.УстановитьСсылкуНового(СсылкаНаНовый);
			
		НоваяНоменклатура.Заполнить(Неопределено);
		
		НоваяНоменклатура.Организация = ОписаниеТовара.Поклажедатель;
		
		НоваяНоменклатура.Артикул = АртикулНоменклатуры;
		НоваяНоменклатура.Наименование = НаименованиеНоменклатуры;

		Если ПустаяСтрока(ОписаниеТовара.НаименованиеПолное) Тогда
			НоваяНоменклатура.НаименованиеПолное = НаименованиеНоменклатуры;
			
		Иначе
			НоваяНоменклатура.НаименованиеПолное = ОписаниеТовара.НаименованиеПолное;
			
		КонецЕсли;
	
		НоваяНоменклатура.ЕдиницаИзмерения = ОписаниеТовара.ЕдиницаИзмерения;
		
		//
		// TODO: Добавить логику определения вида номенкатуры для товара
		//
		НоваяНоменклатура.ВидНоменклатуры = Справочники.ВидыОбъектовХранения.ПустаяСсылка();
		
		// базовые ВГХ номенклатуры
		НоваяНоменклатура.Масса = ОписаниеТовара["ВесБазовойЕдиницы"];
		НоваяНоменклатура.МассаНетто = ОписаниеТовара["ВесБазовойЕдиницы"];
		
		НоваяНоменклатура.ОбъемНетто = ОбъемПоРазмерам(ОписаниеТовара.ВГХ["ШиринаСм"],
														ОписаниеТовара.ВГХ["ДлинаСм"],
														ОписаниеТовара.ВГХ["ВысотаСм"],
														КоэффициентПересчетаОбъема);
														
		Если ОписаниеТовара.СрокХраненияДней > 0 Тогда
			НоваяНоменклатура.СрокХранения = ОписаниеТовара.СрокХраненияДней;
			НоваяНоменклатура.ЕдиницаИзмеренияСрокаХранения = Перечисления.ЕдиницыИзмеренияВремени.Сутки;
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(ОписаниеТовара.ТорговаяМарка) Тогда
			ТорговаяМарка = Справочники.ТорговыеМарки.НайтиПоНаименованию(ОписаниеТовара.ТорговаяМарка);
			
			Если ТорговаяМарка = Справочники.ТорговыеМарки.ПустаяСсылка() Тогда
				НоваяТорговаяМарка = Справочники.ТорговыеМарки.СоздатьЭлемент();
				НоваяТорговаяМарка.Заполнить(Неопределено);
				НоваяТорговаяМарка.Наименование = ОписаниеТовара.ТорговаяМарка;
				НоваяТорговаяМарка.Записать();
				
				ТорговаяМарка = НоваяТорговаяМарка.Ссылка;
			
			КонецЕсли;
			
			НоваяНоменклатура.ТорговаяМарка = ТорговаяМарка;
			
		КонецЕсли;
		
		НоваяНоменклатура.Цена = ОписаниеТовара.Цена;
		
		НоваяНоменклатура.Комментарий = СтрШаблон("Зарегистрирована %1", Формат(ТекущаяДатаСеанса(), "ДФ='dd.MM.yyyy HH:mm:ss'"));
		
//		НоваяНоменклатура.УстановитьНовыйКод(ОписаниеТовара.ПрефиксКода);
		
		НоваяНоменклатура.Записать();
		
		Номенклатура = НоваяНоменклатура.Ссылка;

		// создание упаковки номенклатуры для базовой единицы
		УпаковкаДляШтук = Справочники.УпаковкиНоменклатуры.СоздатьЭлемент();
		УпаковкаДляШтук.Владелец = Номенклатура;
		
		//
		// TODO: Добавить логику определения вида учета для упаковки, пока для всех штучный товар
		//
		УпаковкаДляШтук.ВидУчета = Перечисления.ВидыУчетаУпаковок.УпаковкаШтучногоТовара;
		
		УпаковкаДляШтук.ЕдиницаИзмерения = ОписаниеТовара.ЕдиницаИзмерения;
		УпаковкаДляШтук.Коэффициент = 1;

		УпаковкаДляШтук.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УпаковкаДляШтук.ЕдиницаИзмерения, "Наименование");
		УпаковкаДляШтук.НаименованиеПолное = УпаковкаДляШтук.Наименование;
		УпаковкаДляШтук.Масса = ОписаниеТовара.ВГХ["ВесБруттоКг"];
		УпаковкаДляШтук.МассаНетто = ОписаниеТовара.ВГХ["ВесНеттоКг"];
		УпаковкаДляШтук.Высота = ОписаниеТовара.ВГХ["ВысотаСм"];
		УпаковкаДляШтук.Глубина = ОписаниеТовара.ВГХ["ДлинаСм"];
		УпаковкаДляШтук.Ширина = ОписаниеТовара.ВГХ["ШиринаСм"];
		УпаковкаДляШтук.Объем = ОбъемПоРазмерам(УпаковкаДляШтук.Ширина,
												УпаковкаДляШтук.Глубина,
												УпаковкаДляШтук.Высота,
												КоэффициентПересчетаОбъема);

		УпаковкаДляШтук.Записать();
		
		// создание упаковки для короба
		Если ОписаниеТовара.КоличествоЕдиницТовараВУпаковке > 1 Тогда
			УпаковкаДляКороба = Справочники.УпаковкиНоменклатуры.СоздатьЭлемент();
			УпаковкаДляКороба.Владелец = Номенклатура;
			
			УпаковкаДляКороба.Родитель = УпаковкаДляШтук.Ссылка;
		
			//
			// TODO: Добавить логику определения вида учета для упаковки, пока для всех штучный товар
			//
			УпаковкаДляКороба.ВидУчета = Перечисления.ВидыУчетаУпаковок.УпаковкаШтучногоТовара;
		
			УпаковкаДляКороба.ЕдиницаИзмерения = дсфОбщегоНазначенияАпиПовтИсп.ЕдиницаИзмеренияКоробов();
			УпаковкаДляКороба.Коэффициент = ОписаниеТовара.КоличествоЕдиницТовараВУпаковке;
			
			НаименованиеУпаковки = СтрШаблон("%1 (%2 %3)",
									ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УпаковкаДляКороба.ЕдиницаИзмерения, "Наименование"),
									Формат(УпаковкаДляКороба.Коэффициент, "ЧГ=0"),
									ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОписаниеТовара.ЕдиницаИзмерения, "Наименование"));

			УпаковкаДляКороба.Наименование = НаименованиеУпаковки;
			УпаковкаДляКороба.НаименованиеПолное = НаименованиеУпаковки;
			
			УпаковкаДляКороба.Записать();
			
		КонецЕсли;
		
		// партия номенклатуры

		// актуализация штрихкодов
		ОбновитьШтрихкодыНоменклатуры(Номенклатура, ОписаниеТовара.Штрихкоды, УпаковкаДляШтук.Ссылка);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(аргмВходящиеЗапросыА1.ИмяСобытияЖурналаРегистрации(),
								УровеньЖурналаРегистрации.Ошибка,
								Метаданные.HTTPСервисы.дсфFulfillmentPublicApi,,
								ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
								
		Ошибки.Добавить(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат НоваяНоменклатура.Ссылка;

КонецФункции

// Процедура - Обновить штрихкоды номенклатуры
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - 
//  Штрихкоды	 - Массив - см. НовоеОписаниеШтрихкода
//  Упаковка	 - СправочникСсылка.УпаковкиНоменклатуры - 
//
Процедура ОбновитьШтрихкодыНоменклатуры(Номенклатура, Штрихкоды, Упаковка = Неопределено) Экспорт
	// записываем только, если данного шк нет в базе
	
	Для каждого ОписаниеШтрихкода Из Штрихкоды Цикл
	
		НаборЗаписей = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
		НаборЗаписей.Отбор.УпаковкаНоменклатуры.Установить(Упаковка);
		НаборЗаписей.Отбор.Штрихкод.Установить(ОписаниеШтрихкода.Штрихкод);
		
		МенеджерЗаписи = НаборЗаписей.Добавить();
		//МенеджерЗаписи.Состояние  = СтрокаНабора.Состояние;
		//МенеджерЗаписи.Партия     = Партия;
		//МенеджерЗаписи.Количество = СтрокаНабора.Количество;
		
		НаборЗаписей.ДополнительныеСвойства.Вставить("НеОбновлятьСвязанные");
		ФормированиеДвижений.ЗаполнитьНаборЗаписейПоОтбору(НаборЗаписей);
		НаборЗаписей.Записать();
	
	КонецЦикла;	

КонецПроцедуры

Функция ОбъемПоРазмерам(Ширина = 0, Длина = 0, Высота = 0, КоэффициентПересчетаОбъема) Экспорт
	
	Возврат СлужебныйКлиентСервер.ОбъемПоРазмерам(Ширина, Длина, Высота, КоэффициентПересчетаОбъема);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Код процедур и функций
#КонецОбласти